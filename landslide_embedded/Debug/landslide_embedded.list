
landslide_embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abcc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  0800ac88  0800ac88  0001ac88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b92c  0800b92c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b92c  0800b92c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b92c  0800b92c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001e4  0800bb18  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  0800bb18  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189bd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314b  00000000  00000000  00038bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de0  00000000  00000000  0003e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b97  00000000  00000000  00051df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071d57  00000000  00000000  00068987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da6de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  000da734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e4 	.word	0x200001e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ac70 	.word	0x0800ac70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e8 	.word	0x200001e8
 8000100:	0800ac70 	.word	0x0800ac70

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fa5d 	bl	80018f8 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f9a7 	bl	800179c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fa4f 	bl	80018f8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fa45 	bl	80018f8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f9c9 	bl	8001814 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f9bf 	bl	8001814 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4646      	mov	r6, r8
 80004a8:	46d6      	mov	lr, sl
 80004aa:	464f      	mov	r7, r9
 80004ac:	024d      	lsls	r5, r1, #9
 80004ae:	0242      	lsls	r2, r0, #9
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	0a52      	lsrs	r2, r2, #9
 80004b4:	0a6e      	lsrs	r6, r5, #9
 80004b6:	0047      	lsls	r7, r0, #1
 80004b8:	46b0      	mov	r8, r6
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	004e      	lsls	r6, r1, #1
 80004be:	0fc4      	lsrs	r4, r0, #31
 80004c0:	00d0      	lsls	r0, r2, #3
 80004c2:	4694      	mov	ip, r2
 80004c4:	003b      	movs	r3, r7
 80004c6:	4682      	mov	sl, r0
 80004c8:	0e36      	lsrs	r6, r6, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09ad      	lsrs	r5, r5, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d06d      	beq.n	80005ae <__aeabi_fadd+0x10a>
 80004d2:	1bb8      	subs	r0, r7, r6
 80004d4:	4681      	mov	r9, r0
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd4d      	ble.n	8000576 <__aeabi_fadd+0xd2>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x3c>
 80004de:	e088      	b.n	80005f2 <__aeabi_fadd+0x14e>
 80004e0:	2fff      	cmp	r7, #255	; 0xff
 80004e2:	d05a      	beq.n	800059a <__aeabi_fadd+0xf6>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	04db      	lsls	r3, r3, #19
 80004e8:	431d      	orrs	r5, r3
 80004ea:	464b      	mov	r3, r9
 80004ec:	2201      	movs	r2, #1
 80004ee:	2b1b      	cmp	r3, #27
 80004f0:	dc0a      	bgt.n	8000508 <__aeabi_fadd+0x64>
 80004f2:	002b      	movs	r3, r5
 80004f4:	464a      	mov	r2, r9
 80004f6:	4649      	mov	r1, r9
 80004f8:	40d3      	lsrs	r3, r2
 80004fa:	2220      	movs	r2, #32
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	4095      	lsls	r5, r2
 8000500:	002a      	movs	r2, r5
 8000502:	1e55      	subs	r5, r2, #1
 8000504:	41aa      	sbcs	r2, r5
 8000506:	431a      	orrs	r2, r3
 8000508:	4653      	mov	r3, sl
 800050a:	1a9a      	subs	r2, r3, r2
 800050c:	0153      	lsls	r3, r2, #5
 800050e:	d400      	bmi.n	8000512 <__aeabi_fadd+0x6e>
 8000510:	e0b9      	b.n	8000686 <__aeabi_fadd+0x1e2>
 8000512:	0192      	lsls	r2, r2, #6
 8000514:	0996      	lsrs	r6, r2, #6
 8000516:	0030      	movs	r0, r6
 8000518:	f002 f9d6 	bl	80028c8 <__clzsi2>
 800051c:	3805      	subs	r0, #5
 800051e:	4086      	lsls	r6, r0
 8000520:	4287      	cmp	r7, r0
 8000522:	dd00      	ble.n	8000526 <__aeabi_fadd+0x82>
 8000524:	e0d4      	b.n	80006d0 <__aeabi_fadd+0x22c>
 8000526:	0033      	movs	r3, r6
 8000528:	1bc7      	subs	r7, r0, r7
 800052a:	2020      	movs	r0, #32
 800052c:	3701      	adds	r7, #1
 800052e:	40fb      	lsrs	r3, r7
 8000530:	1bc7      	subs	r7, r0, r7
 8000532:	40be      	lsls	r6, r7
 8000534:	0032      	movs	r2, r6
 8000536:	1e56      	subs	r6, r2, #1
 8000538:	41b2      	sbcs	r2, r6
 800053a:	2700      	movs	r7, #0
 800053c:	431a      	orrs	r2, r3
 800053e:	0753      	lsls	r3, r2, #29
 8000540:	d004      	beq.n	800054c <__aeabi_fadd+0xa8>
 8000542:	230f      	movs	r3, #15
 8000544:	4013      	ands	r3, r2
 8000546:	2b04      	cmp	r3, #4
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0xa8>
 800054a:	3204      	adds	r2, #4
 800054c:	0153      	lsls	r3, r2, #5
 800054e:	d400      	bmi.n	8000552 <__aeabi_fadd+0xae>
 8000550:	e09c      	b.n	800068c <__aeabi_fadd+0x1e8>
 8000552:	1c7b      	adds	r3, r7, #1
 8000554:	2ffe      	cmp	r7, #254	; 0xfe
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xb6>
 8000558:	e09a      	b.n	8000690 <__aeabi_fadd+0x1ec>
 800055a:	0192      	lsls	r2, r2, #6
 800055c:	0a52      	lsrs	r2, r2, #9
 800055e:	4694      	mov	ip, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	05d8      	lsls	r0, r3, #23
 8000564:	4663      	mov	r3, ip
 8000566:	07e4      	lsls	r4, r4, #31
 8000568:	4318      	orrs	r0, r3
 800056a:	4320      	orrs	r0, r4
 800056c:	bce0      	pop	{r5, r6, r7}
 800056e:	46ba      	mov	sl, r7
 8000570:	46b1      	mov	r9, r6
 8000572:	46a8      	mov	r8, r5
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	2800      	cmp	r0, #0
 8000578:	d049      	beq.n	800060e <__aeabi_fadd+0x16a>
 800057a:	1bf3      	subs	r3, r6, r7
 800057c:	2f00      	cmp	r7, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0xde>
 8000580:	e0b6      	b.n	80006f0 <__aeabi_fadd+0x24c>
 8000582:	4652      	mov	r2, sl
 8000584:	2a00      	cmp	r2, #0
 8000586:	d060      	beq.n	800064a <__aeabi_fadd+0x1a6>
 8000588:	3b01      	subs	r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0xec>
 800058e:	e0fc      	b.n	800078a <__aeabi_fadd+0x2e6>
 8000590:	2eff      	cmp	r6, #255	; 0xff
 8000592:	d000      	beq.n	8000596 <__aeabi_fadd+0xf2>
 8000594:	e0b4      	b.n	8000700 <__aeabi_fadd+0x25c>
 8000596:	000c      	movs	r4, r1
 8000598:	4642      	mov	r2, r8
 800059a:	2a00      	cmp	r2, #0
 800059c:	d078      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	03c0      	lsls	r0, r0, #15
 80005a2:	4310      	orrs	r0, r2
 80005a4:	0242      	lsls	r2, r0, #9
 80005a6:	0a53      	lsrs	r3, r2, #9
 80005a8:	469c      	mov	ip, r3
 80005aa:	23ff      	movs	r3, #255	; 0xff
 80005ac:	e7d9      	b.n	8000562 <__aeabi_fadd+0xbe>
 80005ae:	1bb9      	subs	r1, r7, r6
 80005b0:	2900      	cmp	r1, #0
 80005b2:	dd71      	ble.n	8000698 <__aeabi_fadd+0x1f4>
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d03f      	beq.n	8000638 <__aeabi_fadd+0x194>
 80005b8:	2fff      	cmp	r7, #255	; 0xff
 80005ba:	d0ee      	beq.n	800059a <__aeabi_fadd+0xf6>
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	04db      	lsls	r3, r3, #19
 80005c0:	431d      	orrs	r5, r3
 80005c2:	2201      	movs	r2, #1
 80005c4:	291b      	cmp	r1, #27
 80005c6:	dc07      	bgt.n	80005d8 <__aeabi_fadd+0x134>
 80005c8:	002a      	movs	r2, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	40ca      	lsrs	r2, r1
 80005ce:	1a59      	subs	r1, r3, r1
 80005d0:	408d      	lsls	r5, r1
 80005d2:	1e6b      	subs	r3, r5, #1
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	432a      	orrs	r2, r5
 80005d8:	4452      	add	r2, sl
 80005da:	0153      	lsls	r3, r2, #5
 80005dc:	d553      	bpl.n	8000686 <__aeabi_fadd+0x1e2>
 80005de:	3701      	adds	r7, #1
 80005e0:	2fff      	cmp	r7, #255	; 0xff
 80005e2:	d055      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 80005e4:	2301      	movs	r3, #1
 80005e6:	497b      	ldr	r1, [pc, #492]	; (80007d4 <__aeabi_fadd+0x330>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	0852      	lsrs	r2, r2, #1
 80005ec:	400a      	ands	r2, r1
 80005ee:	431a      	orrs	r2, r3
 80005f0:	e7a5      	b.n	800053e <__aeabi_fadd+0x9a>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d02c      	beq.n	8000650 <__aeabi_fadd+0x1ac>
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	469c      	mov	ip, r3
 80005fc:	44e1      	add	r9, ip
 80005fe:	464b      	mov	r3, r9
 8000600:	2b00      	cmp	r3, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0x162>
 8000604:	e0ad      	b.n	8000762 <__aeabi_fadd+0x2be>
 8000606:	2fff      	cmp	r7, #255	; 0xff
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x168>
 800060a:	e76e      	b.n	80004ea <__aeabi_fadd+0x46>
 800060c:	e7c5      	b.n	800059a <__aeabi_fadd+0xf6>
 800060e:	20fe      	movs	r0, #254	; 0xfe
 8000610:	1c7e      	adds	r6, r7, #1
 8000612:	4230      	tst	r0, r6
 8000614:	d160      	bne.n	80006d8 <__aeabi_fadd+0x234>
 8000616:	2f00      	cmp	r7, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x178>
 800061a:	e093      	b.n	8000744 <__aeabi_fadd+0x2a0>
 800061c:	4652      	mov	r2, sl
 800061e:	2a00      	cmp	r2, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x180>
 8000622:	e0b6      	b.n	8000792 <__aeabi_fadd+0x2ee>
 8000624:	2d00      	cmp	r5, #0
 8000626:	d09c      	beq.n	8000562 <__aeabi_fadd+0xbe>
 8000628:	1b52      	subs	r2, r2, r5
 800062a:	0150      	lsls	r0, r2, #5
 800062c:	d400      	bmi.n	8000630 <__aeabi_fadd+0x18c>
 800062e:	e0c3      	b.n	80007b8 <__aeabi_fadd+0x314>
 8000630:	4653      	mov	r3, sl
 8000632:	000c      	movs	r4, r1
 8000634:	1aea      	subs	r2, r5, r3
 8000636:	e782      	b.n	800053e <__aeabi_fadd+0x9a>
 8000638:	2d00      	cmp	r5, #0
 800063a:	d009      	beq.n	8000650 <__aeabi_fadd+0x1ac>
 800063c:	3901      	subs	r1, #1
 800063e:	2900      	cmp	r1, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x1a0>
 8000642:	e08b      	b.n	800075c <__aeabi_fadd+0x2b8>
 8000644:	2fff      	cmp	r7, #255	; 0xff
 8000646:	d1bc      	bne.n	80005c2 <__aeabi_fadd+0x11e>
 8000648:	e7a7      	b.n	800059a <__aeabi_fadd+0xf6>
 800064a:	000c      	movs	r4, r1
 800064c:	4642      	mov	r2, r8
 800064e:	0037      	movs	r7, r6
 8000650:	2fff      	cmp	r7, #255	; 0xff
 8000652:	d0a2      	beq.n	800059a <__aeabi_fadd+0xf6>
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	0a53      	lsrs	r3, r2, #9
 8000658:	469c      	mov	ip, r3
 800065a:	b2fb      	uxtb	r3, r7
 800065c:	e781      	b.n	8000562 <__aeabi_fadd+0xbe>
 800065e:	21fe      	movs	r1, #254	; 0xfe
 8000660:	3701      	adds	r7, #1
 8000662:	4239      	tst	r1, r7
 8000664:	d165      	bne.n	8000732 <__aeabi_fadd+0x28e>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d17e      	bne.n	8000768 <__aeabi_fadd+0x2c4>
 800066a:	2800      	cmp	r0, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x1cc>
 800066e:	e0aa      	b.n	80007c6 <__aeabi_fadd+0x322>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x1d2>
 8000674:	e775      	b.n	8000562 <__aeabi_fadd+0xbe>
 8000676:	002a      	movs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	2700      	movs	r7, #0
 800067c:	0153      	lsls	r3, r2, #5
 800067e:	d502      	bpl.n	8000686 <__aeabi_fadd+0x1e2>
 8000680:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <__aeabi_fadd+0x334>)
 8000682:	3701      	adds	r7, #1
 8000684:	401a      	ands	r2, r3
 8000686:	0753      	lsls	r3, r2, #29
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x1e8>
 800068a:	e75a      	b.n	8000542 <__aeabi_fadd+0x9e>
 800068c:	08d2      	lsrs	r2, r2, #3
 800068e:	e7df      	b.n	8000650 <__aeabi_fadd+0x1ac>
 8000690:	2200      	movs	r2, #0
 8000692:	23ff      	movs	r3, #255	; 0xff
 8000694:	4694      	mov	ip, r2
 8000696:	e764      	b.n	8000562 <__aeabi_fadd+0xbe>
 8000698:	2900      	cmp	r1, #0
 800069a:	d0e0      	beq.n	800065e <__aeabi_fadd+0x1ba>
 800069c:	1bf3      	subs	r3, r6, r7
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d03e      	beq.n	8000720 <__aeabi_fadd+0x27c>
 80006a2:	2eff      	cmp	r6, #255	; 0xff
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x204>
 80006a6:	e777      	b.n	8000598 <__aeabi_fadd+0xf4>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0001      	movs	r1, r0
 80006ac:	04d2      	lsls	r2, r2, #19
 80006ae:	4311      	orrs	r1, r2
 80006b0:	468a      	mov	sl, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	2b1b      	cmp	r3, #27
 80006b6:	dc08      	bgt.n	80006ca <__aeabi_fadd+0x226>
 80006b8:	4652      	mov	r2, sl
 80006ba:	2120      	movs	r1, #32
 80006bc:	4650      	mov	r0, sl
 80006be:	40da      	lsrs	r2, r3
 80006c0:	1acb      	subs	r3, r1, r3
 80006c2:	4098      	lsls	r0, r3
 80006c4:	1e43      	subs	r3, r0, #1
 80006c6:	4198      	sbcs	r0, r3
 80006c8:	4302      	orrs	r2, r0
 80006ca:	0037      	movs	r7, r6
 80006cc:	1952      	adds	r2, r2, r5
 80006ce:	e784      	b.n	80005da <__aeabi_fadd+0x136>
 80006d0:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <__aeabi_fadd+0x334>)
 80006d2:	1a3f      	subs	r7, r7, r0
 80006d4:	4032      	ands	r2, r6
 80006d6:	e732      	b.n	800053e <__aeabi_fadd+0x9a>
 80006d8:	4653      	mov	r3, sl
 80006da:	1b5e      	subs	r6, r3, r5
 80006dc:	0173      	lsls	r3, r6, #5
 80006de:	d42d      	bmi.n	800073c <__aeabi_fadd+0x298>
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_fadd+0x242>
 80006e4:	e717      	b.n	8000516 <__aeabi_fadd+0x72>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2400      	movs	r4, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	4694      	mov	ip, r2
 80006ee:	e738      	b.n	8000562 <__aeabi_fadd+0xbe>
 80006f0:	2eff      	cmp	r6, #255	; 0xff
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x252>
 80006f4:	e74f      	b.n	8000596 <__aeabi_fadd+0xf2>
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	4650      	mov	r0, sl
 80006fa:	04d2      	lsls	r2, r2, #19
 80006fc:	4310      	orrs	r0, r2
 80006fe:	4682      	mov	sl, r0
 8000700:	2201      	movs	r2, #1
 8000702:	2b1b      	cmp	r3, #27
 8000704:	dc08      	bgt.n	8000718 <__aeabi_fadd+0x274>
 8000706:	4652      	mov	r2, sl
 8000708:	2420      	movs	r4, #32
 800070a:	4650      	mov	r0, sl
 800070c:	40da      	lsrs	r2, r3
 800070e:	1ae3      	subs	r3, r4, r3
 8000710:	4098      	lsls	r0, r3
 8000712:	1e43      	subs	r3, r0, #1
 8000714:	4198      	sbcs	r0, r3
 8000716:	4302      	orrs	r2, r0
 8000718:	000c      	movs	r4, r1
 800071a:	0037      	movs	r7, r6
 800071c:	1aaa      	subs	r2, r5, r2
 800071e:	e6f5      	b.n	800050c <__aeabi_fadd+0x68>
 8000720:	2800      	cmp	r0, #0
 8000722:	d093      	beq.n	800064c <__aeabi_fadd+0x1a8>
 8000724:	3b01      	subs	r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d04f      	beq.n	80007ca <__aeabi_fadd+0x326>
 800072a:	2eff      	cmp	r6, #255	; 0xff
 800072c:	d1c1      	bne.n	80006b2 <__aeabi_fadd+0x20e>
 800072e:	4642      	mov	r2, r8
 8000730:	e733      	b.n	800059a <__aeabi_fadd+0xf6>
 8000732:	2fff      	cmp	r7, #255	; 0xff
 8000734:	d0ac      	beq.n	8000690 <__aeabi_fadd+0x1ec>
 8000736:	4455      	add	r5, sl
 8000738:	086a      	lsrs	r2, r5, #1
 800073a:	e7a4      	b.n	8000686 <__aeabi_fadd+0x1e2>
 800073c:	4653      	mov	r3, sl
 800073e:	000c      	movs	r4, r1
 8000740:	1aee      	subs	r6, r5, r3
 8000742:	e6e8      	b.n	8000516 <__aeabi_fadd+0x72>
 8000744:	4653      	mov	r3, sl
 8000746:	2b00      	cmp	r3, #0
 8000748:	d128      	bne.n	800079c <__aeabi_fadd+0x2f8>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x2ac>
 800074e:	e722      	b.n	8000596 <__aeabi_fadd+0xf2>
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	03db      	lsls	r3, r3, #15
 8000754:	469c      	mov	ip, r3
 8000756:	2400      	movs	r4, #0
 8000758:	23ff      	movs	r3, #255	; 0xff
 800075a:	e702      	b.n	8000562 <__aeabi_fadd+0xbe>
 800075c:	002a      	movs	r2, r5
 800075e:	4452      	add	r2, sl
 8000760:	e73b      	b.n	80005da <__aeabi_fadd+0x136>
 8000762:	4653      	mov	r3, sl
 8000764:	1b5a      	subs	r2, r3, r5
 8000766:	e6d1      	b.n	800050c <__aeabi_fadd+0x68>
 8000768:	2800      	cmp	r0, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x2ca>
 800076c:	e714      	b.n	8000598 <__aeabi_fadd+0xf4>
 800076e:	2d00      	cmp	r5, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x2d0>
 8000772:	e712      	b.n	800059a <__aeabi_fadd+0xf6>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	03db      	lsls	r3, r3, #15
 8000778:	421a      	tst	r2, r3
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x2da>
 800077c:	e70d      	b.n	800059a <__aeabi_fadd+0xf6>
 800077e:	4641      	mov	r1, r8
 8000780:	4219      	tst	r1, r3
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x2e2>
 8000784:	e709      	b.n	800059a <__aeabi_fadd+0xf6>
 8000786:	4642      	mov	r2, r8
 8000788:	e707      	b.n	800059a <__aeabi_fadd+0xf6>
 800078a:	000c      	movs	r4, r1
 800078c:	0037      	movs	r7, r6
 800078e:	1aaa      	subs	r2, r5, r2
 8000790:	e6bc      	b.n	800050c <__aeabi_fadd+0x68>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d013      	beq.n	80007be <__aeabi_fadd+0x31a>
 8000796:	000c      	movs	r4, r1
 8000798:	46c4      	mov	ip, r8
 800079a:	e6e2      	b.n	8000562 <__aeabi_fadd+0xbe>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2fe>
 80007a0:	e6fb      	b.n	800059a <__aeabi_fadd+0xf6>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	03db      	lsls	r3, r3, #15
 80007a6:	421a      	tst	r2, r3
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x308>
 80007aa:	e6f6      	b.n	800059a <__aeabi_fadd+0xf6>
 80007ac:	4640      	mov	r0, r8
 80007ae:	4218      	tst	r0, r3
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x310>
 80007b2:	e6f2      	b.n	800059a <__aeabi_fadd+0xf6>
 80007b4:	000c      	movs	r4, r1
 80007b6:	e6ef      	b.n	8000598 <__aeabi_fadd+0xf4>
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0x31a>
 80007bc:	e763      	b.n	8000686 <__aeabi_fadd+0x1e2>
 80007be:	2200      	movs	r2, #0
 80007c0:	2400      	movs	r4, #0
 80007c2:	4694      	mov	ip, r2
 80007c4:	e6cd      	b.n	8000562 <__aeabi_fadd+0xbe>
 80007c6:	46c4      	mov	ip, r8
 80007c8:	e6cb      	b.n	8000562 <__aeabi_fadd+0xbe>
 80007ca:	002a      	movs	r2, r5
 80007cc:	0037      	movs	r7, r6
 80007ce:	4452      	add	r2, sl
 80007d0:	e703      	b.n	80005da <__aeabi_fadd+0x136>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	7dffffff 	.word	0x7dffffff
 80007d8:	fbffffff 	.word	0xfbffffff

080007dc <__aeabi_fdiv>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	464f      	mov	r7, r9
 80007e0:	4646      	mov	r6, r8
 80007e2:	46d6      	mov	lr, sl
 80007e4:	0245      	lsls	r5, r0, #9
 80007e6:	b5c0      	push	{r6, r7, lr}
 80007e8:	0047      	lsls	r7, r0, #1
 80007ea:	1c0c      	adds	r4, r1, #0
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	0e3f      	lsrs	r7, r7, #24
 80007f0:	0fc6      	lsrs	r6, r0, #31
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d066      	beq.n	80008c4 <__aeabi_fdiv+0xe8>
 80007f6:	2fff      	cmp	r7, #255	; 0xff
 80007f8:	d06c      	beq.n	80008d4 <__aeabi_fdiv+0xf8>
 80007fa:	2300      	movs	r3, #0
 80007fc:	00ea      	lsls	r2, r5, #3
 80007fe:	2580      	movs	r5, #128	; 0x80
 8000800:	4699      	mov	r9, r3
 8000802:	469a      	mov	sl, r3
 8000804:	04ed      	lsls	r5, r5, #19
 8000806:	4315      	orrs	r5, r2
 8000808:	3f7f      	subs	r7, #127	; 0x7f
 800080a:	0260      	lsls	r0, r4, #9
 800080c:	0061      	lsls	r1, r4, #1
 800080e:	0a43      	lsrs	r3, r0, #9
 8000810:	4698      	mov	r8, r3
 8000812:	0e09      	lsrs	r1, r1, #24
 8000814:	0fe4      	lsrs	r4, r4, #31
 8000816:	2900      	cmp	r1, #0
 8000818:	d048      	beq.n	80008ac <__aeabi_fdiv+0xd0>
 800081a:	29ff      	cmp	r1, #255	; 0xff
 800081c:	d010      	beq.n	8000840 <__aeabi_fdiv+0x64>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	00d8      	lsls	r0, r3, #3
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	4302      	orrs	r2, r0
 8000826:	4690      	mov	r8, r2
 8000828:	2000      	movs	r0, #0
 800082a:	397f      	subs	r1, #127	; 0x7f
 800082c:	464a      	mov	r2, r9
 800082e:	0033      	movs	r3, r6
 8000830:	1a7f      	subs	r7, r7, r1
 8000832:	4302      	orrs	r2, r0
 8000834:	496c      	ldr	r1, [pc, #432]	; (80009e8 <__aeabi_fdiv+0x20c>)
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	588a      	ldr	r2, [r1, r2]
 800083a:	4063      	eors	r3, r4
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4697      	mov	pc, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d16d      	bne.n	8000920 <__aeabi_fdiv+0x144>
 8000844:	2002      	movs	r0, #2
 8000846:	3fff      	subs	r7, #255	; 0xff
 8000848:	e033      	b.n	80008b2 <__aeabi_fdiv+0xd6>
 800084a:	2300      	movs	r3, #0
 800084c:	4698      	mov	r8, r3
 800084e:	0026      	movs	r6, r4
 8000850:	4645      	mov	r5, r8
 8000852:	4682      	mov	sl, r0
 8000854:	4653      	mov	r3, sl
 8000856:	2b02      	cmp	r3, #2
 8000858:	d100      	bne.n	800085c <__aeabi_fdiv+0x80>
 800085a:	e07f      	b.n	800095c <__aeabi_fdiv+0x180>
 800085c:	2b03      	cmp	r3, #3
 800085e:	d100      	bne.n	8000862 <__aeabi_fdiv+0x86>
 8000860:	e094      	b.n	800098c <__aeabi_fdiv+0x1b0>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d017      	beq.n	8000896 <__aeabi_fdiv+0xba>
 8000866:	0038      	movs	r0, r7
 8000868:	307f      	adds	r0, #127	; 0x7f
 800086a:	2800      	cmp	r0, #0
 800086c:	dd5f      	ble.n	800092e <__aeabi_fdiv+0x152>
 800086e:	076b      	lsls	r3, r5, #29
 8000870:	d004      	beq.n	800087c <__aeabi_fdiv+0xa0>
 8000872:	230f      	movs	r3, #15
 8000874:	402b      	ands	r3, r5
 8000876:	2b04      	cmp	r3, #4
 8000878:	d000      	beq.n	800087c <__aeabi_fdiv+0xa0>
 800087a:	3504      	adds	r5, #4
 800087c:	012b      	lsls	r3, r5, #4
 800087e:	d503      	bpl.n	8000888 <__aeabi_fdiv+0xac>
 8000880:	0038      	movs	r0, r7
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <__aeabi_fdiv+0x210>)
 8000884:	3080      	adds	r0, #128	; 0x80
 8000886:	401d      	ands	r5, r3
 8000888:	28fe      	cmp	r0, #254	; 0xfe
 800088a:	dc67      	bgt.n	800095c <__aeabi_fdiv+0x180>
 800088c:	01ad      	lsls	r5, r5, #6
 800088e:	0a6d      	lsrs	r5, r5, #9
 8000890:	b2c0      	uxtb	r0, r0
 8000892:	e002      	b.n	800089a <__aeabi_fdiv+0xbe>
 8000894:	001e      	movs	r6, r3
 8000896:	2000      	movs	r0, #0
 8000898:	2500      	movs	r5, #0
 800089a:	05c0      	lsls	r0, r0, #23
 800089c:	4328      	orrs	r0, r5
 800089e:	07f6      	lsls	r6, r6, #31
 80008a0:	4330      	orrs	r0, r6
 80008a2:	bce0      	pop	{r5, r6, r7}
 80008a4:	46ba      	mov	sl, r7
 80008a6:	46b1      	mov	r9, r6
 80008a8:	46a8      	mov	r8, r5
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d12b      	bne.n	8000908 <__aeabi_fdiv+0x12c>
 80008b0:	2001      	movs	r0, #1
 80008b2:	464a      	mov	r2, r9
 80008b4:	0033      	movs	r3, r6
 80008b6:	494e      	ldr	r1, [pc, #312]	; (80009f0 <__aeabi_fdiv+0x214>)
 80008b8:	4302      	orrs	r2, r0
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	588a      	ldr	r2, [r1, r2]
 80008be:	4063      	eors	r3, r4
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4697      	mov	pc, r2
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d113      	bne.n	80008f0 <__aeabi_fdiv+0x114>
 80008c8:	2304      	movs	r3, #4
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b03      	subs	r3, #3
 80008ce:	2700      	movs	r7, #0
 80008d0:	469a      	mov	sl, r3
 80008d2:	e79a      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d105      	bne.n	80008e4 <__aeabi_fdiv+0x108>
 80008d8:	2308      	movs	r3, #8
 80008da:	4699      	mov	r9, r3
 80008dc:	3b06      	subs	r3, #6
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e792      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008e4:	230c      	movs	r3, #12
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	27ff      	movs	r7, #255	; 0xff
 80008ec:	469a      	mov	sl, r3
 80008ee:	e78c      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008f0:	0028      	movs	r0, r5
 80008f2:	f001 ffe9 	bl	80028c8 <__clzsi2>
 80008f6:	2776      	movs	r7, #118	; 0x76
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	409d      	lsls	r5, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	427f      	negs	r7, r7
 8000900:	4699      	mov	r9, r3
 8000902:	469a      	mov	sl, r3
 8000904:	1a3f      	subs	r7, r7, r0
 8000906:	e780      	b.n	800080a <__aeabi_fdiv+0x2e>
 8000908:	0018      	movs	r0, r3
 800090a:	f001 ffdd 	bl	80028c8 <__clzsi2>
 800090e:	4642      	mov	r2, r8
 8000910:	1f43      	subs	r3, r0, #5
 8000912:	2176      	movs	r1, #118	; 0x76
 8000914:	409a      	lsls	r2, r3
 8000916:	4249      	negs	r1, r1
 8000918:	1a09      	subs	r1, r1, r0
 800091a:	4690      	mov	r8, r2
 800091c:	2000      	movs	r0, #0
 800091e:	e785      	b.n	800082c <__aeabi_fdiv+0x50>
 8000920:	21ff      	movs	r1, #255	; 0xff
 8000922:	2003      	movs	r0, #3
 8000924:	e782      	b.n	800082c <__aeabi_fdiv+0x50>
 8000926:	001e      	movs	r6, r3
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	2500      	movs	r5, #0
 800092c:	e7b5      	b.n	800089a <__aeabi_fdiv+0xbe>
 800092e:	2301      	movs	r3, #1
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	2b1b      	cmp	r3, #27
 8000934:	dcaf      	bgt.n	8000896 <__aeabi_fdiv+0xba>
 8000936:	379e      	adds	r7, #158	; 0x9e
 8000938:	0029      	movs	r1, r5
 800093a:	40bd      	lsls	r5, r7
 800093c:	40d9      	lsrs	r1, r3
 800093e:	1e6a      	subs	r2, r5, #1
 8000940:	4195      	sbcs	r5, r2
 8000942:	430d      	orrs	r5, r1
 8000944:	076b      	lsls	r3, r5, #29
 8000946:	d004      	beq.n	8000952 <__aeabi_fdiv+0x176>
 8000948:	230f      	movs	r3, #15
 800094a:	402b      	ands	r3, r5
 800094c:	2b04      	cmp	r3, #4
 800094e:	d000      	beq.n	8000952 <__aeabi_fdiv+0x176>
 8000950:	3504      	adds	r5, #4
 8000952:	016b      	lsls	r3, r5, #5
 8000954:	d544      	bpl.n	80009e0 <__aeabi_fdiv+0x204>
 8000956:	2001      	movs	r0, #1
 8000958:	2500      	movs	r5, #0
 800095a:	e79e      	b.n	800089a <__aeabi_fdiv+0xbe>
 800095c:	20ff      	movs	r0, #255	; 0xff
 800095e:	2500      	movs	r5, #0
 8000960:	e79b      	b.n	800089a <__aeabi_fdiv+0xbe>
 8000962:	2580      	movs	r5, #128	; 0x80
 8000964:	2600      	movs	r6, #0
 8000966:	20ff      	movs	r0, #255	; 0xff
 8000968:	03ed      	lsls	r5, r5, #15
 800096a:	e796      	b.n	800089a <__aeabi_fdiv+0xbe>
 800096c:	2300      	movs	r3, #0
 800096e:	4698      	mov	r8, r3
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	03c0      	lsls	r0, r0, #15
 8000974:	4205      	tst	r5, r0
 8000976:	d009      	beq.n	800098c <__aeabi_fdiv+0x1b0>
 8000978:	4643      	mov	r3, r8
 800097a:	4203      	tst	r3, r0
 800097c:	d106      	bne.n	800098c <__aeabi_fdiv+0x1b0>
 800097e:	4645      	mov	r5, r8
 8000980:	4305      	orrs	r5, r0
 8000982:	026d      	lsls	r5, r5, #9
 8000984:	0026      	movs	r6, r4
 8000986:	20ff      	movs	r0, #255	; 0xff
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	e786      	b.n	800089a <__aeabi_fdiv+0xbe>
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	03c0      	lsls	r0, r0, #15
 8000990:	4305      	orrs	r5, r0
 8000992:	026d      	lsls	r5, r5, #9
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	e77f      	b.n	800089a <__aeabi_fdiv+0xbe>
 800099a:	4641      	mov	r1, r8
 800099c:	016a      	lsls	r2, r5, #5
 800099e:	0148      	lsls	r0, r1, #5
 80009a0:	4282      	cmp	r2, r0
 80009a2:	d219      	bcs.n	80009d8 <__aeabi_fdiv+0x1fc>
 80009a4:	211b      	movs	r1, #27
 80009a6:	2500      	movs	r5, #0
 80009a8:	3f01      	subs	r7, #1
 80009aa:	2601      	movs	r6, #1
 80009ac:	0014      	movs	r4, r2
 80009ae:	006d      	lsls	r5, r5, #1
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	db01      	blt.n	80009ba <__aeabi_fdiv+0x1de>
 80009b6:	4290      	cmp	r0, r2
 80009b8:	d801      	bhi.n	80009be <__aeabi_fdiv+0x1e2>
 80009ba:	1a12      	subs	r2, r2, r0
 80009bc:	4335      	orrs	r5, r6
 80009be:	3901      	subs	r1, #1
 80009c0:	2900      	cmp	r1, #0
 80009c2:	d1f3      	bne.n	80009ac <__aeabi_fdiv+0x1d0>
 80009c4:	1e50      	subs	r0, r2, #1
 80009c6:	4182      	sbcs	r2, r0
 80009c8:	0038      	movs	r0, r7
 80009ca:	307f      	adds	r0, #127	; 0x7f
 80009cc:	001e      	movs	r6, r3
 80009ce:	4315      	orrs	r5, r2
 80009d0:	2800      	cmp	r0, #0
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_fdiv+0x1fa>
 80009d4:	e74b      	b.n	800086e <__aeabi_fdiv+0x92>
 80009d6:	e7aa      	b.n	800092e <__aeabi_fdiv+0x152>
 80009d8:	211a      	movs	r1, #26
 80009da:	2501      	movs	r5, #1
 80009dc:	1a12      	subs	r2, r2, r0
 80009de:	e7e4      	b.n	80009aa <__aeabi_fdiv+0x1ce>
 80009e0:	01ad      	lsls	r5, r5, #6
 80009e2:	2000      	movs	r0, #0
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e758      	b.n	800089a <__aeabi_fdiv+0xbe>
 80009e8:	0800acc8 	.word	0x0800acc8
 80009ec:	f7ffffff 	.word	0xf7ffffff
 80009f0:	0800ad08 	.word	0x0800ad08

080009f4 <__aeabi_i2f>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d013      	beq.n	8000a22 <__aeabi_i2f+0x2e>
 80009fa:	17c3      	asrs	r3, r0, #31
 80009fc:	18c5      	adds	r5, r0, r3
 80009fe:	405d      	eors	r5, r3
 8000a00:	0fc4      	lsrs	r4, r0, #31
 8000a02:	0028      	movs	r0, r5
 8000a04:	f001 ff60 	bl	80028c8 <__clzsi2>
 8000a08:	239e      	movs	r3, #158	; 0x9e
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	1a1b      	subs	r3, r3, r0
 8000a0e:	2b96      	cmp	r3, #150	; 0x96
 8000a10:	dc0f      	bgt.n	8000a32 <__aeabi_i2f+0x3e>
 8000a12:	2808      	cmp	r0, #8
 8000a14:	dd01      	ble.n	8000a1a <__aeabi_i2f+0x26>
 8000a16:	3908      	subs	r1, #8
 8000a18:	408d      	lsls	r5, r1
 8000a1a:	026d      	lsls	r5, r5, #9
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	b2d8      	uxtb	r0, r3
 8000a20:	e002      	b.n	8000a28 <__aeabi_i2f+0x34>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2500      	movs	r5, #0
 8000a28:	05c0      	lsls	r0, r0, #23
 8000a2a:	4328      	orrs	r0, r5
 8000a2c:	07e4      	lsls	r4, r4, #31
 8000a2e:	4320      	orrs	r0, r4
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	2b99      	cmp	r3, #153	; 0x99
 8000a34:	dd0b      	ble.n	8000a4e <__aeabi_i2f+0x5a>
 8000a36:	2205      	movs	r2, #5
 8000a38:	002e      	movs	r6, r5
 8000a3a:	1a12      	subs	r2, r2, r0
 8000a3c:	40d6      	lsrs	r6, r2
 8000a3e:	0002      	movs	r2, r0
 8000a40:	321b      	adds	r2, #27
 8000a42:	4095      	lsls	r5, r2
 8000a44:	0028      	movs	r0, r5
 8000a46:	1e45      	subs	r5, r0, #1
 8000a48:	41a8      	sbcs	r0, r5
 8000a4a:	0035      	movs	r5, r6
 8000a4c:	4305      	orrs	r5, r0
 8000a4e:	2905      	cmp	r1, #5
 8000a50:	dd01      	ble.n	8000a56 <__aeabi_i2f+0x62>
 8000a52:	1f4a      	subs	r2, r1, #5
 8000a54:	4095      	lsls	r5, r2
 8000a56:	002a      	movs	r2, r5
 8000a58:	4e08      	ldr	r6, [pc, #32]	; (8000a7c <__aeabi_i2f+0x88>)
 8000a5a:	4032      	ands	r2, r6
 8000a5c:	0768      	lsls	r0, r5, #29
 8000a5e:	d009      	beq.n	8000a74 <__aeabi_i2f+0x80>
 8000a60:	200f      	movs	r0, #15
 8000a62:	4028      	ands	r0, r5
 8000a64:	2804      	cmp	r0, #4
 8000a66:	d005      	beq.n	8000a74 <__aeabi_i2f+0x80>
 8000a68:	3204      	adds	r2, #4
 8000a6a:	0150      	lsls	r0, r2, #5
 8000a6c:	d502      	bpl.n	8000a74 <__aeabi_i2f+0x80>
 8000a6e:	239f      	movs	r3, #159	; 0x9f
 8000a70:	4032      	ands	r2, r6
 8000a72:	1a5b      	subs	r3, r3, r1
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	0a55      	lsrs	r5, r2, #9
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	e7d5      	b.n	8000a28 <__aeabi_i2f+0x34>
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__aeabi_ui2f>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	1e05      	subs	r5, r0, #0
 8000a84:	d00e      	beq.n	8000aa4 <__aeabi_ui2f+0x24>
 8000a86:	f001 ff1f 	bl	80028c8 <__clzsi2>
 8000a8a:	239e      	movs	r3, #158	; 0x9e
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2b96      	cmp	r3, #150	; 0x96
 8000a92:	dc0c      	bgt.n	8000aae <__aeabi_ui2f+0x2e>
 8000a94:	2808      	cmp	r0, #8
 8000a96:	dd01      	ble.n	8000a9c <__aeabi_ui2f+0x1c>
 8000a98:	3c08      	subs	r4, #8
 8000a9a:	40a5      	lsls	r5, r4
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	b2d8      	uxtb	r0, r3
 8000aa2:	e001      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	05c0      	lsls	r0, r0, #23
 8000aaa:	4328      	orrs	r0, r5
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2b99      	cmp	r3, #153	; 0x99
 8000ab0:	dd09      	ble.n	8000ac6 <__aeabi_ui2f+0x46>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	0029      	movs	r1, r5
 8000ab6:	321b      	adds	r2, #27
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	1e4a      	subs	r2, r1, #1
 8000abc:	4191      	sbcs	r1, r2
 8000abe:	2205      	movs	r2, #5
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	40d5      	lsrs	r5, r2
 8000ac4:	430d      	orrs	r5, r1
 8000ac6:	2c05      	cmp	r4, #5
 8000ac8:	dd01      	ble.n	8000ace <__aeabi_ui2f+0x4e>
 8000aca:	1f62      	subs	r2, r4, #5
 8000acc:	4095      	lsls	r5, r2
 8000ace:	0029      	movs	r1, r5
 8000ad0:	4e08      	ldr	r6, [pc, #32]	; (8000af4 <__aeabi_ui2f+0x74>)
 8000ad2:	4031      	ands	r1, r6
 8000ad4:	076a      	lsls	r2, r5, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ad8:	200f      	movs	r0, #15
 8000ada:	4028      	ands	r0, r5
 8000adc:	2804      	cmp	r0, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae0:	3104      	adds	r1, #4
 8000ae2:	014a      	lsls	r2, r1, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae6:	239f      	movs	r3, #159	; 0x9f
 8000ae8:	4031      	ands	r1, r6
 8000aea:	1b1b      	subs	r3, r3, r4
 8000aec:	0189      	lsls	r1, r1, #6
 8000aee:	0a4d      	lsrs	r5, r1, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7d9      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_dadd>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	46d6      	mov	lr, sl
 8000afe:	4646      	mov	r6, r8
 8000b00:	000d      	movs	r5, r1
 8000b02:	0001      	movs	r1, r0
 8000b04:	0018      	movs	r0, r3
 8000b06:	b5c0      	push	{r6, r7, lr}
 8000b08:	0017      	movs	r7, r2
 8000b0a:	032b      	lsls	r3, r5, #12
 8000b0c:	0a5a      	lsrs	r2, r3, #9
 8000b0e:	0f4b      	lsrs	r3, r1, #29
 8000b10:	4313      	orrs	r3, r2
 8000b12:	00ca      	lsls	r2, r1, #3
 8000b14:	4691      	mov	r9, r2
 8000b16:	0302      	lsls	r2, r0, #12
 8000b18:	006e      	lsls	r6, r5, #1
 8000b1a:	0041      	lsls	r1, r0, #1
 8000b1c:	0a52      	lsrs	r2, r2, #9
 8000b1e:	0fec      	lsrs	r4, r5, #31
 8000b20:	0f7d      	lsrs	r5, r7, #29
 8000b22:	4315      	orrs	r5, r2
 8000b24:	0d76      	lsrs	r6, r6, #21
 8000b26:	0d49      	lsrs	r1, r1, #21
 8000b28:	0fc0      	lsrs	r0, r0, #31
 8000b2a:	4682      	mov	sl, r0
 8000b2c:	46ac      	mov	ip, r5
 8000b2e:	00ff      	lsls	r7, r7, #3
 8000b30:	1a72      	subs	r2, r6, r1
 8000b32:	4284      	cmp	r4, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x40>
 8000b36:	e098      	b.n	8000c6a <__aeabi_dadd+0x172>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_dadd+0x46>
 8000b3c:	e081      	b.n	8000c42 <__aeabi_dadd+0x14a>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x4c>
 8000b42:	e0b6      	b.n	8000cb2 <__aeabi_dadd+0x1ba>
 8000b44:	49c9      	ldr	r1, [pc, #804]	; (8000e6c <__aeabi_dadd+0x374>)
 8000b46:	428e      	cmp	r6, r1
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x54>
 8000b4a:	e172      	b.n	8000e32 <__aeabi_dadd+0x33a>
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	0028      	movs	r0, r5
 8000b50:	0409      	lsls	r1, r1, #16
 8000b52:	4308      	orrs	r0, r1
 8000b54:	4684      	mov	ip, r0
 8000b56:	2a38      	cmp	r2, #56	; 0x38
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0x64>
 8000b5a:	e15e      	b.n	8000e1a <__aeabi_dadd+0x322>
 8000b5c:	2a1f      	cmp	r2, #31
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dadd+0x6a>
 8000b60:	e1ee      	b.n	8000f40 <__aeabi_dadd+0x448>
 8000b62:	2020      	movs	r0, #32
 8000b64:	0039      	movs	r1, r7
 8000b66:	4665      	mov	r5, ip
 8000b68:	1a80      	subs	r0, r0, r2
 8000b6a:	4087      	lsls	r7, r0
 8000b6c:	40d1      	lsrs	r1, r2
 8000b6e:	4085      	lsls	r5, r0
 8000b70:	430d      	orrs	r5, r1
 8000b72:	0039      	movs	r1, r7
 8000b74:	1e4f      	subs	r7, r1, #1
 8000b76:	41b9      	sbcs	r1, r7
 8000b78:	4667      	mov	r7, ip
 8000b7a:	40d7      	lsrs	r7, r2
 8000b7c:	4329      	orrs	r1, r5
 8000b7e:	1bdb      	subs	r3, r3, r7
 8000b80:	464a      	mov	r2, r9
 8000b82:	1a55      	subs	r5, r2, r1
 8000b84:	45a9      	cmp	r9, r5
 8000b86:	4189      	sbcs	r1, r1
 8000b88:	4249      	negs	r1, r1
 8000b8a:	1a5b      	subs	r3, r3, r1
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	4643      	mov	r3, r8
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	d400      	bmi.n	8000b96 <__aeabi_dadd+0x9e>
 8000b94:	e0cc      	b.n	8000d30 <__aeabi_dadd+0x238>
 8000b96:	4643      	mov	r3, r8
 8000b98:	025b      	lsls	r3, r3, #9
 8000b9a:	0a5b      	lsrs	r3, r3, #9
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0xae>
 8000ba4:	e12c      	b.n	8000e00 <__aeabi_dadd+0x308>
 8000ba6:	4640      	mov	r0, r8
 8000ba8:	f001 fe8e 	bl	80028c8 <__clzsi2>
 8000bac:	0001      	movs	r1, r0
 8000bae:	3908      	subs	r1, #8
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	4643      	mov	r3, r8
 8000bb6:	1a52      	subs	r2, r2, r1
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	40d0      	lsrs	r0, r2
 8000bbc:	408d      	lsls	r5, r1
 8000bbe:	4303      	orrs	r3, r0
 8000bc0:	428e      	cmp	r6, r1
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_dadd+0xce>
 8000bc4:	e117      	b.n	8000df6 <__aeabi_dadd+0x2fe>
 8000bc6:	1b8e      	subs	r6, r1, r6
 8000bc8:	1c72      	adds	r2, r6, #1
 8000bca:	2a1f      	cmp	r2, #31
 8000bcc:	dd00      	ble.n	8000bd0 <__aeabi_dadd+0xd8>
 8000bce:	e1a7      	b.n	8000f20 <__aeabi_dadd+0x428>
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	002e      	movs	r6, r5
 8000bd6:	1a89      	subs	r1, r1, r2
 8000bd8:	408d      	lsls	r5, r1
 8000bda:	4088      	lsls	r0, r1
 8000bdc:	40d6      	lsrs	r6, r2
 8000bde:	40d3      	lsrs	r3, r2
 8000be0:	1e69      	subs	r1, r5, #1
 8000be2:	418d      	sbcs	r5, r1
 8000be4:	4330      	orrs	r0, r6
 8000be6:	4698      	mov	r8, r3
 8000be8:	2600      	movs	r6, #0
 8000bea:	4305      	orrs	r5, r0
 8000bec:	076b      	lsls	r3, r5, #29
 8000bee:	d009      	beq.n	8000c04 <__aeabi_dadd+0x10c>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	402b      	ands	r3, r5
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d005      	beq.n	8000c04 <__aeabi_dadd+0x10c>
 8000bf8:	1d2b      	adds	r3, r5, #4
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	41ad      	sbcs	r5, r5
 8000bfe:	426d      	negs	r5, r5
 8000c00:	44a8      	add	r8, r5
 8000c02:	001d      	movs	r5, r3
 8000c04:	4643      	mov	r3, r8
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_dadd+0x114>
 8000c0a:	e094      	b.n	8000d36 <__aeabi_dadd+0x23e>
 8000c0c:	4b97      	ldr	r3, [pc, #604]	; (8000e6c <__aeabi_dadd+0x374>)
 8000c0e:	1c72      	adds	r2, r6, #1
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x11e>
 8000c14:	e09d      	b.n	8000d52 <__aeabi_dadd+0x25a>
 8000c16:	4641      	mov	r1, r8
 8000c18:	4b95      	ldr	r3, [pc, #596]	; (8000e70 <__aeabi_dadd+0x378>)
 8000c1a:	08ed      	lsrs	r5, r5, #3
 8000c1c:	4019      	ands	r1, r3
 8000c1e:	000b      	movs	r3, r1
 8000c20:	0552      	lsls	r2, r2, #21
 8000c22:	0749      	lsls	r1, r1, #29
 8000c24:	025b      	lsls	r3, r3, #9
 8000c26:	4329      	orrs	r1, r5
 8000c28:	0b1b      	lsrs	r3, r3, #12
 8000c2a:	0d52      	lsrs	r2, r2, #21
 8000c2c:	0512      	lsls	r2, r2, #20
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	07e4      	lsls	r4, r4, #31
 8000c32:	4323      	orrs	r3, r4
 8000c34:	0008      	movs	r0, r1
 8000c36:	0019      	movs	r1, r3
 8000c38:	bce0      	pop	{r5, r6, r7}
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46b1      	mov	r9, r6
 8000c3e:	46a8      	mov	r8, r5
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d043      	beq.n	8000cce <__aeabi_dadd+0x1d6>
 8000c46:	1b8a      	subs	r2, r1, r6
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x156>
 8000c4c:	e12a      	b.n	8000ea4 <__aeabi_dadd+0x3ac>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	431c      	orrs	r4, r3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x15e>
 8000c54:	e1d1      	b.n	8000ffa <__aeabi_dadd+0x502>
 8000c56:	1e54      	subs	r4, r2, #1
 8000c58:	2a01      	cmp	r2, #1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x166>
 8000c5c:	e21f      	b.n	800109e <__aeabi_dadd+0x5a6>
 8000c5e:	4d83      	ldr	r5, [pc, #524]	; (8000e6c <__aeabi_dadd+0x374>)
 8000c60:	42aa      	cmp	r2, r5
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x16e>
 8000c64:	e272      	b.n	800114c <__aeabi_dadd+0x654>
 8000c66:	0022      	movs	r2, r4
 8000c68:	e123      	b.n	8000eb2 <__aeabi_dadd+0x3ba>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	dc00      	bgt.n	8000c70 <__aeabi_dadd+0x178>
 8000c6e:	e098      	b.n	8000da2 <__aeabi_dadd+0x2aa>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d042      	beq.n	8000cfa <__aeabi_dadd+0x202>
 8000c74:	497d      	ldr	r1, [pc, #500]	; (8000e6c <__aeabi_dadd+0x374>)
 8000c76:	428e      	cmp	r6, r1
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0x184>
 8000c7a:	e0da      	b.n	8000e32 <__aeabi_dadd+0x33a>
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0028      	movs	r0, r5
 8000c80:	0409      	lsls	r1, r1, #16
 8000c82:	4308      	orrs	r0, r1
 8000c84:	4684      	mov	ip, r0
 8000c86:	2a38      	cmp	r2, #56	; 0x38
 8000c88:	dd00      	ble.n	8000c8c <__aeabi_dadd+0x194>
 8000c8a:	e129      	b.n	8000ee0 <__aeabi_dadd+0x3e8>
 8000c8c:	2a1f      	cmp	r2, #31
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x19a>
 8000c90:	e187      	b.n	8000fa2 <__aeabi_dadd+0x4aa>
 8000c92:	0011      	movs	r1, r2
 8000c94:	4665      	mov	r5, ip
 8000c96:	3920      	subs	r1, #32
 8000c98:	40cd      	lsrs	r5, r1
 8000c9a:	2a20      	cmp	r2, #32
 8000c9c:	d004      	beq.n	8000ca8 <__aeabi_dadd+0x1b0>
 8000c9e:	2040      	movs	r0, #64	; 0x40
 8000ca0:	4661      	mov	r1, ip
 8000ca2:	1a82      	subs	r2, r0, r2
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	430f      	orrs	r7, r1
 8000ca8:	0039      	movs	r1, r7
 8000caa:	1e4f      	subs	r7, r1, #1
 8000cac:	41b9      	sbcs	r1, r7
 8000cae:	430d      	orrs	r5, r1
 8000cb0:	e11b      	b.n	8000eea <__aeabi_dadd+0x3f2>
 8000cb2:	0029      	movs	r1, r5
 8000cb4:	4339      	orrs	r1, r7
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x1c2>
 8000cb8:	e0b5      	b.n	8000e26 <__aeabi_dadd+0x32e>
 8000cba:	1e51      	subs	r1, r2, #1
 8000cbc:	2a01      	cmp	r2, #1
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x1ca>
 8000cc0:	e1ab      	b.n	800101a <__aeabi_dadd+0x522>
 8000cc2:	486a      	ldr	r0, [pc, #424]	; (8000e6c <__aeabi_dadd+0x374>)
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x1d2>
 8000cc8:	e1b2      	b.n	8001030 <__aeabi_dadd+0x538>
 8000cca:	000a      	movs	r2, r1
 8000ccc:	e743      	b.n	8000b56 <__aeabi_dadd+0x5e>
 8000cce:	4969      	ldr	r1, [pc, #420]	; (8000e74 <__aeabi_dadd+0x37c>)
 8000cd0:	1c75      	adds	r5, r6, #1
 8000cd2:	420d      	tst	r5, r1
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dadd+0x1e0>
 8000cd6:	e0cf      	b.n	8000e78 <__aeabi_dadd+0x380>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x1e6>
 8000cdc:	e193      	b.n	8001006 <__aeabi_dadd+0x50e>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x1ee>
 8000ce4:	e1d1      	b.n	800108a <__aeabi_dadd+0x592>
 8000ce6:	4661      	mov	r1, ip
 8000ce8:	4339      	orrs	r1, r7
 8000cea:	d000      	beq.n	8000cee <__aeabi_dadd+0x1f6>
 8000cec:	e1e3      	b.n	80010b6 <__aeabi_dadd+0x5be>
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0758      	lsls	r0, r3, #29
 8000cf2:	08c9      	lsrs	r1, r1, #3
 8000cf4:	4301      	orrs	r1, r0
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	e026      	b.n	8000d48 <__aeabi_dadd+0x250>
 8000cfa:	0029      	movs	r1, r5
 8000cfc:	4339      	orrs	r1, r7
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dadd+0x20a>
 8000d00:	e091      	b.n	8000e26 <__aeabi_dadd+0x32e>
 8000d02:	1e51      	subs	r1, r2, #1
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d005      	beq.n	8000d14 <__aeabi_dadd+0x21c>
 8000d08:	4858      	ldr	r0, [pc, #352]	; (8000e6c <__aeabi_dadd+0x374>)
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x218>
 8000d0e:	e18f      	b.n	8001030 <__aeabi_dadd+0x538>
 8000d10:	000a      	movs	r2, r1
 8000d12:	e7b8      	b.n	8000c86 <__aeabi_dadd+0x18e>
 8000d14:	003d      	movs	r5, r7
 8000d16:	444d      	add	r5, r9
 8000d18:	454d      	cmp	r5, r9
 8000d1a:	4189      	sbcs	r1, r1
 8000d1c:	4463      	add	r3, ip
 8000d1e:	4698      	mov	r8, r3
 8000d20:	4249      	negs	r1, r1
 8000d22:	4488      	add	r8, r1
 8000d24:	4643      	mov	r3, r8
 8000d26:	2602      	movs	r6, #2
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	d500      	bpl.n	8000d2e <__aeabi_dadd+0x236>
 8000d2c:	e0eb      	b.n	8000f06 <__aeabi_dadd+0x40e>
 8000d2e:	3e01      	subs	r6, #1
 8000d30:	076b      	lsls	r3, r5, #29
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x23e>
 8000d34:	e75c      	b.n	8000bf0 <__aeabi_dadd+0xf8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	08e9      	lsrs	r1, r5, #3
 8000d3a:	075a      	lsls	r2, r3, #29
 8000d3c:	4311      	orrs	r1, r2
 8000d3e:	0032      	movs	r2, r6
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	484a      	ldr	r0, [pc, #296]	; (8000e6c <__aeabi_dadd+0x374>)
 8000d44:	4282      	cmp	r2, r0
 8000d46:	d021      	beq.n	8000d8c <__aeabi_dadd+0x294>
 8000d48:	031b      	lsls	r3, r3, #12
 8000d4a:	0552      	lsls	r2, r2, #21
 8000d4c:	0b1b      	lsrs	r3, r3, #12
 8000d4e:	0d52      	lsrs	r2, r2, #21
 8000d50:	e76c      	b.n	8000c2c <__aeabi_dadd+0x134>
 8000d52:	2300      	movs	r3, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	e769      	b.n	8000c2c <__aeabi_dadd+0x134>
 8000d58:	002a      	movs	r2, r5
 8000d5a:	433a      	orrs	r2, r7
 8000d5c:	d069      	beq.n	8000e32 <__aeabi_dadd+0x33a>
 8000d5e:	464a      	mov	r2, r9
 8000d60:	0758      	lsls	r0, r3, #29
 8000d62:	08d1      	lsrs	r1, r2, #3
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	031b      	lsls	r3, r3, #12
 8000d6a:	4308      	orrs	r0, r1
 8000d6c:	421a      	tst	r2, r3
 8000d6e:	d007      	beq.n	8000d80 <__aeabi_dadd+0x288>
 8000d70:	0029      	movs	r1, r5
 8000d72:	08ed      	lsrs	r5, r5, #3
 8000d74:	421d      	tst	r5, r3
 8000d76:	d103      	bne.n	8000d80 <__aeabi_dadd+0x288>
 8000d78:	002a      	movs	r2, r5
 8000d7a:	08ff      	lsrs	r7, r7, #3
 8000d7c:	0748      	lsls	r0, r1, #29
 8000d7e:	4338      	orrs	r0, r7
 8000d80:	0f43      	lsrs	r3, r0, #29
 8000d82:	00c1      	lsls	r1, r0, #3
 8000d84:	075b      	lsls	r3, r3, #29
 8000d86:	08c9      	lsrs	r1, r1, #3
 8000d88:	4319      	orrs	r1, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x29c>
 8000d92:	e213      	b.n	80011bc <__aeabi_dadd+0x6c4>
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	0312      	lsls	r2, r2, #12
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	031b      	lsls	r3, r3, #12
 8000d9c:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <__aeabi_dadd+0x374>)
 8000d9e:	0b1b      	lsrs	r3, r3, #12
 8000da0:	e744      	b.n	8000c2c <__aeabi_dadd+0x134>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d04b      	beq.n	8000e3e <__aeabi_dadd+0x346>
 8000da6:	1b8a      	subs	r2, r1, r6
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dadd+0x2b6>
 8000dac:	e0e7      	b.n	8000f7e <__aeabi_dadd+0x486>
 8000dae:	482f      	ldr	r0, [pc, #188]	; (8000e6c <__aeabi_dadd+0x374>)
 8000db0:	4281      	cmp	r1, r0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x2be>
 8000db4:	e195      	b.n	80010e2 <__aeabi_dadd+0x5ea>
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0400      	lsls	r0, r0, #16
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	2a38      	cmp	r2, #56	; 0x38
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_dadd+0x2ca>
 8000dc0:	e143      	b.n	800104a <__aeabi_dadd+0x552>
 8000dc2:	2a1f      	cmp	r2, #31
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dadd+0x2d0>
 8000dc6:	e1db      	b.n	8001180 <__aeabi_dadd+0x688>
 8000dc8:	2020      	movs	r0, #32
 8000dca:	001d      	movs	r5, r3
 8000dcc:	464e      	mov	r6, r9
 8000dce:	1a80      	subs	r0, r0, r2
 8000dd0:	4085      	lsls	r5, r0
 8000dd2:	40d6      	lsrs	r6, r2
 8000dd4:	4335      	orrs	r5, r6
 8000dd6:	464e      	mov	r6, r9
 8000dd8:	4086      	lsls	r6, r0
 8000dda:	0030      	movs	r0, r6
 8000ddc:	40d3      	lsrs	r3, r2
 8000dde:	1e46      	subs	r6, r0, #1
 8000de0:	41b0      	sbcs	r0, r6
 8000de2:	449c      	add	ip, r3
 8000de4:	4305      	orrs	r5, r0
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	42bd      	cmp	r5, r7
 8000dea:	419b      	sbcs	r3, r3
 8000dec:	425b      	negs	r3, r3
 8000dee:	4463      	add	r3, ip
 8000df0:	4698      	mov	r8, r3
 8000df2:	000e      	movs	r6, r1
 8000df4:	e07f      	b.n	8000ef6 <__aeabi_dadd+0x3fe>
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <__aeabi_dadd+0x378>)
 8000df8:	1a76      	subs	r6, r6, r1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	e6f5      	b.n	8000bec <__aeabi_dadd+0xf4>
 8000e00:	0028      	movs	r0, r5
 8000e02:	f001 fd61 	bl	80028c8 <__clzsi2>
 8000e06:	0001      	movs	r1, r0
 8000e08:	3118      	adds	r1, #24
 8000e0a:	291f      	cmp	r1, #31
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dadd+0x318>
 8000e0e:	e6cf      	b.n	8000bb0 <__aeabi_dadd+0xb8>
 8000e10:	002b      	movs	r3, r5
 8000e12:	3808      	subs	r0, #8
 8000e14:	4083      	lsls	r3, r0
 8000e16:	2500      	movs	r5, #0
 8000e18:	e6d2      	b.n	8000bc0 <__aeabi_dadd+0xc8>
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	433a      	orrs	r2, r7
 8000e1e:	0011      	movs	r1, r2
 8000e20:	1e4f      	subs	r7, r1, #1
 8000e22:	41b9      	sbcs	r1, r7
 8000e24:	e6ac      	b.n	8000b80 <__aeabi_dadd+0x88>
 8000e26:	4649      	mov	r1, r9
 8000e28:	0758      	lsls	r0, r3, #29
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	4301      	orrs	r1, r0
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	e787      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8000e32:	4649      	mov	r1, r9
 8000e34:	075a      	lsls	r2, r3, #29
 8000e36:	08c9      	lsrs	r1, r1, #3
 8000e38:	4311      	orrs	r1, r2
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	e7a6      	b.n	8000d8c <__aeabi_dadd+0x294>
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <__aeabi_dadd+0x37c>)
 8000e40:	1c70      	adds	r0, r6, #1
 8000e42:	4208      	tst	r0, r1
 8000e44:	d000      	beq.n	8000e48 <__aeabi_dadd+0x350>
 8000e46:	e0bb      	b.n	8000fc0 <__aeabi_dadd+0x4c8>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x356>
 8000e4c:	e114      	b.n	8001078 <__aeabi_dadd+0x580>
 8000e4e:	4649      	mov	r1, r9
 8000e50:	4319      	orrs	r1, r3
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x35e>
 8000e54:	e175      	b.n	8001142 <__aeabi_dadd+0x64a>
 8000e56:	0029      	movs	r1, r5
 8000e58:	4339      	orrs	r1, r7
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_dadd+0x366>
 8000e5c:	e17e      	b.n	800115c <__aeabi_dadd+0x664>
 8000e5e:	4649      	mov	r1, r9
 8000e60:	0758      	lsls	r0, r3, #29
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	4301      	orrs	r1, r0
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	e76e      	b.n	8000d48 <__aeabi_dadd+0x250>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	000007ff 	.word	0x000007ff
 8000e70:	ff7fffff 	.word	0xff7fffff
 8000e74:	000007fe 	.word	0x000007fe
 8000e78:	4649      	mov	r1, r9
 8000e7a:	1bcd      	subs	r5, r1, r7
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	1a58      	subs	r0, r3, r1
 8000e80:	45a9      	cmp	r9, r5
 8000e82:	4189      	sbcs	r1, r1
 8000e84:	4249      	negs	r1, r1
 8000e86:	4688      	mov	r8, r1
 8000e88:	0001      	movs	r1, r0
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	4688      	mov	r8, r1
 8000e90:	0209      	lsls	r1, r1, #8
 8000e92:	d500      	bpl.n	8000e96 <__aeabi_dadd+0x39e>
 8000e94:	e0a6      	b.n	8000fe4 <__aeabi_dadd+0x4ec>
 8000e96:	4641      	mov	r1, r8
 8000e98:	4329      	orrs	r1, r5
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_dadd+0x3a6>
 8000e9c:	e67f      	b.n	8000b9e <__aeabi_dadd+0xa6>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	e751      	b.n	8000d48 <__aeabi_dadd+0x250>
 8000ea4:	4cc7      	ldr	r4, [pc, #796]	; (80011c4 <__aeabi_dadd+0x6cc>)
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x3b4>
 8000eaa:	e0c7      	b.n	800103c <__aeabi_dadd+0x544>
 8000eac:	2480      	movs	r4, #128	; 0x80
 8000eae:	0424      	lsls	r4, r4, #16
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	2a38      	cmp	r2, #56	; 0x38
 8000eb4:	dc54      	bgt.n	8000f60 <__aeabi_dadd+0x468>
 8000eb6:	2a1f      	cmp	r2, #31
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_dadd+0x3c4>
 8000eba:	e0cc      	b.n	8001056 <__aeabi_dadd+0x55e>
 8000ebc:	2420      	movs	r4, #32
 8000ebe:	4648      	mov	r0, r9
 8000ec0:	1aa4      	subs	r4, r4, r2
 8000ec2:	001d      	movs	r5, r3
 8000ec4:	464e      	mov	r6, r9
 8000ec6:	40a0      	lsls	r0, r4
 8000ec8:	40d6      	lsrs	r6, r2
 8000eca:	40a5      	lsls	r5, r4
 8000ecc:	0004      	movs	r4, r0
 8000ece:	40d3      	lsrs	r3, r2
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	4335      	orrs	r5, r6
 8000ed4:	1e66      	subs	r6, r4, #1
 8000ed6:	41b4      	sbcs	r4, r6
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	469c      	mov	ip, r3
 8000edc:	4325      	orrs	r5, r4
 8000ede:	e044      	b.n	8000f6a <__aeabi_dadd+0x472>
 8000ee0:	4662      	mov	r2, ip
 8000ee2:	433a      	orrs	r2, r7
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	1e6f      	subs	r7, r5, #1
 8000ee8:	41bd      	sbcs	r5, r7
 8000eea:	444d      	add	r5, r9
 8000eec:	454d      	cmp	r5, r9
 8000eee:	4189      	sbcs	r1, r1
 8000ef0:	4249      	negs	r1, r1
 8000ef2:	4688      	mov	r8, r1
 8000ef4:	4498      	add	r8, r3
 8000ef6:	4643      	mov	r3, r8
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	d400      	bmi.n	8000efe <__aeabi_dadd+0x406>
 8000efc:	e718      	b.n	8000d30 <__aeabi_dadd+0x238>
 8000efe:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <__aeabi_dadd+0x6cc>)
 8000f00:	3601      	adds	r6, #1
 8000f02:	429e      	cmp	r6, r3
 8000f04:	d049      	beq.n	8000f9a <__aeabi_dadd+0x4a2>
 8000f06:	4642      	mov	r2, r8
 8000f08:	4baf      	ldr	r3, [pc, #700]	; (80011c8 <__aeabi_dadd+0x6d0>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	086a      	lsrs	r2, r5, #1
 8000f12:	400d      	ands	r5, r1
 8000f14:	4315      	orrs	r5, r2
 8000f16:	07d9      	lsls	r1, r3, #31
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	430d      	orrs	r5, r1
 8000f1e:	e665      	b.n	8000bec <__aeabi_dadd+0xf4>
 8000f20:	0018      	movs	r0, r3
 8000f22:	3e1f      	subs	r6, #31
 8000f24:	40f0      	lsrs	r0, r6
 8000f26:	2a20      	cmp	r2, #32
 8000f28:	d003      	beq.n	8000f32 <__aeabi_dadd+0x43a>
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	1a8a      	subs	r2, r1, r2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	431d      	orrs	r5, r3
 8000f32:	1e69      	subs	r1, r5, #1
 8000f34:	418d      	sbcs	r5, r1
 8000f36:	2300      	movs	r3, #0
 8000f38:	2600      	movs	r6, #0
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	4305      	orrs	r5, r0
 8000f3e:	e6f7      	b.n	8000d30 <__aeabi_dadd+0x238>
 8000f40:	0011      	movs	r1, r2
 8000f42:	4665      	mov	r5, ip
 8000f44:	3920      	subs	r1, #32
 8000f46:	40cd      	lsrs	r5, r1
 8000f48:	2a20      	cmp	r2, #32
 8000f4a:	d004      	beq.n	8000f56 <__aeabi_dadd+0x45e>
 8000f4c:	2040      	movs	r0, #64	; 0x40
 8000f4e:	4661      	mov	r1, ip
 8000f50:	1a82      	subs	r2, r0, r2
 8000f52:	4091      	lsls	r1, r2
 8000f54:	430f      	orrs	r7, r1
 8000f56:	0039      	movs	r1, r7
 8000f58:	1e4f      	subs	r7, r1, #1
 8000f5a:	41b9      	sbcs	r1, r7
 8000f5c:	4329      	orrs	r1, r5
 8000f5e:	e60f      	b.n	8000b80 <__aeabi_dadd+0x88>
 8000f60:	464a      	mov	r2, r9
 8000f62:	4313      	orrs	r3, r2
 8000f64:	001d      	movs	r5, r3
 8000f66:	1e6b      	subs	r3, r5, #1
 8000f68:	419d      	sbcs	r5, r3
 8000f6a:	1b7d      	subs	r5, r7, r5
 8000f6c:	42af      	cmp	r7, r5
 8000f6e:	419b      	sbcs	r3, r3
 8000f70:	4662      	mov	r2, ip
 8000f72:	425b      	negs	r3, r3
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	4698      	mov	r8, r3
 8000f78:	4654      	mov	r4, sl
 8000f7a:	000e      	movs	r6, r1
 8000f7c:	e607      	b.n	8000b8e <__aeabi_dadd+0x96>
 8000f7e:	4648      	mov	r0, r9
 8000f80:	4318      	orrs	r0, r3
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x48e>
 8000f84:	e0b3      	b.n	80010ee <__aeabi_dadd+0x5f6>
 8000f86:	1e50      	subs	r0, r2, #1
 8000f88:	2a01      	cmp	r2, #1
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x496>
 8000f8c:	e10d      	b.n	80011aa <__aeabi_dadd+0x6b2>
 8000f8e:	4d8d      	ldr	r5, [pc, #564]	; (80011c4 <__aeabi_dadd+0x6cc>)
 8000f90:	42aa      	cmp	r2, r5
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x49e>
 8000f94:	e0a5      	b.n	80010e2 <__aeabi_dadd+0x5ea>
 8000f96:	0002      	movs	r2, r0
 8000f98:	e710      	b.n	8000dbc <__aeabi_dadd+0x2c4>
 8000f9a:	0032      	movs	r2, r6
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	e644      	b.n	8000c2c <__aeabi_dadd+0x134>
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	0038      	movs	r0, r7
 8000fa6:	1a89      	subs	r1, r1, r2
 8000fa8:	4665      	mov	r5, ip
 8000faa:	408f      	lsls	r7, r1
 8000fac:	408d      	lsls	r5, r1
 8000fae:	40d0      	lsrs	r0, r2
 8000fb0:	1e79      	subs	r1, r7, #1
 8000fb2:	418f      	sbcs	r7, r1
 8000fb4:	4305      	orrs	r5, r0
 8000fb6:	433d      	orrs	r5, r7
 8000fb8:	4667      	mov	r7, ip
 8000fba:	40d7      	lsrs	r7, r2
 8000fbc:	19db      	adds	r3, r3, r7
 8000fbe:	e794      	b.n	8000eea <__aeabi_dadd+0x3f2>
 8000fc0:	4a80      	ldr	r2, [pc, #512]	; (80011c4 <__aeabi_dadd+0x6cc>)
 8000fc2:	4290      	cmp	r0, r2
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dadd+0x4d0>
 8000fc6:	e0ec      	b.n	80011a2 <__aeabi_dadd+0x6aa>
 8000fc8:	0039      	movs	r1, r7
 8000fca:	4449      	add	r1, r9
 8000fcc:	4549      	cmp	r1, r9
 8000fce:	4192      	sbcs	r2, r2
 8000fd0:	4463      	add	r3, ip
 8000fd2:	4252      	negs	r2, r2
 8000fd4:	189b      	adds	r3, r3, r2
 8000fd6:	07dd      	lsls	r5, r3, #31
 8000fd8:	0849      	lsrs	r1, r1, #1
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	4698      	mov	r8, r3
 8000fde:	0006      	movs	r6, r0
 8000fe0:	430d      	orrs	r5, r1
 8000fe2:	e6a5      	b.n	8000d30 <__aeabi_dadd+0x238>
 8000fe4:	464a      	mov	r2, r9
 8000fe6:	1abd      	subs	r5, r7, r2
 8000fe8:	42af      	cmp	r7, r5
 8000fea:	4189      	sbcs	r1, r1
 8000fec:	4662      	mov	r2, ip
 8000fee:	4249      	negs	r1, r1
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	1a5b      	subs	r3, r3, r1
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	4654      	mov	r4, sl
 8000ff8:	e5d1      	b.n	8000b9e <__aeabi_dadd+0xa6>
 8000ffa:	076c      	lsls	r4, r5, #29
 8000ffc:	08f9      	lsrs	r1, r7, #3
 8000ffe:	4321      	orrs	r1, r4
 8001000:	08eb      	lsrs	r3, r5, #3
 8001002:	0004      	movs	r4, r0
 8001004:	e69d      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8001006:	464a      	mov	r2, r9
 8001008:	431a      	orrs	r2, r3
 800100a:	d175      	bne.n	80010f8 <__aeabi_dadd+0x600>
 800100c:	4661      	mov	r1, ip
 800100e:	4339      	orrs	r1, r7
 8001010:	d114      	bne.n	800103c <__aeabi_dadd+0x544>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	2400      	movs	r4, #0
 8001016:	031b      	lsls	r3, r3, #12
 8001018:	e6bc      	b.n	8000d94 <__aeabi_dadd+0x29c>
 800101a:	464a      	mov	r2, r9
 800101c:	1bd5      	subs	r5, r2, r7
 800101e:	45a9      	cmp	r9, r5
 8001020:	4189      	sbcs	r1, r1
 8001022:	4662      	mov	r2, ip
 8001024:	4249      	negs	r1, r1
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	4698      	mov	r8, r3
 800102c:	2601      	movs	r6, #1
 800102e:	e5ae      	b.n	8000b8e <__aeabi_dadd+0x96>
 8001030:	464a      	mov	r2, r9
 8001032:	08d1      	lsrs	r1, r2, #3
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	4311      	orrs	r1, r2
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	e6a7      	b.n	8000d8c <__aeabi_dadd+0x294>
 800103c:	4663      	mov	r3, ip
 800103e:	08f9      	lsrs	r1, r7, #3
 8001040:	075a      	lsls	r2, r3, #29
 8001042:	4654      	mov	r4, sl
 8001044:	4311      	orrs	r1, r2
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	e6a0      	b.n	8000d8c <__aeabi_dadd+0x294>
 800104a:	464a      	mov	r2, r9
 800104c:	4313      	orrs	r3, r2
 800104e:	001d      	movs	r5, r3
 8001050:	1e6b      	subs	r3, r5, #1
 8001052:	419d      	sbcs	r5, r3
 8001054:	e6c7      	b.n	8000de6 <__aeabi_dadd+0x2ee>
 8001056:	0014      	movs	r4, r2
 8001058:	001e      	movs	r6, r3
 800105a:	3c20      	subs	r4, #32
 800105c:	40e6      	lsrs	r6, r4
 800105e:	2a20      	cmp	r2, #32
 8001060:	d005      	beq.n	800106e <__aeabi_dadd+0x576>
 8001062:	2440      	movs	r4, #64	; 0x40
 8001064:	1aa2      	subs	r2, r4, r2
 8001066:	4093      	lsls	r3, r2
 8001068:	464a      	mov	r2, r9
 800106a:	431a      	orrs	r2, r3
 800106c:	4691      	mov	r9, r2
 800106e:	464d      	mov	r5, r9
 8001070:	1e6b      	subs	r3, r5, #1
 8001072:	419d      	sbcs	r5, r3
 8001074:	4335      	orrs	r5, r6
 8001076:	e778      	b.n	8000f6a <__aeabi_dadd+0x472>
 8001078:	464a      	mov	r2, r9
 800107a:	431a      	orrs	r2, r3
 800107c:	d000      	beq.n	8001080 <__aeabi_dadd+0x588>
 800107e:	e66b      	b.n	8000d58 <__aeabi_dadd+0x260>
 8001080:	076b      	lsls	r3, r5, #29
 8001082:	08f9      	lsrs	r1, r7, #3
 8001084:	4319      	orrs	r1, r3
 8001086:	08eb      	lsrs	r3, r5, #3
 8001088:	e680      	b.n	8000d8c <__aeabi_dadd+0x294>
 800108a:	4661      	mov	r1, ip
 800108c:	4339      	orrs	r1, r7
 800108e:	d054      	beq.n	800113a <__aeabi_dadd+0x642>
 8001090:	4663      	mov	r3, ip
 8001092:	08f9      	lsrs	r1, r7, #3
 8001094:	075c      	lsls	r4, r3, #29
 8001096:	4321      	orrs	r1, r4
 8001098:	08db      	lsrs	r3, r3, #3
 800109a:	0004      	movs	r4, r0
 800109c:	e654      	b.n	8000d48 <__aeabi_dadd+0x250>
 800109e:	464a      	mov	r2, r9
 80010a0:	1abd      	subs	r5, r7, r2
 80010a2:	42af      	cmp	r7, r5
 80010a4:	4189      	sbcs	r1, r1
 80010a6:	4662      	mov	r2, ip
 80010a8:	4249      	negs	r1, r1
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	1a5b      	subs	r3, r3, r1
 80010ae:	4698      	mov	r8, r3
 80010b0:	0004      	movs	r4, r0
 80010b2:	2601      	movs	r6, #1
 80010b4:	e56b      	b.n	8000b8e <__aeabi_dadd+0x96>
 80010b6:	464a      	mov	r2, r9
 80010b8:	1bd5      	subs	r5, r2, r7
 80010ba:	45a9      	cmp	r9, r5
 80010bc:	4189      	sbcs	r1, r1
 80010be:	4662      	mov	r2, ip
 80010c0:	4249      	negs	r1, r1
 80010c2:	1a9a      	subs	r2, r3, r2
 80010c4:	1a52      	subs	r2, r2, r1
 80010c6:	4690      	mov	r8, r2
 80010c8:	0212      	lsls	r2, r2, #8
 80010ca:	d532      	bpl.n	8001132 <__aeabi_dadd+0x63a>
 80010cc:	464a      	mov	r2, r9
 80010ce:	1abd      	subs	r5, r7, r2
 80010d0:	42af      	cmp	r7, r5
 80010d2:	4189      	sbcs	r1, r1
 80010d4:	4662      	mov	r2, ip
 80010d6:	4249      	negs	r1, r1
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	4698      	mov	r8, r3
 80010de:	0004      	movs	r4, r0
 80010e0:	e584      	b.n	8000bec <__aeabi_dadd+0xf4>
 80010e2:	4663      	mov	r3, ip
 80010e4:	08f9      	lsrs	r1, r7, #3
 80010e6:	075a      	lsls	r2, r3, #29
 80010e8:	4311      	orrs	r1, r2
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	e64e      	b.n	8000d8c <__aeabi_dadd+0x294>
 80010ee:	08f9      	lsrs	r1, r7, #3
 80010f0:	0768      	lsls	r0, r5, #29
 80010f2:	4301      	orrs	r1, r0
 80010f4:	08eb      	lsrs	r3, r5, #3
 80010f6:	e624      	b.n	8000d42 <__aeabi_dadd+0x24a>
 80010f8:	4662      	mov	r2, ip
 80010fa:	433a      	orrs	r2, r7
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x608>
 80010fe:	e698      	b.n	8000e32 <__aeabi_dadd+0x33a>
 8001100:	464a      	mov	r2, r9
 8001102:	08d1      	lsrs	r1, r2, #3
 8001104:	075a      	lsls	r2, r3, #29
 8001106:	4311      	orrs	r1, r2
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	031b      	lsls	r3, r3, #12
 800110e:	421a      	tst	r2, r3
 8001110:	d008      	beq.n	8001124 <__aeabi_dadd+0x62c>
 8001112:	4660      	mov	r0, ip
 8001114:	08c5      	lsrs	r5, r0, #3
 8001116:	421d      	tst	r5, r3
 8001118:	d104      	bne.n	8001124 <__aeabi_dadd+0x62c>
 800111a:	4654      	mov	r4, sl
 800111c:	002a      	movs	r2, r5
 800111e:	08f9      	lsrs	r1, r7, #3
 8001120:	0743      	lsls	r3, r0, #29
 8001122:	4319      	orrs	r1, r3
 8001124:	0f4b      	lsrs	r3, r1, #29
 8001126:	00c9      	lsls	r1, r1, #3
 8001128:	075b      	lsls	r3, r3, #29
 800112a:	08c9      	lsrs	r1, r1, #3
 800112c:	4319      	orrs	r1, r3
 800112e:	0013      	movs	r3, r2
 8001130:	e62c      	b.n	8000d8c <__aeabi_dadd+0x294>
 8001132:	4641      	mov	r1, r8
 8001134:	4329      	orrs	r1, r5
 8001136:	d000      	beq.n	800113a <__aeabi_dadd+0x642>
 8001138:	e5fa      	b.n	8000d30 <__aeabi_dadd+0x238>
 800113a:	2300      	movs	r3, #0
 800113c:	000a      	movs	r2, r1
 800113e:	2400      	movs	r4, #0
 8001140:	e602      	b.n	8000d48 <__aeabi_dadd+0x250>
 8001142:	076b      	lsls	r3, r5, #29
 8001144:	08f9      	lsrs	r1, r7, #3
 8001146:	4319      	orrs	r1, r3
 8001148:	08eb      	lsrs	r3, r5, #3
 800114a:	e5fd      	b.n	8000d48 <__aeabi_dadd+0x250>
 800114c:	4663      	mov	r3, ip
 800114e:	08f9      	lsrs	r1, r7, #3
 8001150:	075b      	lsls	r3, r3, #29
 8001152:	4319      	orrs	r1, r3
 8001154:	4663      	mov	r3, ip
 8001156:	0004      	movs	r4, r0
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	e617      	b.n	8000d8c <__aeabi_dadd+0x294>
 800115c:	003d      	movs	r5, r7
 800115e:	444d      	add	r5, r9
 8001160:	4463      	add	r3, ip
 8001162:	454d      	cmp	r5, r9
 8001164:	4189      	sbcs	r1, r1
 8001166:	4698      	mov	r8, r3
 8001168:	4249      	negs	r1, r1
 800116a:	4488      	add	r8, r1
 800116c:	4643      	mov	r3, r8
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x67c>
 8001172:	e5dd      	b.n	8000d30 <__aeabi_dadd+0x238>
 8001174:	4642      	mov	r2, r8
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <__aeabi_dadd+0x6d0>)
 8001178:	2601      	movs	r6, #1
 800117a:	401a      	ands	r2, r3
 800117c:	4690      	mov	r8, r2
 800117e:	e5d7      	b.n	8000d30 <__aeabi_dadd+0x238>
 8001180:	0010      	movs	r0, r2
 8001182:	001e      	movs	r6, r3
 8001184:	3820      	subs	r0, #32
 8001186:	40c6      	lsrs	r6, r0
 8001188:	2a20      	cmp	r2, #32
 800118a:	d005      	beq.n	8001198 <__aeabi_dadd+0x6a0>
 800118c:	2040      	movs	r0, #64	; 0x40
 800118e:	1a82      	subs	r2, r0, r2
 8001190:	4093      	lsls	r3, r2
 8001192:	464a      	mov	r2, r9
 8001194:	431a      	orrs	r2, r3
 8001196:	4691      	mov	r9, r2
 8001198:	464d      	mov	r5, r9
 800119a:	1e6b      	subs	r3, r5, #1
 800119c:	419d      	sbcs	r5, r3
 800119e:	4335      	orrs	r5, r6
 80011a0:	e621      	b.n	8000de6 <__aeabi_dadd+0x2ee>
 80011a2:	0002      	movs	r2, r0
 80011a4:	2300      	movs	r3, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	e540      	b.n	8000c2c <__aeabi_dadd+0x134>
 80011aa:	464a      	mov	r2, r9
 80011ac:	19d5      	adds	r5, r2, r7
 80011ae:	42bd      	cmp	r5, r7
 80011b0:	4189      	sbcs	r1, r1
 80011b2:	4463      	add	r3, ip
 80011b4:	4698      	mov	r8, r3
 80011b6:	4249      	negs	r1, r1
 80011b8:	4488      	add	r8, r1
 80011ba:	e5b3      	b.n	8000d24 <__aeabi_dadd+0x22c>
 80011bc:	2100      	movs	r1, #0
 80011be:	4a01      	ldr	r2, [pc, #4]	; (80011c4 <__aeabi_dadd+0x6cc>)
 80011c0:	000b      	movs	r3, r1
 80011c2:	e533      	b.n	8000c2c <__aeabi_dadd+0x134>
 80011c4:	000007ff 	.word	0x000007ff
 80011c8:	ff7fffff 	.word	0xff7fffff

080011cc <__aeabi_ddiv>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4657      	mov	r7, sl
 80011d0:	464e      	mov	r6, r9
 80011d2:	4645      	mov	r5, r8
 80011d4:	46de      	mov	lr, fp
 80011d6:	b5e0      	push	{r5, r6, r7, lr}
 80011d8:	4681      	mov	r9, r0
 80011da:	0005      	movs	r5, r0
 80011dc:	030c      	lsls	r4, r1, #12
 80011de:	0048      	lsls	r0, r1, #1
 80011e0:	4692      	mov	sl, r2
 80011e2:	001f      	movs	r7, r3
 80011e4:	b085      	sub	sp, #20
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d40      	lsrs	r0, r0, #21
 80011ea:	0fce      	lsrs	r6, r1, #31
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d059      	beq.n	80012a4 <__aeabi_ddiv+0xd8>
 80011f0:	4b87      	ldr	r3, [pc, #540]	; (8001410 <__aeabi_ddiv+0x244>)
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x2c>
 80011f6:	e098      	b.n	800132a <__aeabi_ddiv+0x15e>
 80011f8:	0f6b      	lsrs	r3, r5, #29
 80011fa:	00e4      	lsls	r4, r4, #3
 80011fc:	431c      	orrs	r4, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4323      	orrs	r3, r4
 8001204:	4698      	mov	r8, r3
 8001206:	4b83      	ldr	r3, [pc, #524]	; (8001414 <__aeabi_ddiv+0x248>)
 8001208:	00ed      	lsls	r5, r5, #3
 800120a:	469b      	mov	fp, r3
 800120c:	2300      	movs	r3, #0
 800120e:	4699      	mov	r9, r3
 8001210:	4483      	add	fp, r0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	033c      	lsls	r4, r7, #12
 8001216:	007b      	lsls	r3, r7, #1
 8001218:	4650      	mov	r0, sl
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	0d5b      	lsrs	r3, r3, #21
 800121e:	0fff      	lsrs	r7, r7, #31
 8001220:	2b00      	cmp	r3, #0
 8001222:	d067      	beq.n	80012f4 <__aeabi_ddiv+0x128>
 8001224:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <__aeabi_ddiv+0x244>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d018      	beq.n	800125c <__aeabi_ddiv+0x90>
 800122a:	497a      	ldr	r1, [pc, #488]	; (8001414 <__aeabi_ddiv+0x248>)
 800122c:	0f42      	lsrs	r2, r0, #29
 800122e:	468c      	mov	ip, r1
 8001230:	00e4      	lsls	r4, r4, #3
 8001232:	4659      	mov	r1, fp
 8001234:	4314      	orrs	r4, r2
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4463      	add	r3, ip
 800123a:	0412      	lsls	r2, r2, #16
 800123c:	1acb      	subs	r3, r1, r3
 800123e:	4314      	orrs	r4, r2
 8001240:	469b      	mov	fp, r3
 8001242:	00c2      	lsls	r2, r0, #3
 8001244:	2000      	movs	r0, #0
 8001246:	0033      	movs	r3, r6
 8001248:	407b      	eors	r3, r7
 800124a:	469a      	mov	sl, r3
 800124c:	464b      	mov	r3, r9
 800124e:	2b0f      	cmp	r3, #15
 8001250:	d900      	bls.n	8001254 <__aeabi_ddiv+0x88>
 8001252:	e0ef      	b.n	8001434 <__aeabi_ddiv+0x268>
 8001254:	4970      	ldr	r1, [pc, #448]	; (8001418 <__aeabi_ddiv+0x24c>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	58cb      	ldr	r3, [r1, r3]
 800125a:	469f      	mov	pc, r3
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <__aeabi_ddiv+0x250>)
 800125e:	4652      	mov	r2, sl
 8001260:	469c      	mov	ip, r3
 8001262:	4322      	orrs	r2, r4
 8001264:	44e3      	add	fp, ip
 8001266:	2a00      	cmp	r2, #0
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0xa0>
 800126a:	e095      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 800126c:	4649      	mov	r1, r9
 800126e:	2302      	movs	r3, #2
 8001270:	4319      	orrs	r1, r3
 8001272:	4689      	mov	r9, r1
 8001274:	2400      	movs	r4, #0
 8001276:	2002      	movs	r0, #2
 8001278:	e7e5      	b.n	8001246 <__aeabi_ddiv+0x7a>
 800127a:	2300      	movs	r3, #0
 800127c:	2400      	movs	r4, #0
 800127e:	2500      	movs	r5, #0
 8001280:	4652      	mov	r2, sl
 8001282:	051b      	lsls	r3, r3, #20
 8001284:	4323      	orrs	r3, r4
 8001286:	07d2      	lsls	r2, r2, #31
 8001288:	4313      	orrs	r3, r2
 800128a:	0028      	movs	r0, r5
 800128c:	0019      	movs	r1, r3
 800128e:	b005      	add	sp, #20
 8001290:	bcf0      	pop	{r4, r5, r6, r7}
 8001292:	46bb      	mov	fp, r7
 8001294:	46b2      	mov	sl, r6
 8001296:	46a9      	mov	r9, r5
 8001298:	46a0      	mov	r8, r4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	2400      	movs	r4, #0
 800129e:	2500      	movs	r5, #0
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <__aeabi_ddiv+0x244>)
 80012a2:	e7ed      	b.n	8001280 <__aeabi_ddiv+0xb4>
 80012a4:	464b      	mov	r3, r9
 80012a6:	4323      	orrs	r3, r4
 80012a8:	4698      	mov	r8, r3
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0xe2>
 80012ac:	e089      	b.n	80013c2 <__aeabi_ddiv+0x1f6>
 80012ae:	2c00      	cmp	r4, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_ddiv+0xe8>
 80012b2:	e1e0      	b.n	8001676 <__aeabi_ddiv+0x4aa>
 80012b4:	0020      	movs	r0, r4
 80012b6:	f001 fb07 	bl	80028c8 <__clzsi2>
 80012ba:	0001      	movs	r1, r0
 80012bc:	0002      	movs	r2, r0
 80012be:	390b      	subs	r1, #11
 80012c0:	231d      	movs	r3, #29
 80012c2:	1a5b      	subs	r3, r3, r1
 80012c4:	4649      	mov	r1, r9
 80012c6:	0010      	movs	r0, r2
 80012c8:	40d9      	lsrs	r1, r3
 80012ca:	3808      	subs	r0, #8
 80012cc:	4084      	lsls	r4, r0
 80012ce:	000b      	movs	r3, r1
 80012d0:	464d      	mov	r5, r9
 80012d2:	4323      	orrs	r3, r4
 80012d4:	4698      	mov	r8, r3
 80012d6:	4085      	lsls	r5, r0
 80012d8:	4851      	ldr	r0, [pc, #324]	; (8001420 <__aeabi_ddiv+0x254>)
 80012da:	033c      	lsls	r4, r7, #12
 80012dc:	1a83      	subs	r3, r0, r2
 80012de:	469b      	mov	fp, r3
 80012e0:	2300      	movs	r3, #0
 80012e2:	4699      	mov	r9, r3
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	007b      	lsls	r3, r7, #1
 80012e8:	4650      	mov	r0, sl
 80012ea:	0b24      	lsrs	r4, r4, #12
 80012ec:	0d5b      	lsrs	r3, r3, #21
 80012ee:	0fff      	lsrs	r7, r7, #31
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d197      	bne.n	8001224 <__aeabi_ddiv+0x58>
 80012f4:	4652      	mov	r2, sl
 80012f6:	4322      	orrs	r2, r4
 80012f8:	d055      	beq.n	80013a6 <__aeabi_ddiv+0x1da>
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_ddiv+0x134>
 80012fe:	e1ca      	b.n	8001696 <__aeabi_ddiv+0x4ca>
 8001300:	0020      	movs	r0, r4
 8001302:	f001 fae1 	bl	80028c8 <__clzsi2>
 8001306:	0002      	movs	r2, r0
 8001308:	3a0b      	subs	r2, #11
 800130a:	231d      	movs	r3, #29
 800130c:	0001      	movs	r1, r0
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	4652      	mov	r2, sl
 8001312:	3908      	subs	r1, #8
 8001314:	40da      	lsrs	r2, r3
 8001316:	408c      	lsls	r4, r1
 8001318:	4314      	orrs	r4, r2
 800131a:	4652      	mov	r2, sl
 800131c:	408a      	lsls	r2, r1
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <__aeabi_ddiv+0x258>)
 8001320:	4458      	add	r0, fp
 8001322:	469b      	mov	fp, r3
 8001324:	4483      	add	fp, r0
 8001326:	2000      	movs	r0, #0
 8001328:	e78d      	b.n	8001246 <__aeabi_ddiv+0x7a>
 800132a:	464b      	mov	r3, r9
 800132c:	4323      	orrs	r3, r4
 800132e:	4698      	mov	r8, r3
 8001330:	d140      	bne.n	80013b4 <__aeabi_ddiv+0x1e8>
 8001332:	2308      	movs	r3, #8
 8001334:	4699      	mov	r9, r3
 8001336:	3b06      	subs	r3, #6
 8001338:	2500      	movs	r5, #0
 800133a:	4683      	mov	fp, r0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	e769      	b.n	8001214 <__aeabi_ddiv+0x48>
 8001340:	46b2      	mov	sl, r6
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d0a9      	beq.n	800129c <__aeabi_ddiv+0xd0>
 8001348:	2b03      	cmp	r3, #3
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x182>
 800134c:	e211      	b.n	8001772 <__aeabi_ddiv+0x5a6>
 800134e:	2b01      	cmp	r3, #1
 8001350:	d093      	beq.n	800127a <__aeabi_ddiv+0xae>
 8001352:	4a35      	ldr	r2, [pc, #212]	; (8001428 <__aeabi_ddiv+0x25c>)
 8001354:	445a      	add	r2, fp
 8001356:	2a00      	cmp	r2, #0
 8001358:	dc00      	bgt.n	800135c <__aeabi_ddiv+0x190>
 800135a:	e13c      	b.n	80015d6 <__aeabi_ddiv+0x40a>
 800135c:	076b      	lsls	r3, r5, #29
 800135e:	d000      	beq.n	8001362 <__aeabi_ddiv+0x196>
 8001360:	e1a7      	b.n	80016b2 <__aeabi_ddiv+0x4e6>
 8001362:	08ed      	lsrs	r5, r5, #3
 8001364:	4643      	mov	r3, r8
 8001366:	01db      	lsls	r3, r3, #7
 8001368:	d506      	bpl.n	8001378 <__aeabi_ddiv+0x1ac>
 800136a:	4642      	mov	r2, r8
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <__aeabi_ddiv+0x260>)
 800136e:	401a      	ands	r2, r3
 8001370:	4690      	mov	r8, r2
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	445a      	add	r2, fp
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <__aeabi_ddiv+0x264>)
 800137a:	429a      	cmp	r2, r3
 800137c:	dc8e      	bgt.n	800129c <__aeabi_ddiv+0xd0>
 800137e:	4643      	mov	r3, r8
 8001380:	0552      	lsls	r2, r2, #21
 8001382:	0758      	lsls	r0, r3, #29
 8001384:	025c      	lsls	r4, r3, #9
 8001386:	4305      	orrs	r5, r0
 8001388:	0b24      	lsrs	r4, r4, #12
 800138a:	0d53      	lsrs	r3, r2, #21
 800138c:	e778      	b.n	8001280 <__aeabi_ddiv+0xb4>
 800138e:	46ba      	mov	sl, r7
 8001390:	46a0      	mov	r8, r4
 8001392:	0015      	movs	r5, r2
 8001394:	9000      	str	r0, [sp, #0]
 8001396:	e7d4      	b.n	8001342 <__aeabi_ddiv+0x176>
 8001398:	464a      	mov	r2, r9
 800139a:	2303      	movs	r3, #3
 800139c:	431a      	orrs	r2, r3
 800139e:	4691      	mov	r9, r2
 80013a0:	2003      	movs	r0, #3
 80013a2:	4652      	mov	r2, sl
 80013a4:	e74f      	b.n	8001246 <__aeabi_ddiv+0x7a>
 80013a6:	4649      	mov	r1, r9
 80013a8:	2301      	movs	r3, #1
 80013aa:	4319      	orrs	r1, r3
 80013ac:	4689      	mov	r9, r1
 80013ae:	2400      	movs	r4, #0
 80013b0:	2001      	movs	r0, #1
 80013b2:	e748      	b.n	8001246 <__aeabi_ddiv+0x7a>
 80013b4:	230c      	movs	r3, #12
 80013b6:	4699      	mov	r9, r3
 80013b8:	3b09      	subs	r3, #9
 80013ba:	46a0      	mov	r8, r4
 80013bc:	4683      	mov	fp, r0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	e728      	b.n	8001214 <__aeabi_ddiv+0x48>
 80013c2:	2304      	movs	r3, #4
 80013c4:	4699      	mov	r9, r3
 80013c6:	2300      	movs	r3, #0
 80013c8:	469b      	mov	fp, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	2500      	movs	r5, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	e720      	b.n	8001214 <__aeabi_ddiv+0x48>
 80013d2:	2300      	movs	r3, #0
 80013d4:	2480      	movs	r4, #128	; 0x80
 80013d6:	469a      	mov	sl, r3
 80013d8:	2500      	movs	r5, #0
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <__aeabi_ddiv+0x244>)
 80013dc:	0324      	lsls	r4, r4, #12
 80013de:	e74f      	b.n	8001280 <__aeabi_ddiv+0xb4>
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	4641      	mov	r1, r8
 80013e4:	031b      	lsls	r3, r3, #12
 80013e6:	4219      	tst	r1, r3
 80013e8:	d008      	beq.n	80013fc <__aeabi_ddiv+0x230>
 80013ea:	421c      	tst	r4, r3
 80013ec:	d106      	bne.n	80013fc <__aeabi_ddiv+0x230>
 80013ee:	431c      	orrs	r4, r3
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	46ba      	mov	sl, r7
 80013f4:	0015      	movs	r5, r2
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <__aeabi_ddiv+0x244>)
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	e741      	b.n	8001280 <__aeabi_ddiv+0xb4>
 80013fc:	2480      	movs	r4, #128	; 0x80
 80013fe:	4643      	mov	r3, r8
 8001400:	0324      	lsls	r4, r4, #12
 8001402:	431c      	orrs	r4, r3
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	46b2      	mov	sl, r6
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <__aeabi_ddiv+0x244>)
 800140a:	0b24      	lsrs	r4, r4, #12
 800140c:	e738      	b.n	8001280 <__aeabi_ddiv+0xb4>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	0800ad48 	.word	0x0800ad48
 800141c:	fffff801 	.word	0xfffff801
 8001420:	fffffc0d 	.word	0xfffffc0d
 8001424:	000003f3 	.word	0x000003f3
 8001428:	000003ff 	.word	0x000003ff
 800142c:	feffffff 	.word	0xfeffffff
 8001430:	000007fe 	.word	0x000007fe
 8001434:	4544      	cmp	r4, r8
 8001436:	d200      	bcs.n	800143a <__aeabi_ddiv+0x26e>
 8001438:	e116      	b.n	8001668 <__aeabi_ddiv+0x49c>
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x272>
 800143c:	e111      	b.n	8001662 <__aeabi_ddiv+0x496>
 800143e:	2301      	movs	r3, #1
 8001440:	425b      	negs	r3, r3
 8001442:	469c      	mov	ip, r3
 8001444:	002e      	movs	r6, r5
 8001446:	4640      	mov	r0, r8
 8001448:	2500      	movs	r5, #0
 800144a:	44e3      	add	fp, ip
 800144c:	0223      	lsls	r3, r4, #8
 800144e:	0e14      	lsrs	r4, r2, #24
 8001450:	431c      	orrs	r4, r3
 8001452:	0c1b      	lsrs	r3, r3, #16
 8001454:	4699      	mov	r9, r3
 8001456:	0423      	lsls	r3, r4, #16
 8001458:	0c1f      	lsrs	r7, r3, #16
 800145a:	0212      	lsls	r2, r2, #8
 800145c:	4649      	mov	r1, r9
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	9701      	str	r7, [sp, #4]
 8001462:	f7fe fef1 	bl	8000248 <__aeabi_uidivmod>
 8001466:	0002      	movs	r2, r0
 8001468:	437a      	muls	r2, r7
 800146a:	040b      	lsls	r3, r1, #16
 800146c:	0c31      	lsrs	r1, r6, #16
 800146e:	4680      	mov	r8, r0
 8001470:	4319      	orrs	r1, r3
 8001472:	428a      	cmp	r2, r1
 8001474:	d90b      	bls.n	800148e <__aeabi_ddiv+0x2c2>
 8001476:	2301      	movs	r3, #1
 8001478:	425b      	negs	r3, r3
 800147a:	469c      	mov	ip, r3
 800147c:	1909      	adds	r1, r1, r4
 800147e:	44e0      	add	r8, ip
 8001480:	428c      	cmp	r4, r1
 8001482:	d804      	bhi.n	800148e <__aeabi_ddiv+0x2c2>
 8001484:	428a      	cmp	r2, r1
 8001486:	d902      	bls.n	800148e <__aeabi_ddiv+0x2c2>
 8001488:	1e83      	subs	r3, r0, #2
 800148a:	4698      	mov	r8, r3
 800148c:	1909      	adds	r1, r1, r4
 800148e:	1a88      	subs	r0, r1, r2
 8001490:	4649      	mov	r1, r9
 8001492:	f7fe fed9 	bl	8000248 <__aeabi_uidivmod>
 8001496:	0409      	lsls	r1, r1, #16
 8001498:	468c      	mov	ip, r1
 800149a:	0431      	lsls	r1, r6, #16
 800149c:	4666      	mov	r6, ip
 800149e:	9a01      	ldr	r2, [sp, #4]
 80014a0:	0c09      	lsrs	r1, r1, #16
 80014a2:	4342      	muls	r2, r0
 80014a4:	0003      	movs	r3, r0
 80014a6:	4331      	orrs	r1, r6
 80014a8:	428a      	cmp	r2, r1
 80014aa:	d904      	bls.n	80014b6 <__aeabi_ddiv+0x2ea>
 80014ac:	1909      	adds	r1, r1, r4
 80014ae:	3b01      	subs	r3, #1
 80014b0:	428c      	cmp	r4, r1
 80014b2:	d800      	bhi.n	80014b6 <__aeabi_ddiv+0x2ea>
 80014b4:	e111      	b.n	80016da <__aeabi_ddiv+0x50e>
 80014b6:	1a89      	subs	r1, r1, r2
 80014b8:	4642      	mov	r2, r8
 80014ba:	9e00      	ldr	r6, [sp, #0]
 80014bc:	0412      	lsls	r2, r2, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	0c33      	lsrs	r3, r6, #16
 80014c2:	001f      	movs	r7, r3
 80014c4:	0c10      	lsrs	r0, r2, #16
 80014c6:	4690      	mov	r8, r2
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	0413      	lsls	r3, r2, #16
 80014cc:	0432      	lsls	r2, r6, #16
 80014ce:	0c16      	lsrs	r6, r2, #16
 80014d0:	0032      	movs	r2, r6
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	435a      	muls	r2, r3
 80014d6:	9603      	str	r6, [sp, #12]
 80014d8:	437b      	muls	r3, r7
 80014da:	4346      	muls	r6, r0
 80014dc:	4378      	muls	r0, r7
 80014de:	0c17      	lsrs	r7, r2, #16
 80014e0:	46bc      	mov	ip, r7
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	4463      	add	r3, ip
 80014e6:	429e      	cmp	r6, r3
 80014e8:	d903      	bls.n	80014f2 <__aeabi_ddiv+0x326>
 80014ea:	2680      	movs	r6, #128	; 0x80
 80014ec:	0276      	lsls	r6, r6, #9
 80014ee:	46b4      	mov	ip, r6
 80014f0:	4460      	add	r0, ip
 80014f2:	0c1e      	lsrs	r6, r3, #16
 80014f4:	1830      	adds	r0, r6, r0
 80014f6:	0416      	lsls	r6, r2, #16
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0c36      	lsrs	r6, r6, #16
 80014fc:	199e      	adds	r6, r3, r6
 80014fe:	4281      	cmp	r1, r0
 8001500:	d200      	bcs.n	8001504 <__aeabi_ddiv+0x338>
 8001502:	e09c      	b.n	800163e <__aeabi_ddiv+0x472>
 8001504:	d100      	bne.n	8001508 <__aeabi_ddiv+0x33c>
 8001506:	e097      	b.n	8001638 <__aeabi_ddiv+0x46c>
 8001508:	1bae      	subs	r6, r5, r6
 800150a:	1a09      	subs	r1, r1, r0
 800150c:	42b5      	cmp	r5, r6
 800150e:	4180      	sbcs	r0, r0
 8001510:	4240      	negs	r0, r0
 8001512:	1a08      	subs	r0, r1, r0
 8001514:	4284      	cmp	r4, r0
 8001516:	d100      	bne.n	800151a <__aeabi_ddiv+0x34e>
 8001518:	e111      	b.n	800173e <__aeabi_ddiv+0x572>
 800151a:	4649      	mov	r1, r9
 800151c:	f7fe fe94 	bl	8000248 <__aeabi_uidivmod>
 8001520:	9a01      	ldr	r2, [sp, #4]
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	4342      	muls	r2, r0
 8001526:	0c31      	lsrs	r1, r6, #16
 8001528:	0005      	movs	r5, r0
 800152a:	4319      	orrs	r1, r3
 800152c:	428a      	cmp	r2, r1
 800152e:	d907      	bls.n	8001540 <__aeabi_ddiv+0x374>
 8001530:	1909      	adds	r1, r1, r4
 8001532:	3d01      	subs	r5, #1
 8001534:	428c      	cmp	r4, r1
 8001536:	d803      	bhi.n	8001540 <__aeabi_ddiv+0x374>
 8001538:	428a      	cmp	r2, r1
 800153a:	d901      	bls.n	8001540 <__aeabi_ddiv+0x374>
 800153c:	1e85      	subs	r5, r0, #2
 800153e:	1909      	adds	r1, r1, r4
 8001540:	1a88      	subs	r0, r1, r2
 8001542:	4649      	mov	r1, r9
 8001544:	f7fe fe80 	bl	8000248 <__aeabi_uidivmod>
 8001548:	0409      	lsls	r1, r1, #16
 800154a:	468c      	mov	ip, r1
 800154c:	0431      	lsls	r1, r6, #16
 800154e:	4666      	mov	r6, ip
 8001550:	9a01      	ldr	r2, [sp, #4]
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	4342      	muls	r2, r0
 8001556:	0003      	movs	r3, r0
 8001558:	4331      	orrs	r1, r6
 800155a:	428a      	cmp	r2, r1
 800155c:	d907      	bls.n	800156e <__aeabi_ddiv+0x3a2>
 800155e:	1909      	adds	r1, r1, r4
 8001560:	3b01      	subs	r3, #1
 8001562:	428c      	cmp	r4, r1
 8001564:	d803      	bhi.n	800156e <__aeabi_ddiv+0x3a2>
 8001566:	428a      	cmp	r2, r1
 8001568:	d901      	bls.n	800156e <__aeabi_ddiv+0x3a2>
 800156a:	1e83      	subs	r3, r0, #2
 800156c:	1909      	adds	r1, r1, r4
 800156e:	9e03      	ldr	r6, [sp, #12]
 8001570:	1a89      	subs	r1, r1, r2
 8001572:	0032      	movs	r2, r6
 8001574:	042d      	lsls	r5, r5, #16
 8001576:	431d      	orrs	r5, r3
 8001578:	9f02      	ldr	r7, [sp, #8]
 800157a:	042b      	lsls	r3, r5, #16
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	435a      	muls	r2, r3
 8001580:	437b      	muls	r3, r7
 8001582:	469c      	mov	ip, r3
 8001584:	0c28      	lsrs	r0, r5, #16
 8001586:	4346      	muls	r6, r0
 8001588:	0c13      	lsrs	r3, r2, #16
 800158a:	44b4      	add	ip, r6
 800158c:	4463      	add	r3, ip
 800158e:	4378      	muls	r0, r7
 8001590:	429e      	cmp	r6, r3
 8001592:	d903      	bls.n	800159c <__aeabi_ddiv+0x3d0>
 8001594:	2680      	movs	r6, #128	; 0x80
 8001596:	0276      	lsls	r6, r6, #9
 8001598:	46b4      	mov	ip, r6
 800159a:	4460      	add	r0, ip
 800159c:	0c1e      	lsrs	r6, r3, #16
 800159e:	0412      	lsls	r2, r2, #16
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	1830      	adds	r0, r6, r0
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	4281      	cmp	r1, r0
 80015aa:	d306      	bcc.n	80015ba <__aeabi_ddiv+0x3ee>
 80015ac:	d002      	beq.n	80015b4 <__aeabi_ddiv+0x3e8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	431d      	orrs	r5, r3
 80015b2:	e6ce      	b.n	8001352 <__aeabi_ddiv+0x186>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_ddiv+0x3ee>
 80015b8:	e6cb      	b.n	8001352 <__aeabi_ddiv+0x186>
 80015ba:	1861      	adds	r1, r4, r1
 80015bc:	1e6e      	subs	r6, r5, #1
 80015be:	42a1      	cmp	r1, r4
 80015c0:	d200      	bcs.n	80015c4 <__aeabi_ddiv+0x3f8>
 80015c2:	e0a4      	b.n	800170e <__aeabi_ddiv+0x542>
 80015c4:	4281      	cmp	r1, r0
 80015c6:	d200      	bcs.n	80015ca <__aeabi_ddiv+0x3fe>
 80015c8:	e0c9      	b.n	800175e <__aeabi_ddiv+0x592>
 80015ca:	d100      	bne.n	80015ce <__aeabi_ddiv+0x402>
 80015cc:	e0d9      	b.n	8001782 <__aeabi_ddiv+0x5b6>
 80015ce:	0035      	movs	r5, r6
 80015d0:	e7ed      	b.n	80015ae <__aeabi_ddiv+0x3e2>
 80015d2:	2501      	movs	r5, #1
 80015d4:	426d      	negs	r5, r5
 80015d6:	2101      	movs	r1, #1
 80015d8:	1a89      	subs	r1, r1, r2
 80015da:	2938      	cmp	r1, #56	; 0x38
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_ddiv+0x414>
 80015de:	e64c      	b.n	800127a <__aeabi_ddiv+0xae>
 80015e0:	291f      	cmp	r1, #31
 80015e2:	dc00      	bgt.n	80015e6 <__aeabi_ddiv+0x41a>
 80015e4:	e07f      	b.n	80016e6 <__aeabi_ddiv+0x51a>
 80015e6:	231f      	movs	r3, #31
 80015e8:	425b      	negs	r3, r3
 80015ea:	1a9a      	subs	r2, r3, r2
 80015ec:	4643      	mov	r3, r8
 80015ee:	40d3      	lsrs	r3, r2
 80015f0:	2920      	cmp	r1, #32
 80015f2:	d004      	beq.n	80015fe <__aeabi_ddiv+0x432>
 80015f4:	4644      	mov	r4, r8
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <__aeabi_ddiv+0x5c0>)
 80015f8:	445a      	add	r2, fp
 80015fa:	4094      	lsls	r4, r2
 80015fc:	4325      	orrs	r5, r4
 80015fe:	1e6a      	subs	r2, r5, #1
 8001600:	4195      	sbcs	r5, r2
 8001602:	2207      	movs	r2, #7
 8001604:	432b      	orrs	r3, r5
 8001606:	0015      	movs	r5, r2
 8001608:	2400      	movs	r4, #0
 800160a:	401d      	ands	r5, r3
 800160c:	421a      	tst	r2, r3
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x446>
 8001610:	e0a1      	b.n	8001756 <__aeabi_ddiv+0x58a>
 8001612:	220f      	movs	r2, #15
 8001614:	2400      	movs	r4, #0
 8001616:	401a      	ands	r2, r3
 8001618:	2a04      	cmp	r2, #4
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x452>
 800161c:	e098      	b.n	8001750 <__aeabi_ddiv+0x584>
 800161e:	1d1a      	adds	r2, r3, #4
 8001620:	429a      	cmp	r2, r3
 8001622:	419b      	sbcs	r3, r3
 8001624:	425b      	negs	r3, r3
 8001626:	18e4      	adds	r4, r4, r3
 8001628:	0013      	movs	r3, r2
 800162a:	0222      	lsls	r2, r4, #8
 800162c:	d400      	bmi.n	8001630 <__aeabi_ddiv+0x464>
 800162e:	e08f      	b.n	8001750 <__aeabi_ddiv+0x584>
 8001630:	2301      	movs	r3, #1
 8001632:	2400      	movs	r4, #0
 8001634:	2500      	movs	r5, #0
 8001636:	e623      	b.n	8001280 <__aeabi_ddiv+0xb4>
 8001638:	42b5      	cmp	r5, r6
 800163a:	d300      	bcc.n	800163e <__aeabi_ddiv+0x472>
 800163c:	e764      	b.n	8001508 <__aeabi_ddiv+0x33c>
 800163e:	4643      	mov	r3, r8
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	9b00      	ldr	r3, [sp, #0]
 8001644:	469c      	mov	ip, r3
 8001646:	4465      	add	r5, ip
 8001648:	001f      	movs	r7, r3
 800164a:	429d      	cmp	r5, r3
 800164c:	419b      	sbcs	r3, r3
 800164e:	425b      	negs	r3, r3
 8001650:	191b      	adds	r3, r3, r4
 8001652:	18c9      	adds	r1, r1, r3
 8001654:	428c      	cmp	r4, r1
 8001656:	d23a      	bcs.n	80016ce <__aeabi_ddiv+0x502>
 8001658:	4288      	cmp	r0, r1
 800165a:	d863      	bhi.n	8001724 <__aeabi_ddiv+0x558>
 800165c:	d060      	beq.n	8001720 <__aeabi_ddiv+0x554>
 800165e:	4690      	mov	r8, r2
 8001660:	e752      	b.n	8001508 <__aeabi_ddiv+0x33c>
 8001662:	42aa      	cmp	r2, r5
 8001664:	d900      	bls.n	8001668 <__aeabi_ddiv+0x49c>
 8001666:	e6ea      	b.n	800143e <__aeabi_ddiv+0x272>
 8001668:	4643      	mov	r3, r8
 800166a:	07de      	lsls	r6, r3, #31
 800166c:	0858      	lsrs	r0, r3, #1
 800166e:	086b      	lsrs	r3, r5, #1
 8001670:	431e      	orrs	r6, r3
 8001672:	07ed      	lsls	r5, r5, #31
 8001674:	e6ea      	b.n	800144c <__aeabi_ddiv+0x280>
 8001676:	4648      	mov	r0, r9
 8001678:	f001 f926 	bl	80028c8 <__clzsi2>
 800167c:	0001      	movs	r1, r0
 800167e:	0002      	movs	r2, r0
 8001680:	3115      	adds	r1, #21
 8001682:	3220      	adds	r2, #32
 8001684:	291c      	cmp	r1, #28
 8001686:	dc00      	bgt.n	800168a <__aeabi_ddiv+0x4be>
 8001688:	e61a      	b.n	80012c0 <__aeabi_ddiv+0xf4>
 800168a:	464b      	mov	r3, r9
 800168c:	3808      	subs	r0, #8
 800168e:	4083      	lsls	r3, r0
 8001690:	2500      	movs	r5, #0
 8001692:	4698      	mov	r8, r3
 8001694:	e620      	b.n	80012d8 <__aeabi_ddiv+0x10c>
 8001696:	f001 f917 	bl	80028c8 <__clzsi2>
 800169a:	0003      	movs	r3, r0
 800169c:	001a      	movs	r2, r3
 800169e:	3215      	adds	r2, #21
 80016a0:	3020      	adds	r0, #32
 80016a2:	2a1c      	cmp	r2, #28
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_ddiv+0x4dc>
 80016a6:	e630      	b.n	800130a <__aeabi_ddiv+0x13e>
 80016a8:	4654      	mov	r4, sl
 80016aa:	3b08      	subs	r3, #8
 80016ac:	2200      	movs	r2, #0
 80016ae:	409c      	lsls	r4, r3
 80016b0:	e635      	b.n	800131e <__aeabi_ddiv+0x152>
 80016b2:	230f      	movs	r3, #15
 80016b4:	402b      	ands	r3, r5
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d100      	bne.n	80016bc <__aeabi_ddiv+0x4f0>
 80016ba:	e652      	b.n	8001362 <__aeabi_ddiv+0x196>
 80016bc:	2305      	movs	r3, #5
 80016be:	425b      	negs	r3, r3
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	419b      	sbcs	r3, r3
 80016c4:	3504      	adds	r5, #4
 80016c6:	425b      	negs	r3, r3
 80016c8:	08ed      	lsrs	r5, r5, #3
 80016ca:	4498      	add	r8, r3
 80016cc:	e64a      	b.n	8001364 <__aeabi_ddiv+0x198>
 80016ce:	428c      	cmp	r4, r1
 80016d0:	d1c5      	bne.n	800165e <__aeabi_ddiv+0x492>
 80016d2:	42af      	cmp	r7, r5
 80016d4:	d9c0      	bls.n	8001658 <__aeabi_ddiv+0x48c>
 80016d6:	4690      	mov	r8, r2
 80016d8:	e716      	b.n	8001508 <__aeabi_ddiv+0x33c>
 80016da:	428a      	cmp	r2, r1
 80016dc:	d800      	bhi.n	80016e0 <__aeabi_ddiv+0x514>
 80016de:	e6ea      	b.n	80014b6 <__aeabi_ddiv+0x2ea>
 80016e0:	1e83      	subs	r3, r0, #2
 80016e2:	1909      	adds	r1, r1, r4
 80016e4:	e6e7      	b.n	80014b6 <__aeabi_ddiv+0x2ea>
 80016e6:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <__aeabi_ddiv+0x5c4>)
 80016e8:	0028      	movs	r0, r5
 80016ea:	445a      	add	r2, fp
 80016ec:	4643      	mov	r3, r8
 80016ee:	4095      	lsls	r5, r2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	40c8      	lsrs	r0, r1
 80016f4:	1e6a      	subs	r2, r5, #1
 80016f6:	4195      	sbcs	r5, r2
 80016f8:	4644      	mov	r4, r8
 80016fa:	4303      	orrs	r3, r0
 80016fc:	432b      	orrs	r3, r5
 80016fe:	40cc      	lsrs	r4, r1
 8001700:	075a      	lsls	r2, r3, #29
 8001702:	d092      	beq.n	800162a <__aeabi_ddiv+0x45e>
 8001704:	220f      	movs	r2, #15
 8001706:	401a      	ands	r2, r3
 8001708:	2a04      	cmp	r2, #4
 800170a:	d188      	bne.n	800161e <__aeabi_ddiv+0x452>
 800170c:	e78d      	b.n	800162a <__aeabi_ddiv+0x45e>
 800170e:	0035      	movs	r5, r6
 8001710:	4281      	cmp	r1, r0
 8001712:	d000      	beq.n	8001716 <__aeabi_ddiv+0x54a>
 8001714:	e74b      	b.n	80015ae <__aeabi_ddiv+0x3e2>
 8001716:	9a00      	ldr	r2, [sp, #0]
 8001718:	4293      	cmp	r3, r2
 800171a:	d000      	beq.n	800171e <__aeabi_ddiv+0x552>
 800171c:	e747      	b.n	80015ae <__aeabi_ddiv+0x3e2>
 800171e:	e618      	b.n	8001352 <__aeabi_ddiv+0x186>
 8001720:	42ae      	cmp	r6, r5
 8001722:	d99c      	bls.n	800165e <__aeabi_ddiv+0x492>
 8001724:	2302      	movs	r3, #2
 8001726:	425b      	negs	r3, r3
 8001728:	469c      	mov	ip, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	44e0      	add	r8, ip
 800172e:	469c      	mov	ip, r3
 8001730:	4465      	add	r5, ip
 8001732:	429d      	cmp	r5, r3
 8001734:	419b      	sbcs	r3, r3
 8001736:	425b      	negs	r3, r3
 8001738:	191b      	adds	r3, r3, r4
 800173a:	18c9      	adds	r1, r1, r3
 800173c:	e6e4      	b.n	8001508 <__aeabi_ddiv+0x33c>
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <__aeabi_ddiv+0x5c8>)
 8001740:	445a      	add	r2, fp
 8001742:	2a00      	cmp	r2, #0
 8001744:	dc00      	bgt.n	8001748 <__aeabi_ddiv+0x57c>
 8001746:	e744      	b.n	80015d2 <__aeabi_ddiv+0x406>
 8001748:	2301      	movs	r3, #1
 800174a:	2500      	movs	r5, #0
 800174c:	4498      	add	r8, r3
 800174e:	e609      	b.n	8001364 <__aeabi_ddiv+0x198>
 8001750:	0765      	lsls	r5, r4, #29
 8001752:	0264      	lsls	r4, r4, #9
 8001754:	0b24      	lsrs	r4, r4, #12
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	431d      	orrs	r5, r3
 800175a:	2300      	movs	r3, #0
 800175c:	e590      	b.n	8001280 <__aeabi_ddiv+0xb4>
 800175e:	9e00      	ldr	r6, [sp, #0]
 8001760:	3d02      	subs	r5, #2
 8001762:	0072      	lsls	r2, r6, #1
 8001764:	42b2      	cmp	r2, r6
 8001766:	41bf      	sbcs	r7, r7
 8001768:	427f      	negs	r7, r7
 800176a:	193c      	adds	r4, r7, r4
 800176c:	1909      	adds	r1, r1, r4
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	e7ce      	b.n	8001710 <__aeabi_ddiv+0x544>
 8001772:	2480      	movs	r4, #128	; 0x80
 8001774:	4643      	mov	r3, r8
 8001776:	0324      	lsls	r4, r4, #12
 8001778:	431c      	orrs	r4, r3
 800177a:	0324      	lsls	r4, r4, #12
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <__aeabi_ddiv+0x5cc>)
 800177e:	0b24      	lsrs	r4, r4, #12
 8001780:	e57e      	b.n	8001280 <__aeabi_ddiv+0xb4>
 8001782:	9a00      	ldr	r2, [sp, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d3ea      	bcc.n	800175e <__aeabi_ddiv+0x592>
 8001788:	0035      	movs	r5, r6
 800178a:	e7c4      	b.n	8001716 <__aeabi_ddiv+0x54a>
 800178c:	0000043e 	.word	0x0000043e
 8001790:	0000041e 	.word	0x0000041e
 8001794:	000003ff 	.word	0x000003ff
 8001798:	000007ff 	.word	0x000007ff

0800179c <__eqdf2>:
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	464f      	mov	r7, r9
 80017a0:	4646      	mov	r6, r8
 80017a2:	46d6      	mov	lr, sl
 80017a4:	4694      	mov	ip, r2
 80017a6:	4691      	mov	r9, r2
 80017a8:	031a      	lsls	r2, r3, #12
 80017aa:	0b12      	lsrs	r2, r2, #12
 80017ac:	4d18      	ldr	r5, [pc, #96]	; (8001810 <__eqdf2+0x74>)
 80017ae:	b5c0      	push	{r6, r7, lr}
 80017b0:	004c      	lsls	r4, r1, #1
 80017b2:	030f      	lsls	r7, r1, #12
 80017b4:	4692      	mov	sl, r2
 80017b6:	005a      	lsls	r2, r3, #1
 80017b8:	0006      	movs	r6, r0
 80017ba:	4680      	mov	r8, r0
 80017bc:	0b3f      	lsrs	r7, r7, #12
 80017be:	2001      	movs	r0, #1
 80017c0:	0d64      	lsrs	r4, r4, #21
 80017c2:	0fc9      	lsrs	r1, r1, #31
 80017c4:	0d52      	lsrs	r2, r2, #21
 80017c6:	0fdb      	lsrs	r3, r3, #31
 80017c8:	42ac      	cmp	r4, r5
 80017ca:	d00a      	beq.n	80017e2 <__eqdf2+0x46>
 80017cc:	42aa      	cmp	r2, r5
 80017ce:	d003      	beq.n	80017d8 <__eqdf2+0x3c>
 80017d0:	4294      	cmp	r4, r2
 80017d2:	d101      	bne.n	80017d8 <__eqdf2+0x3c>
 80017d4:	4557      	cmp	r7, sl
 80017d6:	d00d      	beq.n	80017f4 <__eqdf2+0x58>
 80017d8:	bce0      	pop	{r5, r6, r7}
 80017da:	46ba      	mov	sl, r7
 80017dc:	46b1      	mov	r9, r6
 80017de:	46a8      	mov	r8, r5
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	003d      	movs	r5, r7
 80017e4:	4335      	orrs	r5, r6
 80017e6:	d1f7      	bne.n	80017d8 <__eqdf2+0x3c>
 80017e8:	42a2      	cmp	r2, r4
 80017ea:	d1f5      	bne.n	80017d8 <__eqdf2+0x3c>
 80017ec:	4652      	mov	r2, sl
 80017ee:	4665      	mov	r5, ip
 80017f0:	432a      	orrs	r2, r5
 80017f2:	d1f1      	bne.n	80017d8 <__eqdf2+0x3c>
 80017f4:	2001      	movs	r0, #1
 80017f6:	45c8      	cmp	r8, r9
 80017f8:	d1ee      	bne.n	80017d8 <__eqdf2+0x3c>
 80017fa:	4299      	cmp	r1, r3
 80017fc:	d006      	beq.n	800180c <__eqdf2+0x70>
 80017fe:	2c00      	cmp	r4, #0
 8001800:	d1ea      	bne.n	80017d8 <__eqdf2+0x3c>
 8001802:	433e      	orrs	r6, r7
 8001804:	0030      	movs	r0, r6
 8001806:	1e46      	subs	r6, r0, #1
 8001808:	41b0      	sbcs	r0, r6
 800180a:	e7e5      	b.n	80017d8 <__eqdf2+0x3c>
 800180c:	2000      	movs	r0, #0
 800180e:	e7e3      	b.n	80017d8 <__eqdf2+0x3c>
 8001810:	000007ff 	.word	0x000007ff

08001814 <__gedf2>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	464e      	mov	r6, r9
 8001818:	4645      	mov	r5, r8
 800181a:	4657      	mov	r7, sl
 800181c:	46de      	mov	lr, fp
 800181e:	0004      	movs	r4, r0
 8001820:	0018      	movs	r0, r3
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	0016      	movs	r6, r2
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	0b1b      	lsrs	r3, r3, #12
 800182a:	4d32      	ldr	r5, [pc, #200]	; (80018f4 <__gedf2+0xe0>)
 800182c:	030f      	lsls	r7, r1, #12
 800182e:	004a      	lsls	r2, r1, #1
 8001830:	4699      	mov	r9, r3
 8001832:	0043      	lsls	r3, r0, #1
 8001834:	46a4      	mov	ip, r4
 8001836:	46b0      	mov	r8, r6
 8001838:	0b3f      	lsrs	r7, r7, #12
 800183a:	0d52      	lsrs	r2, r2, #21
 800183c:	0fc9      	lsrs	r1, r1, #31
 800183e:	0d5b      	lsrs	r3, r3, #21
 8001840:	0fc0      	lsrs	r0, r0, #31
 8001842:	42aa      	cmp	r2, r5
 8001844:	d029      	beq.n	800189a <__gedf2+0x86>
 8001846:	42ab      	cmp	r3, r5
 8001848:	d018      	beq.n	800187c <__gedf2+0x68>
 800184a:	2a00      	cmp	r2, #0
 800184c:	d12a      	bne.n	80018a4 <__gedf2+0x90>
 800184e:	433c      	orrs	r4, r7
 8001850:	46a3      	mov	fp, r4
 8001852:	4265      	negs	r5, r4
 8001854:	4165      	adcs	r5, r4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <__gedf2+0x4c>
 800185a:	464c      	mov	r4, r9
 800185c:	4326      	orrs	r6, r4
 800185e:	d027      	beq.n	80018b0 <__gedf2+0x9c>
 8001860:	2d00      	cmp	r5, #0
 8001862:	d115      	bne.n	8001890 <__gedf2+0x7c>
 8001864:	4281      	cmp	r1, r0
 8001866:	d028      	beq.n	80018ba <__gedf2+0xa6>
 8001868:	2002      	movs	r0, #2
 800186a:	3901      	subs	r1, #1
 800186c:	4008      	ands	r0, r1
 800186e:	3801      	subs	r0, #1
 8001870:	bcf0      	pop	{r4, r5, r6, r7}
 8001872:	46bb      	mov	fp, r7
 8001874:	46b2      	mov	sl, r6
 8001876:	46a9      	mov	r9, r5
 8001878:	46a0      	mov	r8, r4
 800187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187c:	464d      	mov	r5, r9
 800187e:	432e      	orrs	r6, r5
 8001880:	d12f      	bne.n	80018e2 <__gedf2+0xce>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d1ee      	bne.n	8001864 <__gedf2+0x50>
 8001886:	433c      	orrs	r4, r7
 8001888:	4265      	negs	r5, r4
 800188a:	4165      	adcs	r5, r4
 800188c:	2d00      	cmp	r5, #0
 800188e:	d0e9      	beq.n	8001864 <__gedf2+0x50>
 8001890:	2800      	cmp	r0, #0
 8001892:	d1ed      	bne.n	8001870 <__gedf2+0x5c>
 8001894:	2001      	movs	r0, #1
 8001896:	4240      	negs	r0, r0
 8001898:	e7ea      	b.n	8001870 <__gedf2+0x5c>
 800189a:	003d      	movs	r5, r7
 800189c:	4325      	orrs	r5, r4
 800189e:	d120      	bne.n	80018e2 <__gedf2+0xce>
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d0eb      	beq.n	800187c <__gedf2+0x68>
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1dd      	bne.n	8001864 <__gedf2+0x50>
 80018a8:	464c      	mov	r4, r9
 80018aa:	4326      	orrs	r6, r4
 80018ac:	d1da      	bne.n	8001864 <__gedf2+0x50>
 80018ae:	e7db      	b.n	8001868 <__gedf2+0x54>
 80018b0:	465b      	mov	r3, fp
 80018b2:	2000      	movs	r0, #0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0db      	beq.n	8001870 <__gedf2+0x5c>
 80018b8:	e7d6      	b.n	8001868 <__gedf2+0x54>
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dc0a      	bgt.n	80018d4 <__gedf2+0xc0>
 80018be:	dbe7      	blt.n	8001890 <__gedf2+0x7c>
 80018c0:	454f      	cmp	r7, r9
 80018c2:	d8d1      	bhi.n	8001868 <__gedf2+0x54>
 80018c4:	d010      	beq.n	80018e8 <__gedf2+0xd4>
 80018c6:	2000      	movs	r0, #0
 80018c8:	454f      	cmp	r7, r9
 80018ca:	d2d1      	bcs.n	8001870 <__gedf2+0x5c>
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d0e1      	beq.n	8001894 <__gedf2+0x80>
 80018d0:	0008      	movs	r0, r1
 80018d2:	e7cd      	b.n	8001870 <__gedf2+0x5c>
 80018d4:	4243      	negs	r3, r0
 80018d6:	4158      	adcs	r0, r3
 80018d8:	2302      	movs	r3, #2
 80018da:	4240      	negs	r0, r0
 80018dc:	4018      	ands	r0, r3
 80018de:	3801      	subs	r0, #1
 80018e0:	e7c6      	b.n	8001870 <__gedf2+0x5c>
 80018e2:	2002      	movs	r0, #2
 80018e4:	4240      	negs	r0, r0
 80018e6:	e7c3      	b.n	8001870 <__gedf2+0x5c>
 80018e8:	45c4      	cmp	ip, r8
 80018ea:	d8bd      	bhi.n	8001868 <__gedf2+0x54>
 80018ec:	2000      	movs	r0, #0
 80018ee:	45c4      	cmp	ip, r8
 80018f0:	d2be      	bcs.n	8001870 <__gedf2+0x5c>
 80018f2:	e7eb      	b.n	80018cc <__gedf2+0xb8>
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__ledf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	464e      	mov	r6, r9
 80018fc:	4645      	mov	r5, r8
 80018fe:	4657      	mov	r7, sl
 8001900:	46de      	mov	lr, fp
 8001902:	0004      	movs	r4, r0
 8001904:	0018      	movs	r0, r3
 8001906:	b5e0      	push	{r5, r6, r7, lr}
 8001908:	0016      	movs	r6, r2
 800190a:	031b      	lsls	r3, r3, #12
 800190c:	0b1b      	lsrs	r3, r3, #12
 800190e:	4d31      	ldr	r5, [pc, #196]	; (80019d4 <__ledf2+0xdc>)
 8001910:	030f      	lsls	r7, r1, #12
 8001912:	004a      	lsls	r2, r1, #1
 8001914:	4699      	mov	r9, r3
 8001916:	0043      	lsls	r3, r0, #1
 8001918:	46a4      	mov	ip, r4
 800191a:	46b0      	mov	r8, r6
 800191c:	0b3f      	lsrs	r7, r7, #12
 800191e:	0d52      	lsrs	r2, r2, #21
 8001920:	0fc9      	lsrs	r1, r1, #31
 8001922:	0d5b      	lsrs	r3, r3, #21
 8001924:	0fc0      	lsrs	r0, r0, #31
 8001926:	42aa      	cmp	r2, r5
 8001928:	d011      	beq.n	800194e <__ledf2+0x56>
 800192a:	42ab      	cmp	r3, r5
 800192c:	d014      	beq.n	8001958 <__ledf2+0x60>
 800192e:	2a00      	cmp	r2, #0
 8001930:	d12f      	bne.n	8001992 <__ledf2+0x9a>
 8001932:	433c      	orrs	r4, r7
 8001934:	46a3      	mov	fp, r4
 8001936:	4265      	negs	r5, r4
 8001938:	4165      	adcs	r5, r4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d114      	bne.n	8001968 <__ledf2+0x70>
 800193e:	464c      	mov	r4, r9
 8001940:	4326      	orrs	r6, r4
 8001942:	d111      	bne.n	8001968 <__ledf2+0x70>
 8001944:	465b      	mov	r3, fp
 8001946:	2000      	movs	r0, #0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d017      	beq.n	800197c <__ledf2+0x84>
 800194c:	e010      	b.n	8001970 <__ledf2+0x78>
 800194e:	003d      	movs	r5, r7
 8001950:	4325      	orrs	r5, r4
 8001952:	d112      	bne.n	800197a <__ledf2+0x82>
 8001954:	4293      	cmp	r3, r2
 8001956:	d11c      	bne.n	8001992 <__ledf2+0x9a>
 8001958:	464d      	mov	r5, r9
 800195a:	432e      	orrs	r6, r5
 800195c:	d10d      	bne.n	800197a <__ledf2+0x82>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d104      	bne.n	800196c <__ledf2+0x74>
 8001962:	433c      	orrs	r4, r7
 8001964:	4265      	negs	r5, r4
 8001966:	4165      	adcs	r5, r4
 8001968:	2d00      	cmp	r5, #0
 800196a:	d10d      	bne.n	8001988 <__ledf2+0x90>
 800196c:	4281      	cmp	r1, r0
 800196e:	d016      	beq.n	800199e <__ledf2+0xa6>
 8001970:	2002      	movs	r0, #2
 8001972:	3901      	subs	r1, #1
 8001974:	4008      	ands	r0, r1
 8001976:	3801      	subs	r0, #1
 8001978:	e000      	b.n	800197c <__ledf2+0x84>
 800197a:	2002      	movs	r0, #2
 800197c:	bcf0      	pop	{r4, r5, r6, r7}
 800197e:	46bb      	mov	fp, r7
 8001980:	46b2      	mov	sl, r6
 8001982:	46a9      	mov	r9, r5
 8001984:	46a0      	mov	r8, r4
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	2800      	cmp	r0, #0
 800198a:	d1f7      	bne.n	800197c <__ledf2+0x84>
 800198c:	2001      	movs	r0, #1
 800198e:	4240      	negs	r0, r0
 8001990:	e7f4      	b.n	800197c <__ledf2+0x84>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ea      	bne.n	800196c <__ledf2+0x74>
 8001996:	464c      	mov	r4, r9
 8001998:	4326      	orrs	r6, r4
 800199a:	d1e7      	bne.n	800196c <__ledf2+0x74>
 800199c:	e7e8      	b.n	8001970 <__ledf2+0x78>
 800199e:	429a      	cmp	r2, r3
 80019a0:	dd06      	ble.n	80019b0 <__ledf2+0xb8>
 80019a2:	4243      	negs	r3, r0
 80019a4:	4158      	adcs	r0, r3
 80019a6:	2302      	movs	r3, #2
 80019a8:	4240      	negs	r0, r0
 80019aa:	4018      	ands	r0, r3
 80019ac:	3801      	subs	r0, #1
 80019ae:	e7e5      	b.n	800197c <__ledf2+0x84>
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbe9      	blt.n	8001988 <__ledf2+0x90>
 80019b4:	454f      	cmp	r7, r9
 80019b6:	d8db      	bhi.n	8001970 <__ledf2+0x78>
 80019b8:	d006      	beq.n	80019c8 <__ledf2+0xd0>
 80019ba:	2000      	movs	r0, #0
 80019bc:	454f      	cmp	r7, r9
 80019be:	d2dd      	bcs.n	800197c <__ledf2+0x84>
 80019c0:	2900      	cmp	r1, #0
 80019c2:	d0e3      	beq.n	800198c <__ledf2+0x94>
 80019c4:	0008      	movs	r0, r1
 80019c6:	e7d9      	b.n	800197c <__ledf2+0x84>
 80019c8:	45c4      	cmp	ip, r8
 80019ca:	d8d1      	bhi.n	8001970 <__ledf2+0x78>
 80019cc:	2000      	movs	r0, #0
 80019ce:	45c4      	cmp	ip, r8
 80019d0:	d2d4      	bcs.n	800197c <__ledf2+0x84>
 80019d2:	e7f5      	b.n	80019c0 <__ledf2+0xc8>
 80019d4:	000007ff 	.word	0x000007ff

080019d8 <__aeabi_dmul>:
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	4657      	mov	r7, sl
 80019dc:	464e      	mov	r6, r9
 80019de:	4645      	mov	r5, r8
 80019e0:	46de      	mov	lr, fp
 80019e2:	b5e0      	push	{r5, r6, r7, lr}
 80019e4:	4698      	mov	r8, r3
 80019e6:	030c      	lsls	r4, r1, #12
 80019e8:	004b      	lsls	r3, r1, #1
 80019ea:	0006      	movs	r6, r0
 80019ec:	4692      	mov	sl, r2
 80019ee:	b087      	sub	sp, #28
 80019f0:	0b24      	lsrs	r4, r4, #12
 80019f2:	0d5b      	lsrs	r3, r3, #21
 80019f4:	0fcf      	lsrs	r7, r1, #31
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <__aeabi_dmul+0xfc>
 80019fa:	4add      	ldr	r2, [pc, #884]	; (8001d70 <__aeabi_dmul+0x398>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dmul+0x2a>
 8001a00:	e086      	b.n	8001b10 <__aeabi_dmul+0x138>
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00e4      	lsls	r4, r4, #3
 8001a06:	4314      	orrs	r4, r2
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0412      	lsls	r2, r2, #16
 8001a0c:	4314      	orrs	r4, r2
 8001a0e:	4ad9      	ldr	r2, [pc, #868]	; (8001d74 <__aeabi_dmul+0x39c>)
 8001a10:	00c5      	lsls	r5, r0, #3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4463      	add	r3, ip
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	4643      	mov	r3, r8
 8001a20:	4642      	mov	r2, r8
 8001a22:	031e      	lsls	r6, r3, #12
 8001a24:	0fd2      	lsrs	r2, r2, #31
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4650      	mov	r0, sl
 8001a2a:	4690      	mov	r8, r2
 8001a2c:	0b36      	lsrs	r6, r6, #12
 8001a2e:	0d5b      	lsrs	r3, r3, #21
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dmul+0x5c>
 8001a32:	e078      	b.n	8001b26 <__aeabi_dmul+0x14e>
 8001a34:	4ace      	ldr	r2, [pc, #824]	; (8001d70 <__aeabi_dmul+0x398>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <__aeabi_dmul+0x9e>
 8001a3a:	49ce      	ldr	r1, [pc, #824]	; (8001d74 <__aeabi_dmul+0x39c>)
 8001a3c:	0f42      	lsrs	r2, r0, #29
 8001a3e:	468c      	mov	ip, r1
 8001a40:	9900      	ldr	r1, [sp, #0]
 8001a42:	4463      	add	r3, ip
 8001a44:	00f6      	lsls	r6, r6, #3
 8001a46:	468c      	mov	ip, r1
 8001a48:	4316      	orrs	r6, r2
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	449c      	add	ip, r3
 8001a4e:	0412      	lsls	r2, r2, #16
 8001a50:	4663      	mov	r3, ip
 8001a52:	4316      	orrs	r6, r2
 8001a54:	00c2      	lsls	r2, r0, #3
 8001a56:	2000      	movs	r0, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	9900      	ldr	r1, [sp, #0]
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	3101      	adds	r1, #1
 8001a60:	468c      	mov	ip, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	407b      	eors	r3, r7
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	290f      	cmp	r1, #15
 8001a6a:	d900      	bls.n	8001a6e <__aeabi_dmul+0x96>
 8001a6c:	e07e      	b.n	8001b6c <__aeabi_dmul+0x194>
 8001a6e:	4bc2      	ldr	r3, [pc, #776]	; (8001d78 <__aeabi_dmul+0x3a0>)
 8001a70:	0089      	lsls	r1, r1, #2
 8001a72:	5859      	ldr	r1, [r3, r1]
 8001a74:	468f      	mov	pc, r1
 8001a76:	4652      	mov	r2, sl
 8001a78:	9b00      	ldr	r3, [sp, #0]
 8001a7a:	4332      	orrs	r2, r6
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0xa8>
 8001a7e:	e156      	b.n	8001d2e <__aeabi_dmul+0x356>
 8001a80:	49bb      	ldr	r1, [pc, #748]	; (8001d70 <__aeabi_dmul+0x398>)
 8001a82:	2600      	movs	r6, #0
 8001a84:	468c      	mov	ip, r1
 8001a86:	4463      	add	r3, ip
 8001a88:	4649      	mov	r1, r9
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	4319      	orrs	r1, r3
 8001a90:	4689      	mov	r9, r1
 8001a92:	2002      	movs	r0, #2
 8001a94:	e7e1      	b.n	8001a5a <__aeabi_dmul+0x82>
 8001a96:	4643      	mov	r3, r8
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	0034      	movs	r4, r6
 8001a9c:	0015      	movs	r5, r2
 8001a9e:	4683      	mov	fp, r0
 8001aa0:	465b      	mov	r3, fp
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d05e      	beq.n	8001b64 <__aeabi_dmul+0x18c>
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0xd4>
 8001aaa:	e1f3      	b.n	8001e94 <__aeabi_dmul+0x4bc>
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d000      	beq.n	8001ab2 <__aeabi_dmul+0xda>
 8001ab0:	e118      	b.n	8001ce4 <__aeabi_dmul+0x30c>
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	9b01      	ldr	r3, [sp, #4]
 8001aba:	0512      	lsls	r2, r2, #20
 8001abc:	4322      	orrs	r2, r4
 8001abe:	07db      	lsls	r3, r3, #31
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	b007      	add	sp, #28
 8001ac8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aca:	46bb      	mov	fp, r7
 8001acc:	46b2      	mov	sl, r6
 8001ace:	46a9      	mov	r9, r5
 8001ad0:	46a0      	mov	r8, r4
 8001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad4:	0025      	movs	r5, r4
 8001ad6:	4305      	orrs	r5, r0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0x104>
 8001ada:	e141      	b.n	8001d60 <__aeabi_dmul+0x388>
 8001adc:	2c00      	cmp	r4, #0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dmul+0x10a>
 8001ae0:	e1ad      	b.n	8001e3e <__aeabi_dmul+0x466>
 8001ae2:	0020      	movs	r0, r4
 8001ae4:	f000 fef0 	bl	80028c8 <__clzsi2>
 8001ae8:	0001      	movs	r1, r0
 8001aea:	0002      	movs	r2, r0
 8001aec:	390b      	subs	r1, #11
 8001aee:	231d      	movs	r3, #29
 8001af0:	0010      	movs	r0, r2
 8001af2:	1a5b      	subs	r3, r3, r1
 8001af4:	0031      	movs	r1, r6
 8001af6:	0035      	movs	r5, r6
 8001af8:	3808      	subs	r0, #8
 8001afa:	4084      	lsls	r4, r0
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	4085      	lsls	r5, r0
 8001b00:	430c      	orrs	r4, r1
 8001b02:	489e      	ldr	r0, [pc, #632]	; (8001d7c <__aeabi_dmul+0x3a4>)
 8001b04:	1a83      	subs	r3, r0, r2
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	e786      	b.n	8001a1e <__aeabi_dmul+0x46>
 8001b10:	0005      	movs	r5, r0
 8001b12:	4325      	orrs	r5, r4
 8001b14:	d000      	beq.n	8001b18 <__aeabi_dmul+0x140>
 8001b16:	e11c      	b.n	8001d52 <__aeabi_dmul+0x37a>
 8001b18:	2208      	movs	r2, #8
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2400      	movs	r4, #0
 8001b20:	4691      	mov	r9, r2
 8001b22:	469b      	mov	fp, r3
 8001b24:	e77b      	b.n	8001a1e <__aeabi_dmul+0x46>
 8001b26:	4652      	mov	r2, sl
 8001b28:	4332      	orrs	r2, r6
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x156>
 8001b2c:	e10a      	b.n	8001d44 <__aeabi_dmul+0x36c>
 8001b2e:	2e00      	cmp	r6, #0
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dmul+0x15c>
 8001b32:	e176      	b.n	8001e22 <__aeabi_dmul+0x44a>
 8001b34:	0030      	movs	r0, r6
 8001b36:	f000 fec7 	bl	80028c8 <__clzsi2>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	3a0b      	subs	r2, #11
 8001b3e:	231d      	movs	r3, #29
 8001b40:	0001      	movs	r1, r0
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	4652      	mov	r2, sl
 8001b46:	3908      	subs	r1, #8
 8001b48:	40da      	lsrs	r2, r3
 8001b4a:	408e      	lsls	r6, r1
 8001b4c:	4316      	orrs	r6, r2
 8001b4e:	4652      	mov	r2, sl
 8001b50:	408a      	lsls	r2, r1
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	4989      	ldr	r1, [pc, #548]	; (8001d7c <__aeabi_dmul+0x3a4>)
 8001b56:	1a18      	subs	r0, r3, r0
 8001b58:	0003      	movs	r3, r0
 8001b5a:	468c      	mov	ip, r1
 8001b5c:	4463      	add	r3, ip
 8001b5e:	2000      	movs	r0, #0
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	e77a      	b.n	8001a5a <__aeabi_dmul+0x82>
 8001b64:	2400      	movs	r4, #0
 8001b66:	2500      	movs	r5, #0
 8001b68:	4a81      	ldr	r2, [pc, #516]	; (8001d70 <__aeabi_dmul+0x398>)
 8001b6a:	e7a5      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001b6c:	0c2f      	lsrs	r7, r5, #16
 8001b6e:	042d      	lsls	r5, r5, #16
 8001b70:	0c2d      	lsrs	r5, r5, #16
 8001b72:	002b      	movs	r3, r5
 8001b74:	0c11      	lsrs	r1, r2, #16
 8001b76:	0412      	lsls	r2, r2, #16
 8001b78:	0c12      	lsrs	r2, r2, #16
 8001b7a:	4353      	muls	r3, r2
 8001b7c:	4698      	mov	r8, r3
 8001b7e:	0013      	movs	r3, r2
 8001b80:	0028      	movs	r0, r5
 8001b82:	437b      	muls	r3, r7
 8001b84:	4699      	mov	r9, r3
 8001b86:	4348      	muls	r0, r1
 8001b88:	4448      	add	r0, r9
 8001b8a:	4683      	mov	fp, r0
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	000b      	movs	r3, r1
 8001b90:	0c00      	lsrs	r0, r0, #16
 8001b92:	4682      	mov	sl, r0
 8001b94:	4658      	mov	r0, fp
 8001b96:	437b      	muls	r3, r7
 8001b98:	4450      	add	r0, sl
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	4581      	cmp	r9, r0
 8001b9e:	d906      	bls.n	8001bae <__aeabi_dmul+0x1d6>
 8001ba0:	469a      	mov	sl, r3
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	025b      	lsls	r3, r3, #9
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	44ca      	add	sl, r9
 8001baa:	4653      	mov	r3, sl
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	0c03      	lsrs	r3, r0, #16
 8001bb0:	469b      	mov	fp, r3
 8001bb2:	4643      	mov	r3, r8
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	0400      	lsls	r0, r0, #16
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	4698      	mov	r8, r3
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	4443      	add	r3, r8
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	0c33      	lsrs	r3, r6, #16
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	002b      	movs	r3, r5
 8001bc8:	0436      	lsls	r6, r6, #16
 8001bca:	0c36      	lsrs	r6, r6, #16
 8001bcc:	4373      	muls	r3, r6
 8001bce:	4698      	mov	r8, r3
 8001bd0:	0033      	movs	r3, r6
 8001bd2:	437b      	muls	r3, r7
 8001bd4:	469a      	mov	sl, r3
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	435d      	muls	r5, r3
 8001bda:	435f      	muls	r7, r3
 8001bdc:	4643      	mov	r3, r8
 8001bde:	4455      	add	r5, sl
 8001be0:	0c18      	lsrs	r0, r3, #16
 8001be2:	1940      	adds	r0, r0, r5
 8001be4:	4582      	cmp	sl, r0
 8001be6:	d903      	bls.n	8001bf0 <__aeabi_dmul+0x218>
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	469a      	mov	sl, r3
 8001bee:	4457      	add	r7, sl
 8001bf0:	0c05      	lsrs	r5, r0, #16
 8001bf2:	19eb      	adds	r3, r5, r7
 8001bf4:	9305      	str	r3, [sp, #20]
 8001bf6:	4643      	mov	r3, r8
 8001bf8:	041d      	lsls	r5, r3, #16
 8001bfa:	0c2d      	lsrs	r5, r5, #16
 8001bfc:	0400      	lsls	r0, r0, #16
 8001bfe:	1940      	adds	r0, r0, r5
 8001c00:	0c25      	lsrs	r5, r4, #16
 8001c02:	0424      	lsls	r4, r4, #16
 8001c04:	0c24      	lsrs	r4, r4, #16
 8001c06:	0027      	movs	r7, r4
 8001c08:	4357      	muls	r7, r2
 8001c0a:	436a      	muls	r2, r5
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	002a      	movs	r2, r5
 8001c10:	0c3b      	lsrs	r3, r7, #16
 8001c12:	469a      	mov	sl, r3
 8001c14:	434a      	muls	r2, r1
 8001c16:	4361      	muls	r1, r4
 8001c18:	4441      	add	r1, r8
 8001c1a:	4451      	add	r1, sl
 8001c1c:	4483      	add	fp, r0
 8001c1e:	4588      	cmp	r8, r1
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x252>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4698      	mov	r8, r3
 8001c28:	4442      	add	r2, r8
 8001c2a:	043f      	lsls	r7, r7, #16
 8001c2c:	0c0b      	lsrs	r3, r1, #16
 8001c2e:	0c3f      	lsrs	r7, r7, #16
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	19c9      	adds	r1, r1, r7
 8001c34:	0027      	movs	r7, r4
 8001c36:	4698      	mov	r8, r3
 8001c38:	464b      	mov	r3, r9
 8001c3a:	4377      	muls	r7, r6
 8001c3c:	435c      	muls	r4, r3
 8001c3e:	436e      	muls	r6, r5
 8001c40:	435d      	muls	r5, r3
 8001c42:	0c3b      	lsrs	r3, r7, #16
 8001c44:	4699      	mov	r9, r3
 8001c46:	19a4      	adds	r4, r4, r6
 8001c48:	444c      	add	r4, r9
 8001c4a:	4442      	add	r2, r8
 8001c4c:	9503      	str	r5, [sp, #12]
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d904      	bls.n	8001c5c <__aeabi_dmul+0x284>
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4698      	mov	r8, r3
 8001c58:	4445      	add	r5, r8
 8001c5a:	9503      	str	r5, [sp, #12]
 8001c5c:	9b02      	ldr	r3, [sp, #8]
 8001c5e:	043f      	lsls	r7, r7, #16
 8001c60:	445b      	add	r3, fp
 8001c62:	001e      	movs	r6, r3
 8001c64:	4283      	cmp	r3, r0
 8001c66:	4180      	sbcs	r0, r0
 8001c68:	0423      	lsls	r3, r4, #16
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	9b05      	ldr	r3, [sp, #20]
 8001c6e:	0c3f      	lsrs	r7, r7, #16
 8001c70:	4447      	add	r7, r8
 8001c72:	4698      	mov	r8, r3
 8001c74:	1876      	adds	r6, r6, r1
 8001c76:	428e      	cmp	r6, r1
 8001c78:	4189      	sbcs	r1, r1
 8001c7a:	4447      	add	r7, r8
 8001c7c:	4240      	negs	r0, r0
 8001c7e:	183d      	adds	r5, r7, r0
 8001c80:	46a8      	mov	r8, r5
 8001c82:	4693      	mov	fp, r2
 8001c84:	4249      	negs	r1, r1
 8001c86:	468a      	mov	sl, r1
 8001c88:	44c3      	add	fp, r8
 8001c8a:	429f      	cmp	r7, r3
 8001c8c:	41bf      	sbcs	r7, r7
 8001c8e:	4580      	cmp	r8, r0
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	9b03      	ldr	r3, [sp, #12]
 8001c94:	44da      	add	sl, fp
 8001c96:	4698      	mov	r8, r3
 8001c98:	4653      	mov	r3, sl
 8001c9a:	4240      	negs	r0, r0
 8001c9c:	427f      	negs	r7, r7
 8001c9e:	4307      	orrs	r7, r0
 8001ca0:	0c24      	lsrs	r4, r4, #16
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	4192      	sbcs	r2, r2
 8001ca6:	458a      	cmp	sl, r1
 8001ca8:	4189      	sbcs	r1, r1
 8001caa:	193f      	adds	r7, r7, r4
 8001cac:	0ddc      	lsrs	r4, r3, #23
 8001cae:	9b04      	ldr	r3, [sp, #16]
 8001cb0:	0275      	lsls	r5, r6, #9
 8001cb2:	431d      	orrs	r5, r3
 8001cb4:	1e68      	subs	r0, r5, #1
 8001cb6:	4185      	sbcs	r5, r0
 8001cb8:	4653      	mov	r3, sl
 8001cba:	4252      	negs	r2, r2
 8001cbc:	4249      	negs	r1, r1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	18bf      	adds	r7, r7, r2
 8001cc2:	4447      	add	r7, r8
 8001cc4:	0df6      	lsrs	r6, r6, #23
 8001cc6:	027f      	lsls	r7, r7, #9
 8001cc8:	4335      	orrs	r5, r6
 8001cca:	025a      	lsls	r2, r3, #9
 8001ccc:	433c      	orrs	r4, r7
 8001cce:	4315      	orrs	r5, r2
 8001cd0:	01fb      	lsls	r3, r7, #7
 8001cd2:	d400      	bmi.n	8001cd6 <__aeabi_dmul+0x2fe>
 8001cd4:	e0c1      	b.n	8001e5a <__aeabi_dmul+0x482>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	086a      	lsrs	r2, r5, #1
 8001cda:	400d      	ands	r5, r1
 8001cdc:	4315      	orrs	r5, r2
 8001cde:	07e2      	lsls	r2, r4, #31
 8001ce0:	4315      	orrs	r5, r2
 8001ce2:	0864      	lsrs	r4, r4, #1
 8001ce4:	4926      	ldr	r1, [pc, #152]	; (8001d80 <__aeabi_dmul+0x3a8>)
 8001ce6:	4461      	add	r1, ip
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	dd56      	ble.n	8001d9a <__aeabi_dmul+0x3c2>
 8001cec:	076b      	lsls	r3, r5, #29
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dmul+0x32c>
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	402a      	ands	r2, r5
 8001cf4:	2a04      	cmp	r2, #4
 8001cf6:	d005      	beq.n	8001d04 <__aeabi_dmul+0x32c>
 8001cf8:	1d2a      	adds	r2, r5, #4
 8001cfa:	42aa      	cmp	r2, r5
 8001cfc:	41ad      	sbcs	r5, r5
 8001cfe:	426d      	negs	r5, r5
 8001d00:	1964      	adds	r4, r4, r5
 8001d02:	0015      	movs	r5, r2
 8001d04:	01e3      	lsls	r3, r4, #7
 8001d06:	d504      	bpl.n	8001d12 <__aeabi_dmul+0x33a>
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <__aeabi_dmul+0x3ac>)
 8001d0c:	00c9      	lsls	r1, r1, #3
 8001d0e:	4014      	ands	r4, r2
 8001d10:	4461      	add	r1, ip
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <__aeabi_dmul+0x3b0>)
 8001d14:	4291      	cmp	r1, r2
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_dmul+0x342>
 8001d18:	e724      	b.n	8001b64 <__aeabi_dmul+0x18c>
 8001d1a:	0762      	lsls	r2, r4, #29
 8001d1c:	08ed      	lsrs	r5, r5, #3
 8001d1e:	0264      	lsls	r4, r4, #9
 8001d20:	0549      	lsls	r1, r1, #21
 8001d22:	4315      	orrs	r5, r2
 8001d24:	0b24      	lsrs	r4, r4, #12
 8001d26:	0d4a      	lsrs	r2, r1, #21
 8001d28:	e6c6      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001d2a:	9701      	str	r7, [sp, #4]
 8001d2c:	e6b8      	b.n	8001aa0 <__aeabi_dmul+0xc8>
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <__aeabi_dmul+0x398>)
 8001d30:	2003      	movs	r0, #3
 8001d32:	4694      	mov	ip, r2
 8001d34:	4463      	add	r3, ip
 8001d36:	464a      	mov	r2, r9
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	4691      	mov	r9, r2
 8001d40:	4652      	mov	r2, sl
 8001d42:	e68a      	b.n	8001a5a <__aeabi_dmul+0x82>
 8001d44:	4649      	mov	r1, r9
 8001d46:	2301      	movs	r3, #1
 8001d48:	4319      	orrs	r1, r3
 8001d4a:	4689      	mov	r9, r1
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	2001      	movs	r0, #1
 8001d50:	e683      	b.n	8001a5a <__aeabi_dmul+0x82>
 8001d52:	220c      	movs	r2, #12
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2303      	movs	r3, #3
 8001d58:	0005      	movs	r5, r0
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	469b      	mov	fp, r3
 8001d5e:	e65e      	b.n	8001a1e <__aeabi_dmul+0x46>
 8001d60:	2304      	movs	r3, #4
 8001d62:	4699      	mov	r9, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	469b      	mov	fp, r3
 8001d6e:	e656      	b.n	8001a1e <__aeabi_dmul+0x46>
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	fffffc01 	.word	0xfffffc01
 8001d78:	0800ad88 	.word	0x0800ad88
 8001d7c:	fffffc0d 	.word	0xfffffc0d
 8001d80:	000003ff 	.word	0x000003ff
 8001d84:	feffffff 	.word	0xfeffffff
 8001d88:	000007fe 	.word	0x000007fe
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2480      	movs	r4, #128	; 0x80
 8001d90:	2500      	movs	r5, #0
 8001d92:	4a44      	ldr	r2, [pc, #272]	; (8001ea4 <__aeabi_dmul+0x4cc>)
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	0324      	lsls	r4, r4, #12
 8001d98:	e68e      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	1a40      	subs	r0, r0, r1
 8001d9e:	2838      	cmp	r0, #56	; 0x38
 8001da0:	dd00      	ble.n	8001da4 <__aeabi_dmul+0x3cc>
 8001da2:	e686      	b.n	8001ab2 <__aeabi_dmul+0xda>
 8001da4:	281f      	cmp	r0, #31
 8001da6:	dd5b      	ble.n	8001e60 <__aeabi_dmul+0x488>
 8001da8:	221f      	movs	r2, #31
 8001daa:	0023      	movs	r3, r4
 8001dac:	4252      	negs	r2, r2
 8001dae:	1a51      	subs	r1, r2, r1
 8001db0:	40cb      	lsrs	r3, r1
 8001db2:	0019      	movs	r1, r3
 8001db4:	2820      	cmp	r0, #32
 8001db6:	d003      	beq.n	8001dc0 <__aeabi_dmul+0x3e8>
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <__aeabi_dmul+0x4d0>)
 8001dba:	4462      	add	r2, ip
 8001dbc:	4094      	lsls	r4, r2
 8001dbe:	4325      	orrs	r5, r4
 8001dc0:	1e6a      	subs	r2, r5, #1
 8001dc2:	4195      	sbcs	r5, r2
 8001dc4:	002a      	movs	r2, r5
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	2107      	movs	r1, #7
 8001dca:	000d      	movs	r5, r1
 8001dcc:	2400      	movs	r4, #0
 8001dce:	4015      	ands	r5, r2
 8001dd0:	4211      	tst	r1, r2
 8001dd2:	d05b      	beq.n	8001e8c <__aeabi_dmul+0x4b4>
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	2400      	movs	r4, #0
 8001dd8:	4011      	ands	r1, r2
 8001dda:	2904      	cmp	r1, #4
 8001ddc:	d053      	beq.n	8001e86 <__aeabi_dmul+0x4ae>
 8001dde:	1d11      	adds	r1, r2, #4
 8001de0:	4291      	cmp	r1, r2
 8001de2:	4192      	sbcs	r2, r2
 8001de4:	4252      	negs	r2, r2
 8001de6:	18a4      	adds	r4, r4, r2
 8001de8:	000a      	movs	r2, r1
 8001dea:	0223      	lsls	r3, r4, #8
 8001dec:	d54b      	bpl.n	8001e86 <__aeabi_dmul+0x4ae>
 8001dee:	2201      	movs	r2, #1
 8001df0:	2400      	movs	r4, #0
 8001df2:	2500      	movs	r5, #0
 8001df4:	e660      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	031b      	lsls	r3, r3, #12
 8001dfa:	421c      	tst	r4, r3
 8001dfc:	d009      	beq.n	8001e12 <__aeabi_dmul+0x43a>
 8001dfe:	421e      	tst	r6, r3
 8001e00:	d107      	bne.n	8001e12 <__aeabi_dmul+0x43a>
 8001e02:	4333      	orrs	r3, r6
 8001e04:	031c      	lsls	r4, r3, #12
 8001e06:	4643      	mov	r3, r8
 8001e08:	0015      	movs	r5, r2
 8001e0a:	0b24      	lsrs	r4, r4, #12
 8001e0c:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <__aeabi_dmul+0x4cc>)
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	e652      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	0312      	lsls	r2, r2, #12
 8001e16:	4314      	orrs	r4, r2
 8001e18:	0324      	lsls	r4, r4, #12
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <__aeabi_dmul+0x4cc>)
 8001e1c:	0b24      	lsrs	r4, r4, #12
 8001e1e:	9701      	str	r7, [sp, #4]
 8001e20:	e64a      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001e22:	f000 fd51 	bl	80028c8 <__clzsi2>
 8001e26:	0003      	movs	r3, r0
 8001e28:	001a      	movs	r2, r3
 8001e2a:	3215      	adds	r2, #21
 8001e2c:	3020      	adds	r0, #32
 8001e2e:	2a1c      	cmp	r2, #28
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_dmul+0x45c>
 8001e32:	e684      	b.n	8001b3e <__aeabi_dmul+0x166>
 8001e34:	4656      	mov	r6, sl
 8001e36:	3b08      	subs	r3, #8
 8001e38:	2200      	movs	r2, #0
 8001e3a:	409e      	lsls	r6, r3
 8001e3c:	e689      	b.n	8001b52 <__aeabi_dmul+0x17a>
 8001e3e:	f000 fd43 	bl	80028c8 <__clzsi2>
 8001e42:	0001      	movs	r1, r0
 8001e44:	0002      	movs	r2, r0
 8001e46:	3115      	adds	r1, #21
 8001e48:	3220      	adds	r2, #32
 8001e4a:	291c      	cmp	r1, #28
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_dmul+0x478>
 8001e4e:	e64e      	b.n	8001aee <__aeabi_dmul+0x116>
 8001e50:	0034      	movs	r4, r6
 8001e52:	3808      	subs	r0, #8
 8001e54:	2500      	movs	r5, #0
 8001e56:	4084      	lsls	r4, r0
 8001e58:	e653      	b.n	8001b02 <__aeabi_dmul+0x12a>
 8001e5a:	9b00      	ldr	r3, [sp, #0]
 8001e5c:	469c      	mov	ip, r3
 8001e5e:	e741      	b.n	8001ce4 <__aeabi_dmul+0x30c>
 8001e60:	4912      	ldr	r1, [pc, #72]	; (8001eac <__aeabi_dmul+0x4d4>)
 8001e62:	0022      	movs	r2, r4
 8001e64:	4461      	add	r1, ip
 8001e66:	002e      	movs	r6, r5
 8001e68:	408d      	lsls	r5, r1
 8001e6a:	408a      	lsls	r2, r1
 8001e6c:	40c6      	lsrs	r6, r0
 8001e6e:	1e69      	subs	r1, r5, #1
 8001e70:	418d      	sbcs	r5, r1
 8001e72:	4332      	orrs	r2, r6
 8001e74:	432a      	orrs	r2, r5
 8001e76:	40c4      	lsrs	r4, r0
 8001e78:	0753      	lsls	r3, r2, #29
 8001e7a:	d0b6      	beq.n	8001dea <__aeabi_dmul+0x412>
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	4011      	ands	r1, r2
 8001e80:	2904      	cmp	r1, #4
 8001e82:	d1ac      	bne.n	8001dde <__aeabi_dmul+0x406>
 8001e84:	e7b1      	b.n	8001dea <__aeabi_dmul+0x412>
 8001e86:	0765      	lsls	r5, r4, #29
 8001e88:	0264      	lsls	r4, r4, #9
 8001e8a:	0b24      	lsrs	r4, r4, #12
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	4315      	orrs	r5, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	e611      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	0312      	lsls	r2, r2, #12
 8001e98:	4314      	orrs	r4, r2
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	4a01      	ldr	r2, [pc, #4]	; (8001ea4 <__aeabi_dmul+0x4cc>)
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	e60a      	b.n	8001ab8 <__aeabi_dmul+0xe0>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	0000043e 	.word	0x0000043e
 8001eac:	0000041e 	.word	0x0000041e

08001eb0 <__aeabi_dsub>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	4657      	mov	r7, sl
 8001eb4:	464e      	mov	r6, r9
 8001eb6:	4645      	mov	r5, r8
 8001eb8:	46de      	mov	lr, fp
 8001eba:	0004      	movs	r4, r0
 8001ebc:	b5e0      	push	{r5, r6, r7, lr}
 8001ebe:	001f      	movs	r7, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	030b      	lsls	r3, r1, #12
 8001ec4:	0f62      	lsrs	r2, r4, #29
 8001ec6:	004e      	lsls	r6, r1, #1
 8001ec8:	0fcd      	lsrs	r5, r1, #31
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	0339      	lsls	r1, r7, #12
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	0a49      	lsrs	r1, r1, #9
 8001ed2:	00e2      	lsls	r2, r4, #3
 8001ed4:	0f44      	lsrs	r4, r0, #29
 8001ed6:	4321      	orrs	r1, r4
 8001ed8:	4cc2      	ldr	r4, [pc, #776]	; (80021e4 <__aeabi_dsub+0x334>)
 8001eda:	4691      	mov	r9, r2
 8001edc:	4692      	mov	sl, r2
 8001ede:	00c0      	lsls	r0, r0, #3
 8001ee0:	007a      	lsls	r2, r7, #1
 8001ee2:	4680      	mov	r8, r0
 8001ee4:	0d76      	lsrs	r6, r6, #21
 8001ee6:	0d52      	lsrs	r2, r2, #21
 8001ee8:	0fff      	lsrs	r7, r7, #31
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x40>
 8001eee:	e0b4      	b.n	800205a <__aeabi_dsub+0x1aa>
 8001ef0:	2401      	movs	r4, #1
 8001ef2:	4067      	eors	r7, r4
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	42bd      	cmp	r5, r7
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x4c>
 8001efa:	e088      	b.n	800200e <__aeabi_dsub+0x15e>
 8001efc:	1ab4      	subs	r4, r6, r2
 8001efe:	46a4      	mov	ip, r4
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	dc00      	bgt.n	8001f06 <__aeabi_dsub+0x56>
 8001f04:	e0b2      	b.n	800206c <__aeabi_dsub+0x1bc>
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x5c>
 8001f0a:	e0c5      	b.n	8002098 <__aeabi_dsub+0x1e8>
 8001f0c:	4ab5      	ldr	r2, [pc, #724]	; (80021e4 <__aeabi_dsub+0x334>)
 8001f0e:	4296      	cmp	r6, r2
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x64>
 8001f12:	e28b      	b.n	800242c <__aeabi_dsub+0x57c>
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	0412      	lsls	r2, r2, #16
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	4662      	mov	r2, ip
 8001f1c:	2a38      	cmp	r2, #56	; 0x38
 8001f1e:	dd00      	ble.n	8001f22 <__aeabi_dsub+0x72>
 8001f20:	e1a1      	b.n	8002266 <__aeabi_dsub+0x3b6>
 8001f22:	2a1f      	cmp	r2, #31
 8001f24:	dd00      	ble.n	8001f28 <__aeabi_dsub+0x78>
 8001f26:	e216      	b.n	8002356 <__aeabi_dsub+0x4a6>
 8001f28:	2720      	movs	r7, #32
 8001f2a:	000c      	movs	r4, r1
 8001f2c:	1abf      	subs	r7, r7, r2
 8001f2e:	40bc      	lsls	r4, r7
 8001f30:	0002      	movs	r2, r0
 8001f32:	46a0      	mov	r8, r4
 8001f34:	4664      	mov	r4, ip
 8001f36:	40b8      	lsls	r0, r7
 8001f38:	40e2      	lsrs	r2, r4
 8001f3a:	4644      	mov	r4, r8
 8001f3c:	4314      	orrs	r4, r2
 8001f3e:	0002      	movs	r2, r0
 8001f40:	1e50      	subs	r0, r2, #1
 8001f42:	4182      	sbcs	r2, r0
 8001f44:	4660      	mov	r0, ip
 8001f46:	40c1      	lsrs	r1, r0
 8001f48:	4322      	orrs	r2, r4
 8001f4a:	1a5b      	subs	r3, r3, r1
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	1a8c      	subs	r4, r1, r2
 8001f50:	45a1      	cmp	r9, r4
 8001f52:	4192      	sbcs	r2, r2
 8001f54:	4252      	negs	r2, r2
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	4698      	mov	r8, r3
 8001f5a:	4643      	mov	r3, r8
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	d400      	bmi.n	8001f62 <__aeabi_dsub+0xb2>
 8001f60:	e117      	b.n	8002192 <__aeabi_dsub+0x2e2>
 8001f62:	4643      	mov	r3, r8
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	4698      	mov	r8, r3
 8001f6a:	4643      	mov	r3, r8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0xc2>
 8001f70:	e16c      	b.n	800224c <__aeabi_dsub+0x39c>
 8001f72:	4640      	mov	r0, r8
 8001f74:	f000 fca8 	bl	80028c8 <__clzsi2>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	3a08      	subs	r2, #8
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	0020      	movs	r0, r4
 8001f80:	4643      	mov	r3, r8
 8001f82:	1a89      	subs	r1, r1, r2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	40c8      	lsrs	r0, r1
 8001f88:	4094      	lsls	r4, r2
 8001f8a:	4303      	orrs	r3, r0
 8001f8c:	4296      	cmp	r6, r2
 8001f8e:	dd00      	ble.n	8001f92 <__aeabi_dsub+0xe2>
 8001f90:	e157      	b.n	8002242 <__aeabi_dsub+0x392>
 8001f92:	1b96      	subs	r6, r2, r6
 8001f94:	1c71      	adds	r1, r6, #1
 8001f96:	291f      	cmp	r1, #31
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dsub+0xec>
 8001f9a:	e1cb      	b.n	8002334 <__aeabi_dsub+0x484>
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	0026      	movs	r6, r4
 8001fa2:	1a52      	subs	r2, r2, r1
 8001fa4:	4094      	lsls	r4, r2
 8001fa6:	4090      	lsls	r0, r2
 8001fa8:	40ce      	lsrs	r6, r1
 8001faa:	40cb      	lsrs	r3, r1
 8001fac:	1e62      	subs	r2, r4, #1
 8001fae:	4194      	sbcs	r4, r2
 8001fb0:	4330      	orrs	r0, r6
 8001fb2:	4698      	mov	r8, r3
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	4304      	orrs	r4, r0
 8001fb8:	0763      	lsls	r3, r4, #29
 8001fba:	d009      	beq.n	8001fd0 <__aeabi_dsub+0x120>
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	4023      	ands	r3, r4
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d005      	beq.n	8001fd0 <__aeabi_dsub+0x120>
 8001fc4:	1d23      	adds	r3, r4, #4
 8001fc6:	42a3      	cmp	r3, r4
 8001fc8:	41a4      	sbcs	r4, r4
 8001fca:	4264      	negs	r4, r4
 8001fcc:	44a0      	add	r8, r4
 8001fce:	001c      	movs	r4, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d400      	bmi.n	8001fd8 <__aeabi_dsub+0x128>
 8001fd6:	e0df      	b.n	8002198 <__aeabi_dsub+0x2e8>
 8001fd8:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <__aeabi_dsub+0x334>)
 8001fda:	3601      	adds	r6, #1
 8001fdc:	429e      	cmp	r6, r3
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x132>
 8001fe0:	e0fb      	b.n	80021da <__aeabi_dsub+0x32a>
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <__aeabi_dsub+0x338>)
 8001fe6:	08e4      	lsrs	r4, r4, #3
 8001fe8:	401a      	ands	r2, r3
 8001fea:	0013      	movs	r3, r2
 8001fec:	0571      	lsls	r1, r6, #21
 8001fee:	0752      	lsls	r2, r2, #29
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	4322      	orrs	r2, r4
 8001ff4:	0b1b      	lsrs	r3, r3, #12
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0509      	lsls	r1, r1, #20
 8001ffa:	07ed      	lsls	r5, r5, #31
 8001ffc:	4319      	orrs	r1, r3
 8001ffe:	4329      	orrs	r1, r5
 8002000:	0010      	movs	r0, r2
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800200e:	1ab4      	subs	r4, r6, r2
 8002010:	46a4      	mov	ip, r4
 8002012:	2c00      	cmp	r4, #0
 8002014:	dd58      	ble.n	80020c8 <__aeabi_dsub+0x218>
 8002016:	2a00      	cmp	r2, #0
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x16c>
 800201a:	e09e      	b.n	800215a <__aeabi_dsub+0x2aa>
 800201c:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <__aeabi_dsub+0x334>)
 800201e:	4296      	cmp	r6, r2
 8002020:	d100      	bne.n	8002024 <__aeabi_dsub+0x174>
 8002022:	e13b      	b.n	800229c <__aeabi_dsub+0x3ec>
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	0412      	lsls	r2, r2, #16
 8002028:	4311      	orrs	r1, r2
 800202a:	4662      	mov	r2, ip
 800202c:	2a38      	cmp	r2, #56	; 0x38
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x182>
 8002030:	e0c1      	b.n	80021b6 <__aeabi_dsub+0x306>
 8002032:	2a1f      	cmp	r2, #31
 8002034:	dc00      	bgt.n	8002038 <__aeabi_dsub+0x188>
 8002036:	e1bb      	b.n	80023b0 <__aeabi_dsub+0x500>
 8002038:	000c      	movs	r4, r1
 800203a:	3a20      	subs	r2, #32
 800203c:	40d4      	lsrs	r4, r2
 800203e:	0022      	movs	r2, r4
 8002040:	4664      	mov	r4, ip
 8002042:	2c20      	cmp	r4, #32
 8002044:	d004      	beq.n	8002050 <__aeabi_dsub+0x1a0>
 8002046:	2740      	movs	r7, #64	; 0x40
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	40b9      	lsls	r1, r7
 800204c:	4308      	orrs	r0, r1
 800204e:	4680      	mov	r8, r0
 8002050:	4644      	mov	r4, r8
 8002052:	1e61      	subs	r1, r4, #1
 8002054:	418c      	sbcs	r4, r1
 8002056:	4314      	orrs	r4, r2
 8002058:	e0b1      	b.n	80021be <__aeabi_dsub+0x30e>
 800205a:	000c      	movs	r4, r1
 800205c:	4304      	orrs	r4, r0
 800205e:	d02a      	beq.n	80020b6 <__aeabi_dsub+0x206>
 8002060:	46bb      	mov	fp, r7
 8002062:	42bd      	cmp	r5, r7
 8002064:	d02d      	beq.n	80020c2 <__aeabi_dsub+0x212>
 8002066:	4c61      	ldr	r4, [pc, #388]	; (80021ec <__aeabi_dsub+0x33c>)
 8002068:	46a4      	mov	ip, r4
 800206a:	44b4      	add	ip, r6
 800206c:	4664      	mov	r4, ip
 800206e:	2c00      	cmp	r4, #0
 8002070:	d05c      	beq.n	800212c <__aeabi_dsub+0x27c>
 8002072:	1b94      	subs	r4, r2, r6
 8002074:	46a4      	mov	ip, r4
 8002076:	2e00      	cmp	r6, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x1cc>
 800207a:	e115      	b.n	80022a8 <__aeabi_dsub+0x3f8>
 800207c:	464d      	mov	r5, r9
 800207e:	431d      	orrs	r5, r3
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x1d4>
 8002082:	e1c3      	b.n	800240c <__aeabi_dsub+0x55c>
 8002084:	1e65      	subs	r5, r4, #1
 8002086:	2c01      	cmp	r4, #1
 8002088:	d100      	bne.n	800208c <__aeabi_dsub+0x1dc>
 800208a:	e20c      	b.n	80024a6 <__aeabi_dsub+0x5f6>
 800208c:	4e55      	ldr	r6, [pc, #340]	; (80021e4 <__aeabi_dsub+0x334>)
 800208e:	42b4      	cmp	r4, r6
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x1e4>
 8002092:	e1f8      	b.n	8002486 <__aeabi_dsub+0x5d6>
 8002094:	46ac      	mov	ip, r5
 8002096:	e10e      	b.n	80022b6 <__aeabi_dsub+0x406>
 8002098:	000a      	movs	r2, r1
 800209a:	4302      	orrs	r2, r0
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x1f0>
 800209e:	e136      	b.n	800230e <__aeabi_dsub+0x45e>
 80020a0:	0022      	movs	r2, r4
 80020a2:	3a01      	subs	r2, #1
 80020a4:	2c01      	cmp	r4, #1
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x1fa>
 80020a8:	e1c6      	b.n	8002438 <__aeabi_dsub+0x588>
 80020aa:	4c4e      	ldr	r4, [pc, #312]	; (80021e4 <__aeabi_dsub+0x334>)
 80020ac:	45a4      	cmp	ip, r4
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x202>
 80020b0:	e0f4      	b.n	800229c <__aeabi_dsub+0x3ec>
 80020b2:	4694      	mov	ip, r2
 80020b4:	e731      	b.n	8001f1a <__aeabi_dsub+0x6a>
 80020b6:	2401      	movs	r4, #1
 80020b8:	4067      	eors	r7, r4
 80020ba:	46bb      	mov	fp, r7
 80020bc:	42bd      	cmp	r5, r7
 80020be:	d000      	beq.n	80020c2 <__aeabi_dsub+0x212>
 80020c0:	e71c      	b.n	8001efc <__aeabi_dsub+0x4c>
 80020c2:	4c4a      	ldr	r4, [pc, #296]	; (80021ec <__aeabi_dsub+0x33c>)
 80020c4:	46a4      	mov	ip, r4
 80020c6:	44b4      	add	ip, r6
 80020c8:	4664      	mov	r4, ip
 80020ca:	2c00      	cmp	r4, #0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x220>
 80020ce:	e0cf      	b.n	8002270 <__aeabi_dsub+0x3c0>
 80020d0:	1b94      	subs	r4, r2, r6
 80020d2:	46a4      	mov	ip, r4
 80020d4:	2e00      	cmp	r6, #0
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x22a>
 80020d8:	e15c      	b.n	8002394 <__aeabi_dsub+0x4e4>
 80020da:	4e42      	ldr	r6, [pc, #264]	; (80021e4 <__aeabi_dsub+0x334>)
 80020dc:	42b2      	cmp	r2, r6
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x232>
 80020e0:	e1ec      	b.n	80024bc <__aeabi_dsub+0x60c>
 80020e2:	2680      	movs	r6, #128	; 0x80
 80020e4:	0436      	lsls	r6, r6, #16
 80020e6:	4333      	orrs	r3, r6
 80020e8:	4664      	mov	r4, ip
 80020ea:	2c38      	cmp	r4, #56	; 0x38
 80020ec:	dd00      	ble.n	80020f0 <__aeabi_dsub+0x240>
 80020ee:	e1b3      	b.n	8002458 <__aeabi_dsub+0x5a8>
 80020f0:	2c1f      	cmp	r4, #31
 80020f2:	dd00      	ble.n	80020f6 <__aeabi_dsub+0x246>
 80020f4:	e238      	b.n	8002568 <__aeabi_dsub+0x6b8>
 80020f6:	2620      	movs	r6, #32
 80020f8:	1b36      	subs	r6, r6, r4
 80020fa:	001c      	movs	r4, r3
 80020fc:	40b4      	lsls	r4, r6
 80020fe:	464f      	mov	r7, r9
 8002100:	46a0      	mov	r8, r4
 8002102:	4664      	mov	r4, ip
 8002104:	40e7      	lsrs	r7, r4
 8002106:	4644      	mov	r4, r8
 8002108:	433c      	orrs	r4, r7
 800210a:	464f      	mov	r7, r9
 800210c:	40b7      	lsls	r7, r6
 800210e:	003e      	movs	r6, r7
 8002110:	1e77      	subs	r7, r6, #1
 8002112:	41be      	sbcs	r6, r7
 8002114:	4334      	orrs	r4, r6
 8002116:	4666      	mov	r6, ip
 8002118:	40f3      	lsrs	r3, r6
 800211a:	18c9      	adds	r1, r1, r3
 800211c:	1824      	adds	r4, r4, r0
 800211e:	4284      	cmp	r4, r0
 8002120:	419b      	sbcs	r3, r3
 8002122:	425b      	negs	r3, r3
 8002124:	4698      	mov	r8, r3
 8002126:	0016      	movs	r6, r2
 8002128:	4488      	add	r8, r1
 800212a:	e04e      	b.n	80021ca <__aeabi_dsub+0x31a>
 800212c:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <__aeabi_dsub+0x340>)
 800212e:	1c74      	adds	r4, r6, #1
 8002130:	4214      	tst	r4, r2
 8002132:	d000      	beq.n	8002136 <__aeabi_dsub+0x286>
 8002134:	e0d6      	b.n	80022e4 <__aeabi_dsub+0x434>
 8002136:	464a      	mov	r2, r9
 8002138:	431a      	orrs	r2, r3
 800213a:	2e00      	cmp	r6, #0
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x290>
 800213e:	e15b      	b.n	80023f8 <__aeabi_dsub+0x548>
 8002140:	2a00      	cmp	r2, #0
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x296>
 8002144:	e1a5      	b.n	8002492 <__aeabi_dsub+0x5e2>
 8002146:	000a      	movs	r2, r1
 8002148:	4302      	orrs	r2, r0
 800214a:	d000      	beq.n	800214e <__aeabi_dsub+0x29e>
 800214c:	e1bb      	b.n	80024c6 <__aeabi_dsub+0x616>
 800214e:	464a      	mov	r2, r9
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	430a      	orrs	r2, r1
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	e027      	b.n	80021aa <__aeabi_dsub+0x2fa>
 800215a:	000a      	movs	r2, r1
 800215c:	4302      	orrs	r2, r0
 800215e:	d100      	bne.n	8002162 <__aeabi_dsub+0x2b2>
 8002160:	e174      	b.n	800244c <__aeabi_dsub+0x59c>
 8002162:	0022      	movs	r2, r4
 8002164:	3a01      	subs	r2, #1
 8002166:	2c01      	cmp	r4, #1
 8002168:	d005      	beq.n	8002176 <__aeabi_dsub+0x2c6>
 800216a:	4c1e      	ldr	r4, [pc, #120]	; (80021e4 <__aeabi_dsub+0x334>)
 800216c:	45a4      	cmp	ip, r4
 800216e:	d100      	bne.n	8002172 <__aeabi_dsub+0x2c2>
 8002170:	e094      	b.n	800229c <__aeabi_dsub+0x3ec>
 8002172:	4694      	mov	ip, r2
 8002174:	e759      	b.n	800202a <__aeabi_dsub+0x17a>
 8002176:	4448      	add	r0, r9
 8002178:	4548      	cmp	r0, r9
 800217a:	4192      	sbcs	r2, r2
 800217c:	185b      	adds	r3, r3, r1
 800217e:	4698      	mov	r8, r3
 8002180:	0004      	movs	r4, r0
 8002182:	4252      	negs	r2, r2
 8002184:	4490      	add	r8, r2
 8002186:	4643      	mov	r3, r8
 8002188:	2602      	movs	r6, #2
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	d500      	bpl.n	8002190 <__aeabi_dsub+0x2e0>
 800218e:	e0c4      	b.n	800231a <__aeabi_dsub+0x46a>
 8002190:	3e01      	subs	r6, #1
 8002192:	0763      	lsls	r3, r4, #29
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x2e8>
 8002196:	e711      	b.n	8001fbc <__aeabi_dsub+0x10c>
 8002198:	4643      	mov	r3, r8
 800219a:	46b4      	mov	ip, r6
 800219c:	0759      	lsls	r1, r3, #29
 800219e:	08e2      	lsrs	r2, r4, #3
 80021a0:	430a      	orrs	r2, r1
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	490f      	ldr	r1, [pc, #60]	; (80021e4 <__aeabi_dsub+0x334>)
 80021a6:	458c      	cmp	ip, r1
 80021a8:	d040      	beq.n	800222c <__aeabi_dsub+0x37c>
 80021aa:	4661      	mov	r1, ip
 80021ac:	031b      	lsls	r3, r3, #12
 80021ae:	0549      	lsls	r1, r1, #21
 80021b0:	0b1b      	lsrs	r3, r3, #12
 80021b2:	0d49      	lsrs	r1, r1, #21
 80021b4:	e720      	b.n	8001ff8 <__aeabi_dsub+0x148>
 80021b6:	4301      	orrs	r1, r0
 80021b8:	000c      	movs	r4, r1
 80021ba:	1e61      	subs	r1, r4, #1
 80021bc:	418c      	sbcs	r4, r1
 80021be:	444c      	add	r4, r9
 80021c0:	454c      	cmp	r4, r9
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	4252      	negs	r2, r2
 80021c6:	4690      	mov	r8, r2
 80021c8:	4498      	add	r8, r3
 80021ca:	4643      	mov	r3, r8
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	d5e0      	bpl.n	8002192 <__aeabi_dsub+0x2e2>
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__aeabi_dsub+0x334>)
 80021d2:	3601      	adds	r6, #1
 80021d4:	429e      	cmp	r6, r3
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x32a>
 80021d8:	e09f      	b.n	800231a <__aeabi_dsub+0x46a>
 80021da:	0031      	movs	r1, r6
 80021dc:	2300      	movs	r3, #0
 80021de:	2200      	movs	r2, #0
 80021e0:	e70a      	b.n	8001ff8 <__aeabi_dsub+0x148>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff
 80021e8:	ff7fffff 	.word	0xff7fffff
 80021ec:	fffff801 	.word	0xfffff801
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x34a>
 80021f8:	e160      	b.n	80024bc <__aeabi_dsub+0x60c>
 80021fa:	000a      	movs	r2, r1
 80021fc:	4302      	orrs	r2, r0
 80021fe:	d04d      	beq.n	800229c <__aeabi_dsub+0x3ec>
 8002200:	464a      	mov	r2, r9
 8002202:	075c      	lsls	r4, r3, #29
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4322      	orrs	r2, r4
 8002208:	2480      	movs	r4, #128	; 0x80
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	0324      	lsls	r4, r4, #12
 800220e:	4223      	tst	r3, r4
 8002210:	d007      	beq.n	8002222 <__aeabi_dsub+0x372>
 8002212:	08ce      	lsrs	r6, r1, #3
 8002214:	4226      	tst	r6, r4
 8002216:	d104      	bne.n	8002222 <__aeabi_dsub+0x372>
 8002218:	465d      	mov	r5, fp
 800221a:	0033      	movs	r3, r6
 800221c:	08c2      	lsrs	r2, r0, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	430a      	orrs	r2, r1
 8002222:	0f51      	lsrs	r1, r2, #29
 8002224:	00d2      	lsls	r2, r2, #3
 8002226:	08d2      	lsrs	r2, r2, #3
 8002228:	0749      	lsls	r1, r1, #29
 800222a:	430a      	orrs	r2, r1
 800222c:	0011      	movs	r1, r2
 800222e:	4319      	orrs	r1, r3
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x384>
 8002232:	e1c8      	b.n	80025c6 <__aeabi_dsub+0x716>
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0309      	lsls	r1, r1, #12
 8002238:	430b      	orrs	r3, r1
 800223a:	031b      	lsls	r3, r3, #12
 800223c:	49d5      	ldr	r1, [pc, #852]	; (8002594 <__aeabi_dsub+0x6e4>)
 800223e:	0b1b      	lsrs	r3, r3, #12
 8002240:	e6da      	b.n	8001ff8 <__aeabi_dsub+0x148>
 8002242:	49d5      	ldr	r1, [pc, #852]	; (8002598 <__aeabi_dsub+0x6e8>)
 8002244:	1ab6      	subs	r6, r6, r2
 8002246:	400b      	ands	r3, r1
 8002248:	4698      	mov	r8, r3
 800224a:	e6b5      	b.n	8001fb8 <__aeabi_dsub+0x108>
 800224c:	0020      	movs	r0, r4
 800224e:	f000 fb3b 	bl	80028c8 <__clzsi2>
 8002252:	0002      	movs	r2, r0
 8002254:	3218      	adds	r2, #24
 8002256:	2a1f      	cmp	r2, #31
 8002258:	dc00      	bgt.n	800225c <__aeabi_dsub+0x3ac>
 800225a:	e68f      	b.n	8001f7c <__aeabi_dsub+0xcc>
 800225c:	0023      	movs	r3, r4
 800225e:	3808      	subs	r0, #8
 8002260:	4083      	lsls	r3, r0
 8002262:	2400      	movs	r4, #0
 8002264:	e692      	b.n	8001f8c <__aeabi_dsub+0xdc>
 8002266:	4308      	orrs	r0, r1
 8002268:	0002      	movs	r2, r0
 800226a:	1e50      	subs	r0, r2, #1
 800226c:	4182      	sbcs	r2, r0
 800226e:	e66d      	b.n	8001f4c <__aeabi_dsub+0x9c>
 8002270:	4cca      	ldr	r4, [pc, #808]	; (800259c <__aeabi_dsub+0x6ec>)
 8002272:	1c72      	adds	r2, r6, #1
 8002274:	4222      	tst	r2, r4
 8002276:	d000      	beq.n	800227a <__aeabi_dsub+0x3ca>
 8002278:	e0ad      	b.n	80023d6 <__aeabi_dsub+0x526>
 800227a:	464a      	mov	r2, r9
 800227c:	431a      	orrs	r2, r3
 800227e:	2e00      	cmp	r6, #0
 8002280:	d1b8      	bne.n	80021f4 <__aeabi_dsub+0x344>
 8002282:	2a00      	cmp	r2, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x3d8>
 8002286:	e158      	b.n	800253a <__aeabi_dsub+0x68a>
 8002288:	000a      	movs	r2, r1
 800228a:	4302      	orrs	r2, r0
 800228c:	d000      	beq.n	8002290 <__aeabi_dsub+0x3e0>
 800228e:	e159      	b.n	8002544 <__aeabi_dsub+0x694>
 8002290:	464a      	mov	r2, r9
 8002292:	0759      	lsls	r1, r3, #29
 8002294:	08d2      	lsrs	r2, r2, #3
 8002296:	430a      	orrs	r2, r1
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	e786      	b.n	80021aa <__aeabi_dsub+0x2fa>
 800229c:	464a      	mov	r2, r9
 800229e:	0759      	lsls	r1, r3, #29
 80022a0:	08d2      	lsrs	r2, r2, #3
 80022a2:	430a      	orrs	r2, r1
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	e7c1      	b.n	800222c <__aeabi_dsub+0x37c>
 80022a8:	4dba      	ldr	r5, [pc, #744]	; (8002594 <__aeabi_dsub+0x6e4>)
 80022aa:	42aa      	cmp	r2, r5
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x400>
 80022ae:	e11e      	b.n	80024ee <__aeabi_dsub+0x63e>
 80022b0:	2580      	movs	r5, #128	; 0x80
 80022b2:	042d      	lsls	r5, r5, #16
 80022b4:	432b      	orrs	r3, r5
 80022b6:	4664      	mov	r4, ip
 80022b8:	2c38      	cmp	r4, #56	; 0x38
 80022ba:	dc5d      	bgt.n	8002378 <__aeabi_dsub+0x4c8>
 80022bc:	2c1f      	cmp	r4, #31
 80022be:	dd00      	ble.n	80022c2 <__aeabi_dsub+0x412>
 80022c0:	e0d0      	b.n	8002464 <__aeabi_dsub+0x5b4>
 80022c2:	2520      	movs	r5, #32
 80022c4:	4667      	mov	r7, ip
 80022c6:	1b2d      	subs	r5, r5, r4
 80022c8:	464e      	mov	r6, r9
 80022ca:	001c      	movs	r4, r3
 80022cc:	40fe      	lsrs	r6, r7
 80022ce:	40ac      	lsls	r4, r5
 80022d0:	4334      	orrs	r4, r6
 80022d2:	464e      	mov	r6, r9
 80022d4:	40ae      	lsls	r6, r5
 80022d6:	0035      	movs	r5, r6
 80022d8:	40fb      	lsrs	r3, r7
 80022da:	1e6e      	subs	r6, r5, #1
 80022dc:	41b5      	sbcs	r5, r6
 80022de:	1ac9      	subs	r1, r1, r3
 80022e0:	432c      	orrs	r4, r5
 80022e2:	e04e      	b.n	8002382 <__aeabi_dsub+0x4d2>
 80022e4:	464a      	mov	r2, r9
 80022e6:	1a14      	subs	r4, r2, r0
 80022e8:	45a1      	cmp	r9, r4
 80022ea:	4192      	sbcs	r2, r2
 80022ec:	4252      	negs	r2, r2
 80022ee:	4690      	mov	r8, r2
 80022f0:	1a5f      	subs	r7, r3, r1
 80022f2:	003a      	movs	r2, r7
 80022f4:	4647      	mov	r7, r8
 80022f6:	1bd2      	subs	r2, r2, r7
 80022f8:	4690      	mov	r8, r2
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	d500      	bpl.n	8002300 <__aeabi_dsub+0x450>
 80022fe:	e08b      	b.n	8002418 <__aeabi_dsub+0x568>
 8002300:	4642      	mov	r2, r8
 8002302:	4322      	orrs	r2, r4
 8002304:	d000      	beq.n	8002308 <__aeabi_dsub+0x458>
 8002306:	e630      	b.n	8001f6a <__aeabi_dsub+0xba>
 8002308:	2300      	movs	r3, #0
 800230a:	2500      	movs	r5, #0
 800230c:	e74d      	b.n	80021aa <__aeabi_dsub+0x2fa>
 800230e:	464a      	mov	r2, r9
 8002310:	0759      	lsls	r1, r3, #29
 8002312:	08d2      	lsrs	r2, r2, #3
 8002314:	430a      	orrs	r2, r1
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	e744      	b.n	80021a4 <__aeabi_dsub+0x2f4>
 800231a:	4642      	mov	r2, r8
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <__aeabi_dsub+0x6e8>)
 800231e:	0861      	lsrs	r1, r4, #1
 8002320:	401a      	ands	r2, r3
 8002322:	0013      	movs	r3, r2
 8002324:	2201      	movs	r2, #1
 8002326:	4014      	ands	r4, r2
 8002328:	430c      	orrs	r4, r1
 800232a:	07da      	lsls	r2, r3, #31
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	4698      	mov	r8, r3
 8002330:	4314      	orrs	r4, r2
 8002332:	e641      	b.n	8001fb8 <__aeabi_dsub+0x108>
 8002334:	001a      	movs	r2, r3
 8002336:	3e1f      	subs	r6, #31
 8002338:	40f2      	lsrs	r2, r6
 800233a:	0016      	movs	r6, r2
 800233c:	2920      	cmp	r1, #32
 800233e:	d003      	beq.n	8002348 <__aeabi_dsub+0x498>
 8002340:	2240      	movs	r2, #64	; 0x40
 8002342:	1a51      	subs	r1, r2, r1
 8002344:	408b      	lsls	r3, r1
 8002346:	431c      	orrs	r4, r3
 8002348:	1e62      	subs	r2, r4, #1
 800234a:	4194      	sbcs	r4, r2
 800234c:	2300      	movs	r3, #0
 800234e:	4334      	orrs	r4, r6
 8002350:	4698      	mov	r8, r3
 8002352:	2600      	movs	r6, #0
 8002354:	e71d      	b.n	8002192 <__aeabi_dsub+0x2e2>
 8002356:	000c      	movs	r4, r1
 8002358:	3a20      	subs	r2, #32
 800235a:	40d4      	lsrs	r4, r2
 800235c:	0022      	movs	r2, r4
 800235e:	4664      	mov	r4, ip
 8002360:	2c20      	cmp	r4, #32
 8002362:	d004      	beq.n	800236e <__aeabi_dsub+0x4be>
 8002364:	2740      	movs	r7, #64	; 0x40
 8002366:	1b3f      	subs	r7, r7, r4
 8002368:	40b9      	lsls	r1, r7
 800236a:	4308      	orrs	r0, r1
 800236c:	4680      	mov	r8, r0
 800236e:	4644      	mov	r4, r8
 8002370:	1e61      	subs	r1, r4, #1
 8002372:	418c      	sbcs	r4, r1
 8002374:	4322      	orrs	r2, r4
 8002376:	e5e9      	b.n	8001f4c <__aeabi_dsub+0x9c>
 8002378:	464c      	mov	r4, r9
 800237a:	4323      	orrs	r3, r4
 800237c:	001c      	movs	r4, r3
 800237e:	1e63      	subs	r3, r4, #1
 8002380:	419c      	sbcs	r4, r3
 8002382:	1b04      	subs	r4, r0, r4
 8002384:	42a0      	cmp	r0, r4
 8002386:	419b      	sbcs	r3, r3
 8002388:	425b      	negs	r3, r3
 800238a:	1acb      	subs	r3, r1, r3
 800238c:	4698      	mov	r8, r3
 800238e:	465d      	mov	r5, fp
 8002390:	0016      	movs	r6, r2
 8002392:	e5e2      	b.n	8001f5a <__aeabi_dsub+0xaa>
 8002394:	464e      	mov	r6, r9
 8002396:	431e      	orrs	r6, r3
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x4ec>
 800239a:	e0ae      	b.n	80024fa <__aeabi_dsub+0x64a>
 800239c:	1e66      	subs	r6, r4, #1
 800239e:	2c01      	cmp	r4, #1
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x4f4>
 80023a2:	e0fd      	b.n	80025a0 <__aeabi_dsub+0x6f0>
 80023a4:	4f7b      	ldr	r7, [pc, #492]	; (8002594 <__aeabi_dsub+0x6e4>)
 80023a6:	42bc      	cmp	r4, r7
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x4fc>
 80023aa:	e107      	b.n	80025bc <__aeabi_dsub+0x70c>
 80023ac:	46b4      	mov	ip, r6
 80023ae:	e69b      	b.n	80020e8 <__aeabi_dsub+0x238>
 80023b0:	4664      	mov	r4, ip
 80023b2:	2220      	movs	r2, #32
 80023b4:	1b12      	subs	r2, r2, r4
 80023b6:	000c      	movs	r4, r1
 80023b8:	4094      	lsls	r4, r2
 80023ba:	0007      	movs	r7, r0
 80023bc:	4090      	lsls	r0, r2
 80023be:	46a0      	mov	r8, r4
 80023c0:	4664      	mov	r4, ip
 80023c2:	1e42      	subs	r2, r0, #1
 80023c4:	4190      	sbcs	r0, r2
 80023c6:	4662      	mov	r2, ip
 80023c8:	40e7      	lsrs	r7, r4
 80023ca:	4644      	mov	r4, r8
 80023cc:	40d1      	lsrs	r1, r2
 80023ce:	433c      	orrs	r4, r7
 80023d0:	4304      	orrs	r4, r0
 80023d2:	185b      	adds	r3, r3, r1
 80023d4:	e6f3      	b.n	80021be <__aeabi_dsub+0x30e>
 80023d6:	4c6f      	ldr	r4, [pc, #444]	; (8002594 <__aeabi_dsub+0x6e4>)
 80023d8:	42a2      	cmp	r2, r4
 80023da:	d100      	bne.n	80023de <__aeabi_dsub+0x52e>
 80023dc:	e0d5      	b.n	800258a <__aeabi_dsub+0x6da>
 80023de:	4448      	add	r0, r9
 80023e0:	185b      	adds	r3, r3, r1
 80023e2:	4548      	cmp	r0, r9
 80023e4:	4189      	sbcs	r1, r1
 80023e6:	4249      	negs	r1, r1
 80023e8:	185b      	adds	r3, r3, r1
 80023ea:	07dc      	lsls	r4, r3, #31
 80023ec:	0840      	lsrs	r0, r0, #1
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	4698      	mov	r8, r3
 80023f2:	0016      	movs	r6, r2
 80023f4:	4304      	orrs	r4, r0
 80023f6:	e6cc      	b.n	8002192 <__aeabi_dsub+0x2e2>
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x54e>
 80023fc:	e082      	b.n	8002504 <__aeabi_dsub+0x654>
 80023fe:	000a      	movs	r2, r1
 8002400:	4302      	orrs	r2, r0
 8002402:	d140      	bne.n	8002486 <__aeabi_dsub+0x5d6>
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	2500      	movs	r5, #0
 8002408:	031b      	lsls	r3, r3, #12
 800240a:	e713      	b.n	8002234 <__aeabi_dsub+0x384>
 800240c:	074b      	lsls	r3, r1, #29
 800240e:	08c2      	lsrs	r2, r0, #3
 8002410:	431a      	orrs	r2, r3
 8002412:	465d      	mov	r5, fp
 8002414:	08cb      	lsrs	r3, r1, #3
 8002416:	e6c5      	b.n	80021a4 <__aeabi_dsub+0x2f4>
 8002418:	464a      	mov	r2, r9
 800241a:	1a84      	subs	r4, r0, r2
 800241c:	42a0      	cmp	r0, r4
 800241e:	4192      	sbcs	r2, r2
 8002420:	1acb      	subs	r3, r1, r3
 8002422:	4252      	negs	r2, r2
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	4698      	mov	r8, r3
 8002428:	465d      	mov	r5, fp
 800242a:	e59e      	b.n	8001f6a <__aeabi_dsub+0xba>
 800242c:	464a      	mov	r2, r9
 800242e:	0759      	lsls	r1, r3, #29
 8002430:	08d2      	lsrs	r2, r2, #3
 8002432:	430a      	orrs	r2, r1
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	e6f9      	b.n	800222c <__aeabi_dsub+0x37c>
 8002438:	464a      	mov	r2, r9
 800243a:	1a14      	subs	r4, r2, r0
 800243c:	45a1      	cmp	r9, r4
 800243e:	4192      	sbcs	r2, r2
 8002440:	1a5b      	subs	r3, r3, r1
 8002442:	4252      	negs	r2, r2
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	4698      	mov	r8, r3
 8002448:	2601      	movs	r6, #1
 800244a:	e586      	b.n	8001f5a <__aeabi_dsub+0xaa>
 800244c:	464a      	mov	r2, r9
 800244e:	0759      	lsls	r1, r3, #29
 8002450:	08d2      	lsrs	r2, r2, #3
 8002452:	430a      	orrs	r2, r1
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	e6a5      	b.n	80021a4 <__aeabi_dsub+0x2f4>
 8002458:	464c      	mov	r4, r9
 800245a:	4323      	orrs	r3, r4
 800245c:	001c      	movs	r4, r3
 800245e:	1e63      	subs	r3, r4, #1
 8002460:	419c      	sbcs	r4, r3
 8002462:	e65b      	b.n	800211c <__aeabi_dsub+0x26c>
 8002464:	4665      	mov	r5, ip
 8002466:	001e      	movs	r6, r3
 8002468:	3d20      	subs	r5, #32
 800246a:	40ee      	lsrs	r6, r5
 800246c:	2c20      	cmp	r4, #32
 800246e:	d005      	beq.n	800247c <__aeabi_dsub+0x5cc>
 8002470:	2540      	movs	r5, #64	; 0x40
 8002472:	1b2d      	subs	r5, r5, r4
 8002474:	40ab      	lsls	r3, r5
 8002476:	464c      	mov	r4, r9
 8002478:	431c      	orrs	r4, r3
 800247a:	46a2      	mov	sl, r4
 800247c:	4654      	mov	r4, sl
 800247e:	1e63      	subs	r3, r4, #1
 8002480:	419c      	sbcs	r4, r3
 8002482:	4334      	orrs	r4, r6
 8002484:	e77d      	b.n	8002382 <__aeabi_dsub+0x4d2>
 8002486:	074b      	lsls	r3, r1, #29
 8002488:	08c2      	lsrs	r2, r0, #3
 800248a:	431a      	orrs	r2, r3
 800248c:	465d      	mov	r5, fp
 800248e:	08cb      	lsrs	r3, r1, #3
 8002490:	e6cc      	b.n	800222c <__aeabi_dsub+0x37c>
 8002492:	000a      	movs	r2, r1
 8002494:	4302      	orrs	r2, r0
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x5ea>
 8002498:	e736      	b.n	8002308 <__aeabi_dsub+0x458>
 800249a:	074b      	lsls	r3, r1, #29
 800249c:	08c2      	lsrs	r2, r0, #3
 800249e:	431a      	orrs	r2, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	08cb      	lsrs	r3, r1, #3
 80024a4:	e681      	b.n	80021aa <__aeabi_dsub+0x2fa>
 80024a6:	464a      	mov	r2, r9
 80024a8:	1a84      	subs	r4, r0, r2
 80024aa:	42a0      	cmp	r0, r4
 80024ac:	4192      	sbcs	r2, r2
 80024ae:	1acb      	subs	r3, r1, r3
 80024b0:	4252      	negs	r2, r2
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	4698      	mov	r8, r3
 80024b6:	465d      	mov	r5, fp
 80024b8:	2601      	movs	r6, #1
 80024ba:	e54e      	b.n	8001f5a <__aeabi_dsub+0xaa>
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	08c2      	lsrs	r2, r0, #3
 80024c0:	431a      	orrs	r2, r3
 80024c2:	08cb      	lsrs	r3, r1, #3
 80024c4:	e6b2      	b.n	800222c <__aeabi_dsub+0x37c>
 80024c6:	464a      	mov	r2, r9
 80024c8:	1a14      	subs	r4, r2, r0
 80024ca:	45a1      	cmp	r9, r4
 80024cc:	4192      	sbcs	r2, r2
 80024ce:	1a5f      	subs	r7, r3, r1
 80024d0:	4252      	negs	r2, r2
 80024d2:	1aba      	subs	r2, r7, r2
 80024d4:	4690      	mov	r8, r2
 80024d6:	0212      	lsls	r2, r2, #8
 80024d8:	d56b      	bpl.n	80025b2 <__aeabi_dsub+0x702>
 80024da:	464a      	mov	r2, r9
 80024dc:	1a84      	subs	r4, r0, r2
 80024de:	42a0      	cmp	r0, r4
 80024e0:	4192      	sbcs	r2, r2
 80024e2:	1acb      	subs	r3, r1, r3
 80024e4:	4252      	negs	r2, r2
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	4698      	mov	r8, r3
 80024ea:	465d      	mov	r5, fp
 80024ec:	e564      	b.n	8001fb8 <__aeabi_dsub+0x108>
 80024ee:	074b      	lsls	r3, r1, #29
 80024f0:	08c2      	lsrs	r2, r0, #3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	465d      	mov	r5, fp
 80024f6:	08cb      	lsrs	r3, r1, #3
 80024f8:	e698      	b.n	800222c <__aeabi_dsub+0x37c>
 80024fa:	074b      	lsls	r3, r1, #29
 80024fc:	08c2      	lsrs	r2, r0, #3
 80024fe:	431a      	orrs	r2, r3
 8002500:	08cb      	lsrs	r3, r1, #3
 8002502:	e64f      	b.n	80021a4 <__aeabi_dsub+0x2f4>
 8002504:	000a      	movs	r2, r1
 8002506:	4302      	orrs	r2, r0
 8002508:	d090      	beq.n	800242c <__aeabi_dsub+0x57c>
 800250a:	464a      	mov	r2, r9
 800250c:	075c      	lsls	r4, r3, #29
 800250e:	08d2      	lsrs	r2, r2, #3
 8002510:	4314      	orrs	r4, r2
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	0312      	lsls	r2, r2, #12
 8002518:	4213      	tst	r3, r2
 800251a:	d008      	beq.n	800252e <__aeabi_dsub+0x67e>
 800251c:	08ce      	lsrs	r6, r1, #3
 800251e:	4216      	tst	r6, r2
 8002520:	d105      	bne.n	800252e <__aeabi_dsub+0x67e>
 8002522:	08c0      	lsrs	r0, r0, #3
 8002524:	0749      	lsls	r1, r1, #29
 8002526:	4308      	orrs	r0, r1
 8002528:	0004      	movs	r4, r0
 800252a:	465d      	mov	r5, fp
 800252c:	0033      	movs	r3, r6
 800252e:	0f61      	lsrs	r1, r4, #29
 8002530:	00e2      	lsls	r2, r4, #3
 8002532:	0749      	lsls	r1, r1, #29
 8002534:	08d2      	lsrs	r2, r2, #3
 8002536:	430a      	orrs	r2, r1
 8002538:	e678      	b.n	800222c <__aeabi_dsub+0x37c>
 800253a:	074b      	lsls	r3, r1, #29
 800253c:	08c2      	lsrs	r2, r0, #3
 800253e:	431a      	orrs	r2, r3
 8002540:	08cb      	lsrs	r3, r1, #3
 8002542:	e632      	b.n	80021aa <__aeabi_dsub+0x2fa>
 8002544:	4448      	add	r0, r9
 8002546:	185b      	adds	r3, r3, r1
 8002548:	4548      	cmp	r0, r9
 800254a:	4192      	sbcs	r2, r2
 800254c:	4698      	mov	r8, r3
 800254e:	4252      	negs	r2, r2
 8002550:	4490      	add	r8, r2
 8002552:	4643      	mov	r3, r8
 8002554:	0004      	movs	r4, r0
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	d400      	bmi.n	800255c <__aeabi_dsub+0x6ac>
 800255a:	e61a      	b.n	8002192 <__aeabi_dsub+0x2e2>
 800255c:	4642      	mov	r2, r8
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <__aeabi_dsub+0x6e8>)
 8002560:	2601      	movs	r6, #1
 8002562:	401a      	ands	r2, r3
 8002564:	4690      	mov	r8, r2
 8002566:	e614      	b.n	8002192 <__aeabi_dsub+0x2e2>
 8002568:	4666      	mov	r6, ip
 800256a:	001f      	movs	r7, r3
 800256c:	3e20      	subs	r6, #32
 800256e:	40f7      	lsrs	r7, r6
 8002570:	2c20      	cmp	r4, #32
 8002572:	d005      	beq.n	8002580 <__aeabi_dsub+0x6d0>
 8002574:	2640      	movs	r6, #64	; 0x40
 8002576:	1b36      	subs	r6, r6, r4
 8002578:	40b3      	lsls	r3, r6
 800257a:	464c      	mov	r4, r9
 800257c:	431c      	orrs	r4, r3
 800257e:	46a2      	mov	sl, r4
 8002580:	4654      	mov	r4, sl
 8002582:	1e63      	subs	r3, r4, #1
 8002584:	419c      	sbcs	r4, r3
 8002586:	433c      	orrs	r4, r7
 8002588:	e5c8      	b.n	800211c <__aeabi_dsub+0x26c>
 800258a:	0011      	movs	r1, r2
 800258c:	2300      	movs	r3, #0
 800258e:	2200      	movs	r2, #0
 8002590:	e532      	b.n	8001ff8 <__aeabi_dsub+0x148>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	000007ff 	.word	0x000007ff
 8002598:	ff7fffff 	.word	0xff7fffff
 800259c:	000007fe 	.word	0x000007fe
 80025a0:	464a      	mov	r2, r9
 80025a2:	1814      	adds	r4, r2, r0
 80025a4:	4284      	cmp	r4, r0
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	185b      	adds	r3, r3, r1
 80025aa:	4698      	mov	r8, r3
 80025ac:	4252      	negs	r2, r2
 80025ae:	4490      	add	r8, r2
 80025b0:	e5e9      	b.n	8002186 <__aeabi_dsub+0x2d6>
 80025b2:	4642      	mov	r2, r8
 80025b4:	4322      	orrs	r2, r4
 80025b6:	d100      	bne.n	80025ba <__aeabi_dsub+0x70a>
 80025b8:	e6a6      	b.n	8002308 <__aeabi_dsub+0x458>
 80025ba:	e5ea      	b.n	8002192 <__aeabi_dsub+0x2e2>
 80025bc:	074b      	lsls	r3, r1, #29
 80025be:	08c2      	lsrs	r2, r0, #3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	08cb      	lsrs	r3, r1, #3
 80025c4:	e632      	b.n	800222c <__aeabi_dsub+0x37c>
 80025c6:	2200      	movs	r2, #0
 80025c8:	4901      	ldr	r1, [pc, #4]	; (80025d0 <__aeabi_dsub+0x720>)
 80025ca:	0013      	movs	r3, r2
 80025cc:	e514      	b.n	8001ff8 <__aeabi_dsub+0x148>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007ff 	.word	0x000007ff

080025d4 <__aeabi_dcmpun>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	0005      	movs	r5, r0
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <__aeabi_dcmpun+0x38>)
 80025da:	030c      	lsls	r4, r1, #12
 80025dc:	0016      	movs	r6, r2
 80025de:	0049      	lsls	r1, r1, #1
 80025e0:	031a      	lsls	r2, r3, #12
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d49      	lsrs	r1, r1, #21
 80025e8:	0b12      	lsrs	r2, r2, #12
 80025ea:	0d5b      	lsrs	r3, r3, #21
 80025ec:	4281      	cmp	r1, r0
 80025ee:	d008      	beq.n	8002602 <__aeabi_dcmpun+0x2e>
 80025f0:	4906      	ldr	r1, [pc, #24]	; (800260c <__aeabi_dcmpun+0x38>)
 80025f2:	2000      	movs	r0, #0
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d103      	bne.n	8002600 <__aeabi_dcmpun+0x2c>
 80025f8:	4332      	orrs	r2, r6
 80025fa:	0010      	movs	r0, r2
 80025fc:	1e42      	subs	r2, r0, #1
 80025fe:	4190      	sbcs	r0, r2
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	2001      	movs	r0, #1
 8002604:	432c      	orrs	r4, r5
 8002606:	d1fb      	bne.n	8002600 <__aeabi_dcmpun+0x2c>
 8002608:	e7f2      	b.n	80025f0 <__aeabi_dcmpun+0x1c>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff

08002610 <__aeabi_d2iz>:
 8002610:	000a      	movs	r2, r1
 8002612:	b530      	push	{r4, r5, lr}
 8002614:	4c13      	ldr	r4, [pc, #76]	; (8002664 <__aeabi_d2iz+0x54>)
 8002616:	0053      	lsls	r3, r2, #1
 8002618:	0309      	lsls	r1, r1, #12
 800261a:	0005      	movs	r5, r0
 800261c:	0b09      	lsrs	r1, r1, #12
 800261e:	2000      	movs	r0, #0
 8002620:	0d5b      	lsrs	r3, r3, #21
 8002622:	0fd2      	lsrs	r2, r2, #31
 8002624:	42a3      	cmp	r3, r4
 8002626:	dd04      	ble.n	8002632 <__aeabi_d2iz+0x22>
 8002628:	480f      	ldr	r0, [pc, #60]	; (8002668 <__aeabi_d2iz+0x58>)
 800262a:	4283      	cmp	r3, r0
 800262c:	dd02      	ble.n	8002634 <__aeabi_d2iz+0x24>
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <__aeabi_d2iz+0x5c>)
 8002630:	18d0      	adds	r0, r2, r3
 8002632:	bd30      	pop	{r4, r5, pc}
 8002634:	2080      	movs	r0, #128	; 0x80
 8002636:	0340      	lsls	r0, r0, #13
 8002638:	4301      	orrs	r1, r0
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <__aeabi_d2iz+0x60>)
 800263c:	1ac0      	subs	r0, r0, r3
 800263e:	281f      	cmp	r0, #31
 8002640:	dd08      	ble.n	8002654 <__aeabi_d2iz+0x44>
 8002642:	480c      	ldr	r0, [pc, #48]	; (8002674 <__aeabi_d2iz+0x64>)
 8002644:	1ac3      	subs	r3, r0, r3
 8002646:	40d9      	lsrs	r1, r3
 8002648:	000b      	movs	r3, r1
 800264a:	4258      	negs	r0, r3
 800264c:	2a00      	cmp	r2, #0
 800264e:	d1f0      	bne.n	8002632 <__aeabi_d2iz+0x22>
 8002650:	0018      	movs	r0, r3
 8002652:	e7ee      	b.n	8002632 <__aeabi_d2iz+0x22>
 8002654:	4c08      	ldr	r4, [pc, #32]	; (8002678 <__aeabi_d2iz+0x68>)
 8002656:	40c5      	lsrs	r5, r0
 8002658:	46a4      	mov	ip, r4
 800265a:	4463      	add	r3, ip
 800265c:	4099      	lsls	r1, r3
 800265e:	000b      	movs	r3, r1
 8002660:	432b      	orrs	r3, r5
 8002662:	e7f2      	b.n	800264a <__aeabi_d2iz+0x3a>
 8002664:	000003fe 	.word	0x000003fe
 8002668:	0000041d 	.word	0x0000041d
 800266c:	7fffffff 	.word	0x7fffffff
 8002670:	00000433 	.word	0x00000433
 8002674:	00000413 	.word	0x00000413
 8002678:	fffffbed 	.word	0xfffffbed

0800267c <__aeabi_i2d>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	2800      	cmp	r0, #0
 8002680:	d016      	beq.n	80026b0 <__aeabi_i2d+0x34>
 8002682:	17c3      	asrs	r3, r0, #31
 8002684:	18c5      	adds	r5, r0, r3
 8002686:	405d      	eors	r5, r3
 8002688:	0fc4      	lsrs	r4, r0, #31
 800268a:	0028      	movs	r0, r5
 800268c:	f000 f91c 	bl	80028c8 <__clzsi2>
 8002690:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <__aeabi_i2d+0x5c>)
 8002692:	1a12      	subs	r2, r2, r0
 8002694:	280a      	cmp	r0, #10
 8002696:	dc16      	bgt.n	80026c6 <__aeabi_i2d+0x4a>
 8002698:	0003      	movs	r3, r0
 800269a:	002e      	movs	r6, r5
 800269c:	3315      	adds	r3, #21
 800269e:	409e      	lsls	r6, r3
 80026a0:	230b      	movs	r3, #11
 80026a2:	1a18      	subs	r0, r3, r0
 80026a4:	40c5      	lsrs	r5, r0
 80026a6:	0553      	lsls	r3, r2, #21
 80026a8:	032d      	lsls	r5, r5, #12
 80026aa:	0b2d      	lsrs	r5, r5, #12
 80026ac:	0d5b      	lsrs	r3, r3, #21
 80026ae:	e003      	b.n	80026b8 <__aeabi_i2d+0x3c>
 80026b0:	2400      	movs	r4, #0
 80026b2:	2300      	movs	r3, #0
 80026b4:	2500      	movs	r5, #0
 80026b6:	2600      	movs	r6, #0
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	432b      	orrs	r3, r5
 80026bc:	07e4      	lsls	r4, r4, #31
 80026be:	4323      	orrs	r3, r4
 80026c0:	0030      	movs	r0, r6
 80026c2:	0019      	movs	r1, r3
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	380b      	subs	r0, #11
 80026c8:	4085      	lsls	r5, r0
 80026ca:	0553      	lsls	r3, r2, #21
 80026cc:	032d      	lsls	r5, r5, #12
 80026ce:	2600      	movs	r6, #0
 80026d0:	0b2d      	lsrs	r5, r5, #12
 80026d2:	0d5b      	lsrs	r3, r3, #21
 80026d4:	e7f0      	b.n	80026b8 <__aeabi_i2d+0x3c>
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	0000041e 	.word	0x0000041e

080026dc <__aeabi_ui2d>:
 80026dc:	b510      	push	{r4, lr}
 80026de:	1e04      	subs	r4, r0, #0
 80026e0:	d010      	beq.n	8002704 <__aeabi_ui2d+0x28>
 80026e2:	f000 f8f1 	bl	80028c8 <__clzsi2>
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <__aeabi_ui2d+0x48>)
 80026e8:	1a1b      	subs	r3, r3, r0
 80026ea:	280a      	cmp	r0, #10
 80026ec:	dc11      	bgt.n	8002712 <__aeabi_ui2d+0x36>
 80026ee:	220b      	movs	r2, #11
 80026f0:	0021      	movs	r1, r4
 80026f2:	1a12      	subs	r2, r2, r0
 80026f4:	40d1      	lsrs	r1, r2
 80026f6:	3015      	adds	r0, #21
 80026f8:	030a      	lsls	r2, r1, #12
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	4084      	lsls	r4, r0
 80026fe:	0b12      	lsrs	r2, r2, #12
 8002700:	0d5b      	lsrs	r3, r3, #21
 8002702:	e001      	b.n	8002708 <__aeabi_ui2d+0x2c>
 8002704:	2300      	movs	r3, #0
 8002706:	2200      	movs	r2, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	4313      	orrs	r3, r2
 800270c:	0020      	movs	r0, r4
 800270e:	0019      	movs	r1, r3
 8002710:	bd10      	pop	{r4, pc}
 8002712:	0022      	movs	r2, r4
 8002714:	380b      	subs	r0, #11
 8002716:	4082      	lsls	r2, r0
 8002718:	055b      	lsls	r3, r3, #21
 800271a:	0312      	lsls	r2, r2, #12
 800271c:	2400      	movs	r4, #0
 800271e:	0b12      	lsrs	r2, r2, #12
 8002720:	0d5b      	lsrs	r3, r3, #21
 8002722:	e7f1      	b.n	8002708 <__aeabi_ui2d+0x2c>
 8002724:	0000041e 	.word	0x0000041e

08002728 <__aeabi_f2d>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	0043      	lsls	r3, r0, #1
 800272c:	0246      	lsls	r6, r0, #9
 800272e:	0fc4      	lsrs	r4, r0, #31
 8002730:	20fe      	movs	r0, #254	; 0xfe
 8002732:	0e1b      	lsrs	r3, r3, #24
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	0a75      	lsrs	r5, r6, #9
 8002738:	4208      	tst	r0, r1
 800273a:	d00c      	beq.n	8002756 <__aeabi_f2d+0x2e>
 800273c:	22e0      	movs	r2, #224	; 0xe0
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4694      	mov	ip, r2
 8002742:	076d      	lsls	r5, r5, #29
 8002744:	0b36      	lsrs	r6, r6, #12
 8002746:	4463      	add	r3, ip
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	4333      	orrs	r3, r6
 800274c:	07e4      	lsls	r4, r4, #31
 800274e:	4323      	orrs	r3, r4
 8002750:	0028      	movs	r0, r5
 8002752:	0019      	movs	r1, r3
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	2b00      	cmp	r3, #0
 8002758:	d114      	bne.n	8002784 <__aeabi_f2d+0x5c>
 800275a:	2d00      	cmp	r5, #0
 800275c:	d01b      	beq.n	8002796 <__aeabi_f2d+0x6e>
 800275e:	0028      	movs	r0, r5
 8002760:	f000 f8b2 	bl	80028c8 <__clzsi2>
 8002764:	280a      	cmp	r0, #10
 8002766:	dc1c      	bgt.n	80027a2 <__aeabi_f2d+0x7a>
 8002768:	230b      	movs	r3, #11
 800276a:	002a      	movs	r2, r5
 800276c:	1a1b      	subs	r3, r3, r0
 800276e:	40da      	lsrs	r2, r3
 8002770:	0003      	movs	r3, r0
 8002772:	3315      	adds	r3, #21
 8002774:	409d      	lsls	r5, r3
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <__aeabi_f2d+0x88>)
 8002778:	0312      	lsls	r2, r2, #12
 800277a:	1a1b      	subs	r3, r3, r0
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	0b16      	lsrs	r6, r2, #12
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	e7e1      	b.n	8002748 <__aeabi_f2d+0x20>
 8002784:	2d00      	cmp	r5, #0
 8002786:	d009      	beq.n	800279c <__aeabi_f2d+0x74>
 8002788:	0b32      	lsrs	r2, r6, #12
 800278a:	2680      	movs	r6, #128	; 0x80
 800278c:	0336      	lsls	r6, r6, #12
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <__aeabi_f2d+0x8c>)
 8002790:	076d      	lsls	r5, r5, #29
 8002792:	4316      	orrs	r6, r2
 8002794:	e7d8      	b.n	8002748 <__aeabi_f2d+0x20>
 8002796:	2300      	movs	r3, #0
 8002798:	2600      	movs	r6, #0
 800279a:	e7d5      	b.n	8002748 <__aeabi_f2d+0x20>
 800279c:	2600      	movs	r6, #0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <__aeabi_f2d+0x8c>)
 80027a0:	e7d2      	b.n	8002748 <__aeabi_f2d+0x20>
 80027a2:	0003      	movs	r3, r0
 80027a4:	002a      	movs	r2, r5
 80027a6:	3b0b      	subs	r3, #11
 80027a8:	409a      	lsls	r2, r3
 80027aa:	2500      	movs	r5, #0
 80027ac:	e7e3      	b.n	8002776 <__aeabi_f2d+0x4e>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	00000389 	.word	0x00000389
 80027b4:	000007ff 	.word	0x000007ff

080027b8 <__aeabi_d2f>:
 80027b8:	0002      	movs	r2, r0
 80027ba:	004b      	lsls	r3, r1, #1
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	0308      	lsls	r0, r1, #12
 80027c0:	0d5b      	lsrs	r3, r3, #21
 80027c2:	4e3d      	ldr	r6, [pc, #244]	; (80028b8 <__aeabi_d2f+0x100>)
 80027c4:	0fcc      	lsrs	r4, r1, #31
 80027c6:	0a40      	lsrs	r0, r0, #9
 80027c8:	0f51      	lsrs	r1, r2, #29
 80027ca:	1c5f      	adds	r7, r3, #1
 80027cc:	4308      	orrs	r0, r1
 80027ce:	00d5      	lsls	r5, r2, #3
 80027d0:	4237      	tst	r7, r6
 80027d2:	d00a      	beq.n	80027ea <__aeabi_d2f+0x32>
 80027d4:	4939      	ldr	r1, [pc, #228]	; (80028bc <__aeabi_d2f+0x104>)
 80027d6:	185e      	adds	r6, r3, r1
 80027d8:	2efe      	cmp	r6, #254	; 0xfe
 80027da:	dd16      	ble.n	800280a <__aeabi_d2f+0x52>
 80027dc:	23ff      	movs	r3, #255	; 0xff
 80027de:	2100      	movs	r1, #0
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	430b      	orrs	r3, r1
 80027e4:	07e0      	lsls	r0, r4, #31
 80027e6:	4318      	orrs	r0, r3
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <__aeabi_d2f+0x44>
 80027ee:	4328      	orrs	r0, r5
 80027f0:	d027      	beq.n	8002842 <__aeabi_d2f+0x8a>
 80027f2:	2105      	movs	r1, #5
 80027f4:	0189      	lsls	r1, r1, #6
 80027f6:	0a49      	lsrs	r1, r1, #9
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e7f1      	b.n	80027e0 <__aeabi_d2f+0x28>
 80027fc:	4305      	orrs	r5, r0
 80027fe:	d0ed      	beq.n	80027dc <__aeabi_d2f+0x24>
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	03c9      	lsls	r1, r1, #15
 8002804:	23ff      	movs	r3, #255	; 0xff
 8002806:	4301      	orrs	r1, r0
 8002808:	e7ea      	b.n	80027e0 <__aeabi_d2f+0x28>
 800280a:	2e00      	cmp	r6, #0
 800280c:	dd1c      	ble.n	8002848 <__aeabi_d2f+0x90>
 800280e:	0192      	lsls	r2, r2, #6
 8002810:	0011      	movs	r1, r2
 8002812:	1e4a      	subs	r2, r1, #1
 8002814:	4191      	sbcs	r1, r2
 8002816:	00c0      	lsls	r0, r0, #3
 8002818:	0f6d      	lsrs	r5, r5, #29
 800281a:	4301      	orrs	r1, r0
 800281c:	4329      	orrs	r1, r5
 800281e:	074b      	lsls	r3, r1, #29
 8002820:	d048      	beq.n	80028b4 <__aeabi_d2f+0xfc>
 8002822:	230f      	movs	r3, #15
 8002824:	400b      	ands	r3, r1
 8002826:	2b04      	cmp	r3, #4
 8002828:	d000      	beq.n	800282c <__aeabi_d2f+0x74>
 800282a:	3104      	adds	r1, #4
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	04db      	lsls	r3, r3, #19
 8002830:	400b      	ands	r3, r1
 8002832:	d03f      	beq.n	80028b4 <__aeabi_d2f+0xfc>
 8002834:	1c72      	adds	r2, r6, #1
 8002836:	2efe      	cmp	r6, #254	; 0xfe
 8002838:	d0d0      	beq.n	80027dc <__aeabi_d2f+0x24>
 800283a:	0189      	lsls	r1, r1, #6
 800283c:	0a49      	lsrs	r1, r1, #9
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	e7ce      	b.n	80027e0 <__aeabi_d2f+0x28>
 8002842:	2300      	movs	r3, #0
 8002844:	2100      	movs	r1, #0
 8002846:	e7cb      	b.n	80027e0 <__aeabi_d2f+0x28>
 8002848:	0032      	movs	r2, r6
 800284a:	3217      	adds	r2, #23
 800284c:	db22      	blt.n	8002894 <__aeabi_d2f+0xdc>
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	221e      	movs	r2, #30
 8002852:	0409      	lsls	r1, r1, #16
 8002854:	4308      	orrs	r0, r1
 8002856:	1b92      	subs	r2, r2, r6
 8002858:	2a1f      	cmp	r2, #31
 800285a:	dd1d      	ble.n	8002898 <__aeabi_d2f+0xe0>
 800285c:	2102      	movs	r1, #2
 800285e:	4249      	negs	r1, r1
 8002860:	1b8e      	subs	r6, r1, r6
 8002862:	0001      	movs	r1, r0
 8002864:	40f1      	lsrs	r1, r6
 8002866:	000e      	movs	r6, r1
 8002868:	2a20      	cmp	r2, #32
 800286a:	d004      	beq.n	8002876 <__aeabi_d2f+0xbe>
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <__aeabi_d2f+0x108>)
 800286e:	4694      	mov	ip, r2
 8002870:	4463      	add	r3, ip
 8002872:	4098      	lsls	r0, r3
 8002874:	4305      	orrs	r5, r0
 8002876:	0029      	movs	r1, r5
 8002878:	1e4d      	subs	r5, r1, #1
 800287a:	41a9      	sbcs	r1, r5
 800287c:	4331      	orrs	r1, r6
 800287e:	2600      	movs	r6, #0
 8002880:	074b      	lsls	r3, r1, #29
 8002882:	d1ce      	bne.n	8002822 <__aeabi_d2f+0x6a>
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	000b      	movs	r3, r1
 8002888:	04c0      	lsls	r0, r0, #19
 800288a:	2201      	movs	r2, #1
 800288c:	4003      	ands	r3, r0
 800288e:	4201      	tst	r1, r0
 8002890:	d1d3      	bne.n	800283a <__aeabi_d2f+0x82>
 8002892:	e7af      	b.n	80027f4 <__aeabi_d2f+0x3c>
 8002894:	2300      	movs	r3, #0
 8002896:	e7ac      	b.n	80027f2 <__aeabi_d2f+0x3a>
 8002898:	490a      	ldr	r1, [pc, #40]	; (80028c4 <__aeabi_d2f+0x10c>)
 800289a:	468c      	mov	ip, r1
 800289c:	0029      	movs	r1, r5
 800289e:	4463      	add	r3, ip
 80028a0:	40d1      	lsrs	r1, r2
 80028a2:	409d      	lsls	r5, r3
 80028a4:	000a      	movs	r2, r1
 80028a6:	0029      	movs	r1, r5
 80028a8:	4098      	lsls	r0, r3
 80028aa:	1e4d      	subs	r5, r1, #1
 80028ac:	41a9      	sbcs	r1, r5
 80028ae:	4301      	orrs	r1, r0
 80028b0:	4311      	orrs	r1, r2
 80028b2:	e7e4      	b.n	800287e <__aeabi_d2f+0xc6>
 80028b4:	0033      	movs	r3, r6
 80028b6:	e79d      	b.n	80027f4 <__aeabi_d2f+0x3c>
 80028b8:	000007fe 	.word	0x000007fe
 80028bc:	fffffc80 	.word	0xfffffc80
 80028c0:	fffffca2 	.word	0xfffffca2
 80028c4:	fffffc82 	.word	0xfffffc82

080028c8 <__clzsi2>:
 80028c8:	211c      	movs	r1, #28
 80028ca:	2301      	movs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	4298      	cmp	r0, r3
 80028d0:	d301      	bcc.n	80028d6 <__clzsi2+0xe>
 80028d2:	0c00      	lsrs	r0, r0, #16
 80028d4:	3910      	subs	r1, #16
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	4298      	cmp	r0, r3
 80028da:	d301      	bcc.n	80028e0 <__clzsi2+0x18>
 80028dc:	0a00      	lsrs	r0, r0, #8
 80028de:	3908      	subs	r1, #8
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	4298      	cmp	r0, r3
 80028e4:	d301      	bcc.n	80028ea <__clzsi2+0x22>
 80028e6:	0900      	lsrs	r0, r0, #4
 80028e8:	3904      	subs	r1, #4
 80028ea:	a202      	add	r2, pc, #8	; (adr r2, 80028f4 <__clzsi2+0x2c>)
 80028ec:	5c10      	ldrb	r0, [r2, r0]
 80028ee:	1840      	adds	r0, r0, r1
 80028f0:	4770      	bx	lr
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	02020304 	.word	0x02020304
 80028f8:	01010101 	.word	0x01010101
	...

08002904 <Delay_us>:
#include "DHT.h"
//************************** Low Level Layer ********************************************************//
void Delay_us (DHT_Name* DHT, uint16_t Time)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	000a      	movs	r2, r1
 800290e:	1cbb      	adds	r3, r7, #2
 8002910:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(DHT->Timer, 0);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(DHT->Timer) < Time);
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002926:	1cbb      	adds	r3, r7, #2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3f7      	bcc.n	800291e <Delay_us+0x1a>
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <DHT_SetPinOut>:
	}
}

// set the pin as output
static void DHT_SetPinOut(DHT_Name* DHT)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	240c      	movs	r4, #12
 8002942:	193b      	adds	r3, r7, r4
 8002944:	0018      	movs	r0, r3
 8002946:	2314      	movs	r3, #20
 8002948:	001a      	movs	r2, r3
 800294a:	2100      	movs	r1, #0
 800294c:	f005 fa3c 	bl	8007dc8 <memset>
	GPIO_InitStruct.Pin = DHT->Pin;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	889b      	ldrh	r3, [r3, #4]
 8002954:	001a      	movs	r2, r3
 8002956:	0021      	movs	r1, r4
 8002958:	187b      	adds	r3, r7, r1
 800295a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2201      	movs	r2, #1
 8002960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	187a      	adds	r2, r7, r1
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f002 f922 	bl	8004bc0 <HAL_GPIO_Init>
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b009      	add	sp, #36	; 0x24
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_Name* DHT)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	240c      	movs	r4, #12
 800298e:	193b      	adds	r3, r7, r4
 8002990:	0018      	movs	r0, r3
 8002992:	2314      	movs	r3, #20
 8002994:	001a      	movs	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f005 fa16 	bl	8007dc8 <memset>
	GPIO_InitStruct.Pin = DHT->Pin;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	889b      	ldrh	r3, [r3, #4]
 80029a0:	001a      	movs	r2, r3
 80029a2:	193b      	adds	r3, r7, r4
 80029a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	2201      	movs	r2, #1
 80029b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	193a      	adds	r2, r7, r4
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f002 f900 	bl	8004bc0 <HAL_GPIO_Init>
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b009      	add	sp, #36	; 0x24
 80029c6:	bd90      	pop	{r4, r7, pc}

080029c8 <DHT_WritePin>:


static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	000a      	movs	r2, r1
 80029d2:	1cfb      	adds	r3, r7, #3
 80029d4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6898      	ldr	r0, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8899      	ldrh	r1, [r3, #4]
 80029de:	1cfb      	adds	r3, r7, #3
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	001a      	movs	r2, r3
 80029e4:	f002 fa79 	bl	8004eda <HAL_GPIO_WritePin>
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	uint8_t Value;
	Value =  HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	889b      	ldrh	r3, [r3, #4]
 8002a00:	250f      	movs	r5, #15
 8002a02:	197c      	adds	r4, r7, r5
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f002 fa4a 	bl	8004ea0 <HAL_GPIO_ReadPin>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	7023      	strb	r3, [r4, #0]
	return Value;
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	781b      	ldrb	r3, [r3, #0]
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bdb0      	pop	{r4, r5, r7, pc}

08002a1c <DHT11_Start>:

//********************************* Middle level Layer ****************************************************//
static uint8_t DHT11_Start (DHT_Name* DHT)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint8_t Response = 0;
 8002a24:	240f      	movs	r4, #15
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
  DHT_SetPinOut(DHT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff ff82 	bl	8002938 <DHT_SetPinOut>
  DHT_WritePin(DHT, 0);		// pull the pin low
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2100      	movs	r1, #0
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ffc5 	bl	80029c8 <DHT_WritePin>
  HAL_Delay(20);   			// wait for 20ms
 8002a3e:	2014      	movs	r0, #20
 8002a40:	f001 fc38 	bl	80042b4 <HAL_Delay>
  DHT_WritePin(DHT, 1);   	// pull the pin high
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2101      	movs	r1, #1
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff ffbd 	bl	80029c8 <DHT_WritePin>
  Delay_us(DHT, 30);   			// wait for 30us
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	211e      	movs	r1, #30
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff ff56 	bl	8002904 <Delay_us>
  DHT_SetPinIn(DHT);		// set the pin as input
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff ff92 	bl	8002984 <DHT_SetPinIn>
  Delay_us(DHT, 40);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2128      	movs	r1, #40	; 0x28
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff ff4d 	bl	8002904 <Delay_us>

  if (!DHT_ReadPin(DHT)) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ffbf 	bl	80029f0 <DHT_ReadPin>
 8002a72:	1e03      	subs	r3, r0, #0
 8002a74:	d10d      	bne.n	8002a92 <DHT11_Start+0x76>
	  Delay_us(DHT, 80);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2150      	movs	r1, #80	; 0x50
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff ff42 	bl	8002904 <Delay_us>
	  if (DHT_ReadPin(DHT)) Response = 1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff ffb4 	bl	80029f0 <DHT_ReadPin>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d002      	beq.n	8002a92 <DHT11_Start+0x76>
 8002a8c:	193b      	adds	r3, r7, r4
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
  }

  pMillis = HAL_GetTick();
 8002a92:	f001 fc05 	bl	80042a0 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <DHT11_Start+0xc0>)
 8002a9a:	601a      	str	r2, [r3, #0]
  cMillis = HAL_GetTick();
 8002a9c:	f001 fc00 	bl	80042a0 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <DHT11_Start+0xc4>)
 8002aa4:	601a      	str	r2, [r3, #0]
  while (DHT_ReadPin(DHT) && pMillis + 2 > cMillis)
 8002aa6:	e004      	b.n	8002ab2 <DHT11_Start+0x96>
  {
    cMillis = HAL_GetTick();
 8002aa8:	f001 fbfa 	bl	80042a0 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <DHT11_Start+0xc4>)
 8002ab0:	601a      	str	r2, [r3, #0]
  while (DHT_ReadPin(DHT) && pMillis + 2 > cMillis)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff ff9b 	bl	80029f0 <DHT_ReadPin>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d006      	beq.n	8002acc <DHT11_Start+0xb0>
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <DHT11_Start+0xc0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1c9a      	adds	r2, r3, #2
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <DHT11_Start+0xc4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8ed      	bhi.n	8002aa8 <DHT11_Start+0x8c>
  }
  return Response;
 8002acc:	230f      	movs	r3, #15
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	781b      	ldrb	r3, [r3, #0]
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b005      	add	sp, #20
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000620 	.word	0x20000620
 8002ae0:	20000618 	.word	0x20000618

08002ae4 <DHT11_Read>:

uint8_t DHT11_Read (DHT_Name* DHT)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint8_t value;
  for (uint8_t i = 0; i < 8; i++)
 8002aec:	230e      	movs	r3, #14
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e06f      	b.n	8002bd6 <DHT11_Read+0xf2>
  {
    pMillis = HAL_GetTick();
 8002af6:	f001 fbd3 	bl	80042a0 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <DHT11_Read+0x10c>)
 8002afe:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 8002b00:	f001 fbce 	bl	80042a0 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <DHT11_Read+0x110>)
 8002b08:	601a      	str	r2, [r3, #0]
    while (!DHT_ReadPin(DHT) && (pMillis + 2 > cMillis))
 8002b0a:	e004      	b.n	8002b16 <DHT11_Read+0x32>
    	{  // wait for the pin to go high
    		cMillis = HAL_GetTick();
 8002b0c:	f001 fbc8 	bl	80042a0 <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <DHT11_Read+0x110>)
 8002b14:	601a      	str	r2, [r3, #0]
    while (!DHT_ReadPin(DHT) && (pMillis + 2 > cMillis))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff ff69 	bl	80029f0 <DHT_ReadPin>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d106      	bne.n	8002b30 <DHT11_Read+0x4c>
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <DHT11_Read+0x10c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1c9a      	adds	r2, r3, #2
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <DHT11_Read+0x110>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8ed      	bhi.n	8002b0c <DHT11_Read+0x28>
    	}
    Delay_us(DHT, 40);   // wait for 40 us
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2128      	movs	r1, #40	; 0x28
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff fee5 	bl	8002904 <Delay_us>
    if (!DHT_ReadPin(DHT))   // if the pin is low
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff ff57 	bl	80029f0 <DHT_ReadPin>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d113      	bne.n	8002b6e <DHT11_Read+0x8a>
    	value &= ~(1<<(7-i));
 8002b46:	230e      	movs	r3, #14
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2201      	movs	r2, #1
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	210f      	movs	r1, #15
 8002b5e:	187a      	adds	r2, r7, r1
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	b252      	sxtb	r2, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	b25a      	sxtb	r2, r3
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e010      	b.n	8002b90 <DHT11_Read+0xac>
    else
    	value |= (1<<(7-i));
 8002b6e:	230e      	movs	r3, #14
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2207      	movs	r2, #7
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	b25a      	sxtb	r2, r3
 8002b80:	210f      	movs	r1, #15
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	701a      	strb	r2, [r3, #0]
    pMillis = HAL_GetTick();
 8002b90:	f001 fb86 	bl	80042a0 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <DHT11_Read+0x10c>)
 8002b98:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 8002b9a:	f001 fb81 	bl	80042a0 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <DHT11_Read+0x110>)
 8002ba2:	601a      	str	r2, [r3, #0]
    while (DHT_ReadPin(DHT) && pMillis + 2 > cMillis)
 8002ba4:	e004      	b.n	8002bb0 <DHT11_Read+0xcc>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8002ba6:	f001 fb7b 	bl	80042a0 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <DHT11_Read+0x110>)
 8002bae:	601a      	str	r2, [r3, #0]
    while (DHT_ReadPin(DHT) && pMillis + 2 > cMillis)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7ff ff1c 	bl	80029f0 <DHT_ReadPin>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d006      	beq.n	8002bca <DHT11_Read+0xe6>
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <DHT11_Read+0x10c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <DHT11_Read+0x110>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d8ed      	bhi.n	8002ba6 <DHT11_Read+0xc2>
  for (uint8_t i = 0; i < 8; i++)
 8002bca:	210e      	movs	r1, #14
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	3201      	adds	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	230e      	movs	r3, #14
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d98a      	bls.n	8002af6 <DHT11_Read+0x12>
    }
  }
  return value;
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	20000620 	.word	0x20000620
 8002bf4:	20000618 	.word	0x20000618

08002bf8 <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	001a      	movs	r2, r3
 8002c06:	1cbb      	adds	r3, r7, #2
 8002c08:	801a      	strh	r2, [r3, #0]

	DHT->PORT = DH_PORT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
	DHT->Pin = DH_Pin;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1cba      	adds	r2, r7, #2
 8002c14:	8812      	ldrh	r2, [r2, #0]
 8002c16:	809a      	strh	r2, [r3, #4]
	DHT->Timer = Timer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <DHT_ReadTempHum>:

void DHT_ReadTempHum(DHT_Name* DHT)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	if(DHT11_Start(DHT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fef2 	bl	8002a1c <DHT11_Start>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d073      	beq.n	8002d24 <DHT_ReadTempHum+0xfc>
	{
		RHI = DHT11_Read(DHT); // Relative humidity integral
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff ff50 	bl	8002ae4 <DHT11_Read>
 8002c44:	0003      	movs	r3, r0
 8002c46:	001a      	movs	r2, r3
 8002c48:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <DHT_ReadTempHum+0x104>)
 8002c4a:	701a      	strb	r2, [r3, #0]
		RHD = DHT11_Read(DHT); // Relative humidity decimal
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff ff48 	bl	8002ae4 <DHT11_Read>
 8002c54:	0003      	movs	r3, r0
 8002c56:	001a      	movs	r2, r3
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <DHT_ReadTempHum+0x108>)
 8002c5a:	701a      	strb	r2, [r3, #0]
		TCI = DHT11_Read(DHT); // Celsius integral
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff ff40 	bl	8002ae4 <DHT11_Read>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <DHT_ReadTempHum+0x10c>)
 8002c6a:	701a      	strb	r2, [r3, #0]
		TCD = DHT11_Read(DHT); // Celsius decimal
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff ff38 	bl	8002ae4 <DHT11_Read>
 8002c74:	0003      	movs	r3, r0
 8002c76:	001a      	movs	r2, r3
 8002c78:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <DHT_ReadTempHum+0x110>)
 8002c7a:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read(DHT); // Check sum
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff ff30 	bl	8002ae4 <DHT11_Read>
 8002c84:	0003      	movs	r3, r0
 8002c86:	001a      	movs	r2, r3
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <DHT_ReadTempHum+0x114>)
 8002c8a:	701a      	strb	r2, [r3, #0]
		if (RHI + RHD + TCI + TCD == SUM)
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <DHT_ReadTempHum+0x104>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	001a      	movs	r2, r3
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <DHT_ReadTempHum+0x108>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	18d3      	adds	r3, r2, r3
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <DHT_ReadTempHum+0x10c>)
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <DHT_ReadTempHum+0x110>)
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <DHT_ReadTempHum+0x114>)
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d13b      	bne.n	8002d24 <DHT_ReadTempHum+0xfc>
		{
			// Can use RHI and TCI for any purposes if whole number only needed
			DHT->Temp = (float)TCI + (float)(TCD/10.0);
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <DHT_ReadTempHum+0x10c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fd fee5 	bl	8000a80 <__aeabi_ui2f>
 8002cb6:	1c04      	adds	r4, r0, #0
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <DHT_ReadTempHum+0x110>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fcdd 	bl	800267c <__aeabi_i2d>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <DHT_ReadTempHum+0x118>)
 8002cc6:	f7fe fa81 	bl	80011cc <__aeabi_ddiv>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	0010      	movs	r0, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	f7ff fd71 	bl	80027b8 <__aeabi_d2f>
 8002cd6:	1c03      	adds	r3, r0, #0
 8002cd8:	1c19      	adds	r1, r3, #0
 8002cda:	1c20      	adds	r0, r4, #0
 8002cdc:	f7fd fbe2 	bl	80004a4 <__aeabi_fadd>
 8002ce0:	1c03      	adds	r3, r0, #0
 8002ce2:	1c1a      	adds	r2, r3, #0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
			DHT->Humi = (float)RHI + (float)(RHD/10.0);
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <DHT_ReadTempHum+0x104>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7fd fec7 	bl	8000a80 <__aeabi_ui2f>
 8002cf2:	1c04      	adds	r4, r0, #0
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <DHT_ReadTempHum+0x108>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fcbf 	bl	800267c <__aeabi_i2d>
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <DHT_ReadTempHum+0x118>)
 8002d02:	f7fe fa63 	bl	80011cc <__aeabi_ddiv>
 8002d06:	0002      	movs	r2, r0
 8002d08:	000b      	movs	r3, r1
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	f7ff fd53 	bl	80027b8 <__aeabi_d2f>
 8002d12:	1c03      	adds	r3, r0, #0
 8002d14:	1c19      	adds	r1, r3, #0
 8002d16:	1c20      	adds	r0, r4, #0
 8002d18:	f7fd fbc4 	bl	80004a4 <__aeabi_fadd>
 8002d1c:	1c03      	adds	r3, r0, #0
 8002d1e:	1c1a      	adds	r2, r3, #0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
		}
	}
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b003      	add	sp, #12
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	2000061c 	.word	0x2000061c
 8002d30:	20000624 	.word	0x20000624
 8002d34:	20000626 	.word	0x20000626
 8002d38:	20000614 	.word	0x20000614
 8002d3c:	20000625 	.word	0x20000625
 8002d40:	40240000 	.word	0x40240000

08002d44 <MPU6050_Init>:
#include "MPU6050.h"

//begin MPU6050________________________________________________________________
void MPU6050_Init (I2C_HandleTypeDef *I2Cx)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af04      	add	r7, sp, #16
 8002d4a:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	23fa      	movs	r3, #250	; 0xfa
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	2301      	movs	r3, #1
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	240f      	movs	r4, #15
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	2275      	movs	r2, #117	; 0x75
 8002d62:	21d0      	movs	r1, #208	; 0xd0
 8002d64:	f002 fbbe 	bl	80054e4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b68      	cmp	r3, #104	; 0x68
 8002d6e:	d146      	bne.n	8002dfe <MPU6050_Init+0xba>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002d70:	210e      	movs	r1, #14
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	23fa      	movs	r3, #250	; 0xfa
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	000c      	movs	r4, r1
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	226b      	movs	r2, #107	; 0x6b
 8002d8e:	21d0      	movs	r1, #208	; 0xd0
 8002d90:	f002 fa7a 	bl	8005288 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002d94:	0021      	movs	r1, r4
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2207      	movs	r2, #7
 8002d9a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	23fa      	movs	r3, #250	; 0xfa
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	9302      	str	r3, [sp, #8]
 8002da4:	2301      	movs	r3, #1
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	000c      	movs	r4, r1
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	2219      	movs	r2, #25
 8002db2:	21d0      	movs	r1, #208	; 0xd0
 8002db4:	f002 fa68 	bl	8005288 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8002db8:	0021      	movs	r1, r4
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	23fa      	movs	r3, #250	; 0xfa
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	000c      	movs	r4, r1
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	221c      	movs	r2, #28
 8002dd6:	21d0      	movs	r1, #208	; 0xd0
 8002dd8:	f002 fa56 	bl	8005288 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8002ddc:	0021      	movs	r1, r4
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	23fa      	movs	r3, #250	; 0xfa
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	2301      	movs	r3, #1
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2301      	movs	r3, #1
 8002df6:	221b      	movs	r2, #27
 8002df8:	21d0      	movs	r1, #208	; 0xd0
 8002dfa:	f002 fa45 	bl	8005288 <HAL_I2C_Mem_Write>
	}

}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b005      	add	sp, #20
 8002e04:	bd90      	pop	{r4, r7, pc}
	...

08002e08 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af04      	add	r7, sp, #16
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	23fa      	movs	r3, #250	; 0xfa
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	2408      	movs	r4, #8
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2301      	movs	r3, #1
 8002e26:	223b      	movs	r2, #59	; 0x3b
 8002e28:	21d0      	movs	r1, #208	; 0xd0
 8002e2a:	f002 fb5b 	bl	80054e4 <HAL_I2C_Mem_Read>

	MPU->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002e2e:	0021      	movs	r1, r4
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b21a      	sxth	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	801a      	strh	r2, [r3, #0]
	MPU->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	789b      	ldrb	r3, [r3, #2]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	78db      	ldrb	r3, [r3, #3]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	805a      	strh	r2, [r3, #2]
	MPU->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	791b      	ldrb	r3, [r3, #4]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	795b      	ldrb	r3, [r3, #5]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	809a      	strh	r2, [r3, #4]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	MPU->Ax = MPU->Accel_X_RAW/16384.0;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	5e9b      	ldrsh	r3, [r3, r2]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff fbff 	bl	800267c <__aeabi_i2d>
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <MPU6050_Read_Accel+0xe4>)
 8002e82:	f7fe f9a3 	bl	80011cc <__aeabi_ddiv>
 8002e86:	0002      	movs	r2, r0
 8002e88:	000b      	movs	r3, r1
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	f7ff fc93 	bl	80027b8 <__aeabi_d2f>
 8002e92:	1c02      	adds	r2, r0, #0
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]
	MPU->Ay = MPU->Accel_Y_RAW/16384.0;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fbec 	bl	800267c <__aeabi_i2d>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MPU6050_Read_Accel+0xe4>)
 8002ea8:	f7fe f990 	bl	80011cc <__aeabi_ddiv>
 8002eac:	0002      	movs	r2, r0
 8002eae:	000b      	movs	r3, r1
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f7ff fc80 	bl	80027b8 <__aeabi_d2f>
 8002eb8:	1c02      	adds	r2, r0, #0
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	60da      	str	r2, [r3, #12]
	MPU->Az = MPU->Accel_Z_RAW/16384.0;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff fbd9 	bl	800267c <__aeabi_i2d>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <MPU6050_Read_Accel+0xe4>)
 8002ece:	f7fe f97d 	bl	80011cc <__aeabi_ddiv>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	000b      	movs	r3, r1
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	f7ff fc6d 	bl	80027b8 <__aeabi_d2f>
 8002ede:	1c02      	adds	r2, r0, #0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b005      	add	sp, #20
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	40d00000 	.word	0x40d00000

08002ef0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	23fa      	movs	r3, #250	; 0xfa
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	2306      	movs	r3, #6
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2408      	movs	r4, #8
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2243      	movs	r2, #67	; 0x43
 8002f10:	21d0      	movs	r1, #208	; 0xd0
 8002f12:	f002 fae7 	bl	80054e4 <HAL_I2C_Mem_Read>

	MPU->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002f16:	0021      	movs	r1, r4
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	b21a      	sxth	r2, r3
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	4313      	orrs	r3, r2
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	829a      	strh	r2, [r3, #20]
	MPU->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	789b      	ldrb	r3, [r3, #2]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	78db      	ldrb	r3, [r3, #3]
 8002f3a:	b21b      	sxth	r3, r3
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	82da      	strh	r2, [r3, #22]
	MPU->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	791b      	ldrb	r3, [r3, #4]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	795b      	ldrb	r3, [r3, #5]
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	831a      	strh	r2, [r3, #24]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	MPU->Gx = MPU->Gyro_X_RAW/131.0;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2214      	movs	r2, #20
 8002f5e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff fb8b 	bl	800267c <__aeabi_i2d>
 8002f66:	2200      	movs	r2, #0
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MPU6050_Read_Gyro+0xe4>)
 8002f6a:	f7fe f92f 	bl	80011cc <__aeabi_ddiv>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	000b      	movs	r3, r1
 8002f72:	0010      	movs	r0, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	f7ff fc1f 	bl	80027b8 <__aeabi_d2f>
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	61da      	str	r2, [r3, #28]
	MPU->Gy = MPU->Gyro_Y_RAW/131.0;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2216      	movs	r2, #22
 8002f84:	5e9b      	ldrsh	r3, [r3, r2]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7ff fb78 	bl	800267c <__aeabi_i2d>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MPU6050_Read_Gyro+0xe4>)
 8002f90:	f7fe f91c 	bl	80011cc <__aeabi_ddiv>
 8002f94:	0002      	movs	r2, r0
 8002f96:	000b      	movs	r3, r1
 8002f98:	0010      	movs	r0, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	f7ff fc0c 	bl	80027b8 <__aeabi_d2f>
 8002fa0:	1c02      	adds	r2, r0, #0
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	621a      	str	r2, [r3, #32]
	MPU->Gz = MPU->Gyro_Z_RAW/131.0;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2218      	movs	r2, #24
 8002faa:	5e9b      	ldrsh	r3, [r3, r2]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff fb65 	bl	800267c <__aeabi_i2d>
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <MPU6050_Read_Gyro+0xe4>)
 8002fb6:	f7fe f909 	bl	80011cc <__aeabi_ddiv>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	000b      	movs	r3, r1
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	f7ff fbf9 	bl	80027b8 <__aeabi_d2f>
 8002fc6:	1c02      	adds	r2, r0, #0
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b005      	add	sp, #20
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	40606000 	.word	0x40606000

08002fd8 <MPU6050_Read_Temp>:

void MPU6050_Read_Temp(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU) {
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[2];
    int16_t temp;

    // Read 2 BYTES of data starting from TEMP_OUT_H_REG register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, TEMP_OUT_H_REG, 1, Rec_Data, 2, 100);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	2364      	movs	r3, #100	; 0x64
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	2302      	movs	r3, #2
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	240c      	movs	r4, #12
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2241      	movs	r2, #65	; 0x41
 8002ff6:	21d0      	movs	r1, #208	; 0xd0
 8002ff8:	f002 fa74 	bl	80054e4 <HAL_I2C_Mem_Read>

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002ffc:	0022      	movs	r2, r4
 8002ffe:	18bb      	adds	r3, r7, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	b219      	sxth	r1, r3
 8003006:	18bb      	adds	r3, r7, r2
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	b21a      	sxth	r2, r3
 800300c:	200e      	movs	r0, #14
 800300e:	183b      	adds	r3, r7, r0
 8003010:	430a      	orrs	r2, r1
 8003012:	801a      	strh	r2, [r3, #0]
    MPU->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003014:	183b      	adds	r3, r7, r0
 8003016:	2200      	movs	r2, #0
 8003018:	5e9b      	ldrsh	r3, [r3, r2]
 800301a:	0018      	movs	r0, r3
 800301c:	f7fd fcea 	bl	80009f4 <__aeabi_i2f>
 8003020:	1c03      	adds	r3, r0, #0
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <MPU6050_Read_Temp+0x6c>)
 8003024:	1c18      	adds	r0, r3, #0
 8003026:	f7fd fbd9 	bl	80007dc <__aeabi_fdiv>
 800302a:	1c03      	adds	r3, r0, #0
 800302c:	4906      	ldr	r1, [pc, #24]	; (8003048 <MPU6050_Read_Temp+0x70>)
 800302e:	1c18      	adds	r0, r3, #0
 8003030:	f7fd fa38 	bl	80004a4 <__aeabi_fadd>
 8003034:	1c03      	adds	r3, r0, #0
 8003036:	1c1a      	adds	r2, r3, #0
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b005      	add	sp, #20
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	43aa0000 	.word	0x43aa0000
 8003048:	42121eb8 	.word	0x42121eb8

0800304c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003050:	f001 f8cc 	bl	80041ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003054:	f000 f8ac 	bl	80031b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003058:	f000 fa74 	bl	8003544 <MX_GPIO_Init>
  MX_ADC_Init();
 800305c:	f000 f910 	bl	8003280 <MX_ADC_Init>
  MX_I2C1_Init();
 8003060:	f000 f96a 	bl	8003338 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003064:	f000 f9a8 	bl	80033b8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8003068:	f000 f9e6 	bl	8003438 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800306c:	f000 fa3a 	bl	80034e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8003070:	f000 fb02 	bl	8003678 <SSD1306_Init>
  HAL_TIM_Base_Start(&htim3);
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <main+0x13c>)
 8003076:	0018      	movs	r0, r3
 8003078:	f003 fcf8 	bl	8006a6c <HAL_TIM_Base_Start>
  DHT_Init(&DHT1, &htim3, DHT11_GPIO_Port, DHT11_Pin);
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	4a42      	ldr	r2, [pc, #264]	; (800318c <main+0x140>)
 8003082:	4941      	ldr	r1, [pc, #260]	; (8003188 <main+0x13c>)
 8003084:	4842      	ldr	r0, [pc, #264]	; (8003190 <main+0x144>)
 8003086:	f7ff fdb7 	bl	8002bf8 <DHT_Init>
  MPU6050_Init(&hi2c1);
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <main+0x148>)
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff fe59 	bl	8002d44 <MPU6050_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	SSD1306_GotoXY (15,0);
 8003092:	2100      	movs	r1, #0
 8003094:	200f      	movs	r0, #15
 8003096:	f000 fc6f 	bl	8003978 <SSD1306_GotoXY>
  	SSD1306_Puts ("<- Start!!! ->", &Font_7x10, 1);
 800309a:	493f      	ldr	r1, [pc, #252]	; (8003198 <main+0x14c>)
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <main+0x150>)
 800309e:	2201      	movs	r2, #1
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 fd03 	bl	8003aac <SSD1306_Puts>
  	SSD1306_UpdateScreen(); //display
 80030a6:	f000 fbab 	bl	8003800 <SSD1306_UpdateScreen>
  	HAL_Delay(1000);
 80030aa:	23fa      	movs	r3, #250	; 0xfa
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f001 f900 	bl	80042b4 <HAL_Delay>
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	4a39      	ldr	r2, [pc, #228]	; (80031a0 <main+0x154>)
 80030ba:	0019      	movs	r1, r3
 80030bc:	0010      	movs	r0, r2
 80030be:	f001 ff29 	bl	8004f14 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80030c2:	20c8      	movs	r0, #200	; 0xc8
 80030c4:	f001 f8f6 	bl	80042b4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	DHT_ReadTempHum(&DHT1);
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <main+0x144>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fdac 	bl	8002c28 <DHT_ReadTempHum>
	MPU6050_Read_Accel(&hi2c1, &MPU1);
 80030d0:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <main+0x158>)
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <main+0x148>)
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f7ff fe96 	bl	8002e08 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(&hi2c1, &MPU1);
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <main+0x158>)
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <main+0x148>)
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff ff04 	bl	8002ef0 <MPU6050_Read_Gyro>
	MPU6050_Read_Temp(&hi2c1, &MPU1);
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <main+0x158>)
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <main+0x148>)
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7ff ff72 	bl	8002fd8 <MPU6050_Read_Temp>

	SSD1306_Clear();
 80030f4:	f000 fd00 	bl	8003af8 <SSD1306_Clear>
	SSD1306_GotoXY (15,0);
 80030f8:	2100      	movs	r1, #0
 80030fa:	200f      	movs	r0, #15
 80030fc:	f000 fc3c 	bl	8003978 <SSD1306_GotoXY>
	sprintf(buffer, "%0.1f", DHT1.Temp);
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <main+0x144>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	1c18      	adds	r0, r3, #0
 8003106:	f7ff fb0f 	bl	8002728 <__aeabi_f2d>
 800310a:	0002      	movs	r2, r0
 800310c:	000b      	movs	r3, r1
 800310e:	4926      	ldr	r1, [pc, #152]	; (80031a8 <main+0x15c>)
 8003110:	4826      	ldr	r0, [pc, #152]	; (80031ac <main+0x160>)
 8003112:	f005 fadb 	bl	80086cc <siprintf>
	SSD1306_Puts (buffer, &Font_7x10, 1);
 8003116:	4920      	ldr	r1, [pc, #128]	; (8003198 <main+0x14c>)
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <main+0x160>)
 800311a:	2201      	movs	r2, #1
 800311c:	0018      	movs	r0, r3
 800311e:	f000 fcc5 	bl	8003aac <SSD1306_Puts>
	SSD1306_print(0, 10, MPU1.Ax);
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <main+0x158>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	1c1a      	adds	r2, r3, #0
 8003128:	210a      	movs	r1, #10
 800312a:	2000      	movs	r0, #0
 800312c:	f000 fda8 	bl	8003c80 <SSD1306_print>
	SSD1306_print(45, 10, MPU1.Ay);
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <main+0x158>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	1c1a      	adds	r2, r3, #0
 8003136:	210a      	movs	r1, #10
 8003138:	202d      	movs	r0, #45	; 0x2d
 800313a:	f000 fda1 	bl	8003c80 <SSD1306_print>
	SSD1306_print(90, 10, MPU1.Az);
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <main+0x158>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	1c1a      	adds	r2, r3, #0
 8003144:	210a      	movs	r1, #10
 8003146:	205a      	movs	r0, #90	; 0x5a
 8003148:	f000 fd9a 	bl	8003c80 <SSD1306_print>
	SSD1306_print(0, 20, MPU1.Gx);
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <main+0x158>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	1c1a      	adds	r2, r3, #0
 8003152:	2114      	movs	r1, #20
 8003154:	2000      	movs	r0, #0
 8003156:	f000 fd93 	bl	8003c80 <SSD1306_print>
	SSD1306_print(45, 20, MPU1.Gy);
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <main+0x158>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1c1a      	adds	r2, r3, #0
 8003160:	2114      	movs	r1, #20
 8003162:	202d      	movs	r0, #45	; 0x2d
 8003164:	f000 fd8c 	bl	8003c80 <SSD1306_print>
	SSD1306_print(90, 20, MPU1.Gz);
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <main+0x158>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c1a      	adds	r2, r3, #0
 800316e:	2114      	movs	r1, #20
 8003170:	205a      	movs	r0, #90	; 0x5a
 8003172:	f000 fd85 	bl	8003c80 <SSD1306_print>
	SSD1306_UpdateScreen();
 8003176:	f000 fb43 	bl	8003800 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 800317a:	23fa      	movs	r3, #250	; 0xfa
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	0018      	movs	r0, r3
 8003180:	f001 f898 	bl	80042b4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8003184:	e796      	b.n	80030b4 <main+0x68>
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	200006d4 	.word	0x200006d4
 800318c:	48000800 	.word	0x48000800
 8003190:	20000674 	.word	0x20000674
 8003194:	20000628 	.word	0x20000628
 8003198:	20000000 	.word	0x20000000
 800319c:	0800ac88 	.word	0x0800ac88
 80031a0:	48000400 	.word	0x48000400
 80031a4:	20000750 	.word	0x20000750
 80031a8:	0800ac98 	.word	0x0800ac98
 80031ac:	2000071c 	.word	0x2000071c

080031b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b095      	sub	sp, #84	; 0x54
 80031b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b6:	2420      	movs	r4, #32
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	0018      	movs	r0, r3
 80031bc:	2330      	movs	r3, #48	; 0x30
 80031be:	001a      	movs	r2, r3
 80031c0:	2100      	movs	r1, #0
 80031c2:	f004 fe01 	bl	8007dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c6:	2310      	movs	r3, #16
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	0018      	movs	r0, r3
 80031cc:	2310      	movs	r3, #16
 80031ce:	001a      	movs	r2, r3
 80031d0:	2100      	movs	r1, #0
 80031d2:	f004 fdf9 	bl	8007dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031d6:	003b      	movs	r3, r7
 80031d8:	0018      	movs	r0, r3
 80031da:	2310      	movs	r3, #16
 80031dc:	001a      	movs	r2, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	f004 fdf2 	bl	8007dc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80031e4:	0021      	movs	r1, r4
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2212      	movs	r2, #18
 80031ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	2201      	movs	r2, #1
 80031f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2201      	movs	r2, #1
 80031f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2210      	movs	r2, #16
 80031fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2210      	movs	r2, #16
 8003202:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2202      	movs	r2, #2
 8003208:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	0212      	lsls	r2, r2, #8
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003212:	187b      	adds	r3, r7, r1
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	0352      	lsls	r2, r2, #13
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800321a:	187b      	adds	r3, r7, r1
 800321c:	2200      	movs	r2, #0
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003220:	187b      	adds	r3, r7, r1
 8003222:	0018      	movs	r0, r3
 8003224:	f002 fe96 	bl	8005f54 <HAL_RCC_OscConfig>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d001      	beq.n	8003230 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800322c:	f000 fa1e 	bl	800366c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003230:	2110      	movs	r1, #16
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2202      	movs	r2, #2
 800323c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2101      	movs	r1, #1
 800324e:	0018      	movs	r0, r3
 8003250:	f003 f99e 	bl	8006590 <HAL_RCC_ClockConfig>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003258:	f000 fa08 	bl	800366c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800325c:	003b      	movs	r3, r7
 800325e:	2220      	movs	r2, #32
 8003260:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003262:	003b      	movs	r3, r7
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003268:	003b      	movs	r3, r7
 800326a:	0018      	movs	r0, r3
 800326c:	f003 fae0 	bl	8006830 <HAL_RCCEx_PeriphCLKConfig>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003274:	f000 f9fa 	bl	800366c <Error_Handler>
  }
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b015      	add	sp, #84	; 0x54
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	0018      	movs	r0, r3
 800328a:	230c      	movs	r3, #12
 800328c:	001a      	movs	r2, r3
 800328e:	2100      	movs	r1, #0
 8003290:	f004 fd9a 	bl	8007dc8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <MX_ADC_Init+0xb0>)
 8003296:	4a27      	ldr	r2, [pc, #156]	; (8003334 <MX_ADC_Init+0xb4>)
 8003298:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <MX_ADC_Init+0xb0>)
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <MX_ADC_Init+0xb0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <MX_ADC_Init+0xb0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <MX_ADC_Init+0xb0>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <MX_ADC_Init+0xb0>)
 80032b4:	2204      	movs	r2, #4
 80032b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <MX_ADC_Init+0xb0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <MX_ADC_Init+0xb0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <MX_ADC_Init+0xb0>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <MX_ADC_Init+0xb0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_ADC_Init+0xb0>)
 80032d2:	22c2      	movs	r2, #194	; 0xc2
 80032d4:	32ff      	adds	r2, #255	; 0xff
 80032d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_ADC_Init+0xb0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <MX_ADC_Init+0xb0>)
 80032e0:	2224      	movs	r2, #36	; 0x24
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_ADC_Init+0xb0>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <MX_ADC_Init+0xb0>)
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 f804 	bl	80042fc <HAL_ADC_Init>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80032f8:	f000 f9b8 	bl	800366c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0152      	lsls	r2, r2, #5
 8003308:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	0552      	lsls	r2, r2, #21
 8003310:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003312:	1d3a      	adds	r2, r7, #4
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <MX_ADC_Init+0xb0>)
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f001 f9ff 	bl	800471c <HAL_ADC_ConfigChannel>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003322:	f000 f9a3 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000800 	.word	0x20000800
 8003334:	40012400 	.word	0x40012400

08003338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <MX_I2C1_Init+0x74>)
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <MX_I2C1_Init+0x78>)
 8003340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <MX_I2C1_Init+0x74>)
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <MX_I2C1_Init+0x7c>)
 8003346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <MX_I2C1_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <MX_I2C1_Init+0x74>)
 8003350:	2201      	movs	r2, #1
 8003352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <MX_I2C1_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <MX_I2C1_Init+0x74>)
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <MX_I2C1_Init+0x74>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <MX_I2C1_Init+0x74>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <MX_I2C1_Init+0x74>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <MX_I2C1_Init+0x74>)
 8003374:	0018      	movs	r0, r3
 8003376:	f001 fde9 	bl	8004f4c <HAL_I2C_Init>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800337e:	f000 f975 	bl	800366c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <MX_I2C1_Init+0x74>)
 8003384:	2100      	movs	r1, #0
 8003386:	0018      	movs	r0, r3
 8003388:	f002 fd4c 	bl	8005e24 <HAL_I2CEx_ConfigAnalogFilter>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d001      	beq.n	8003394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003390:	f000 f96c 	bl	800366c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <MX_I2C1_Init+0x74>)
 8003396:	2100      	movs	r1, #0
 8003398:	0018      	movs	r0, r3
 800339a:	f002 fd8f 	bl	8005ebc <HAL_I2CEx_ConfigDigitalFilter>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033a2:	f000 f963 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000628 	.word	0x20000628
 80033b0:	40005400 	.word	0x40005400
 80033b4:	0000020b 	.word	0x0000020b

080033b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <MX_I2C2_Init+0x74>)
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <MX_I2C2_Init+0x78>)
 80033c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <MX_I2C2_Init+0x74>)
 80033c4:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <MX_I2C2_Init+0x7c>)
 80033c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <MX_I2C2_Init+0x74>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <MX_I2C2_Init+0x74>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <MX_I2C2_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <MX_I2C2_Init+0x74>)
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <MX_I2C2_Init+0x74>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_I2C2_Init+0x74>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_I2C2_Init+0x74>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MX_I2C2_Init+0x74>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f001 fda9 	bl	8004f4c <HAL_I2C_Init>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80033fe:	f000 f935 	bl	800366c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MX_I2C2_Init+0x74>)
 8003404:	2100      	movs	r1, #0
 8003406:	0018      	movs	r0, r3
 8003408:	f002 fd0c 	bl	8005e24 <HAL_I2CEx_ConfigAnalogFilter>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003410:	f000 f92c 	bl	800366c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <MX_I2C2_Init+0x74>)
 8003416:	2100      	movs	r1, #0
 8003418:	0018      	movs	r0, r3
 800341a:	f002 fd4f 	bl	8005ebc <HAL_I2CEx_ConfigDigitalFilter>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003422:	f000 f923 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000688 	.word	0x20000688
 8003430:	40005800 	.word	0x40005800
 8003434:	2010091a 	.word	0x2010091a

08003438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343e:	2308      	movs	r3, #8
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	0018      	movs	r0, r3
 8003444:	2310      	movs	r3, #16
 8003446:	001a      	movs	r2, r3
 8003448:	2100      	movs	r1, #0
 800344a:	f004 fcbd 	bl	8007dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800344e:	003b      	movs	r3, r7
 8003450:	0018      	movs	r0, r3
 8003452:	2308      	movs	r3, #8
 8003454:	001a      	movs	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	f004 fcb6 	bl	8007dc8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <MX_TIM3_Init+0xa0>)
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <MX_TIM3_Init+0xa4>)
 8003460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <MX_TIM3_Init+0xa0>)
 8003464:	222f      	movs	r2, #47	; 0x2f
 8003466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <MX_TIM3_Init+0xa0>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <MX_TIM3_Init+0xa0>)
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <MX_TIM3_Init+0xa8>)
 8003472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <MX_TIM3_Init+0xa0>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <MX_TIM3_Init+0xa0>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <MX_TIM3_Init+0xa0>)
 8003482:	0018      	movs	r0, r3
 8003484:	f003 faa2 	bl	80069cc <HAL_TIM_Base_Init>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800348c:	f000 f8ee 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003490:	2108      	movs	r1, #8
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	0152      	lsls	r2, r2, #5
 8003498:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800349a:	187a      	adds	r2, r7, r1
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <MX_TIM3_Init+0xa0>)
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f003 fb27 	bl	8006af4 <HAL_TIM_ConfigClockSource>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80034aa:	f000 f8df 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ae:	003b      	movs	r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b4:	003b      	movs	r3, r7
 80034b6:	2200      	movs	r2, #0
 80034b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034ba:	003a      	movs	r2, r7
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <MX_TIM3_Init+0xa0>)
 80034be:	0011      	movs	r1, r2
 80034c0:	0018      	movs	r0, r3
 80034c2:	f003 fcfb 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80034ca:	f000 f8cf 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b006      	add	sp, #24
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	200006d4 	.word	0x200006d4
 80034dc:	40000400 	.word	0x40000400
 80034e0:	0000fffe 	.word	0x0000fffe

080034e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <MX_USART2_UART_Init+0x58>)
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <MX_USART2_UART_Init+0x5c>)
 80034ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <MX_USART2_UART_Init+0x58>)
 80034f0:	22e1      	movs	r2, #225	; 0xe1
 80034f2:	0252      	lsls	r2, r2, #9
 80034f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <MX_USART2_UART_Init+0x58>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <MX_USART2_UART_Init+0x58>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <MX_USART2_UART_Init+0x58>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <MX_USART2_UART_Init+0x58>)
 800350a:	220c      	movs	r2, #12
 800350c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <MX_USART2_UART_Init+0x58>)
 8003510:	2200      	movs	r2, #0
 8003512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <MX_USART2_UART_Init+0x58>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <MX_USART2_UART_Init+0x58>)
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <MX_USART2_UART_Init+0x58>)
 8003522:	2200      	movs	r2, #0
 8003524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <MX_USART2_UART_Init+0x58>)
 8003528:	0018      	movs	r0, r3
 800352a:	f003 fd1f 	bl	8006f6c <HAL_UART_Init>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003532:	f000 f89b 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000077c 	.word	0x2000077c
 8003540:	40004400 	.word	0x40004400

08003544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b08b      	sub	sp, #44	; 0x2c
 8003548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354a:	2414      	movs	r4, #20
 800354c:	193b      	adds	r3, r7, r4
 800354e:	0018      	movs	r0, r3
 8003550:	2314      	movs	r3, #20
 8003552:	001a      	movs	r2, r3
 8003554:	2100      	movs	r1, #0
 8003556:	f004 fc37 	bl	8007dc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <MX_GPIO_Init+0x11c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <MX_GPIO_Init+0x11c>)
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0309      	lsls	r1, r1, #12
 8003564:	430a      	orrs	r2, r1
 8003566:	615a      	str	r2, [r3, #20]
 8003568:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <MX_GPIO_Init+0x11c>)
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <MX_GPIO_Init+0x11c>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <MX_GPIO_Init+0x11c>)
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	03c9      	lsls	r1, r1, #15
 8003580:	430a      	orrs	r2, r1
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <MX_GPIO_Init+0x11c>)
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	03db      	lsls	r3, r3, #15
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <MX_GPIO_Init+0x11c>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <MX_GPIO_Init+0x11c>)
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0289      	lsls	r1, r1, #10
 800359c:	430a      	orrs	r2, r1
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <MX_GPIO_Init+0x11c>)
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <MX_GPIO_Init+0x11c>)
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <MX_GPIO_Init+0x11c>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	02c9      	lsls	r1, r1, #11
 80035b8:	430a      	orrs	r2, r1
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	4b28      	ldr	r3, [pc, #160]	; (8003660 <MX_GPIO_Init+0x11c>)
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	02db      	lsls	r3, r3, #11
 80035c4:	4013      	ands	r3, r2
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	4825      	ldr	r0, [pc, #148]	; (8003664 <MX_GPIO_Init+0x120>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	0019      	movs	r1, r3
 80035d4:	f001 fc81 	bl	8004eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	015b      	lsls	r3, r3, #5
 80035dc:	4822      	ldr	r0, [pc, #136]	; (8003668 <MX_GPIO_Init+0x124>)
 80035de:	2201      	movs	r2, #1
 80035e0:	0019      	movs	r1, r3
 80035e2:	f001 fc7a 	bl	8004eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	0192      	lsls	r2, r2, #6
 80035ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2201      	movs	r2, #1
 80035f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8003600:	193b      	adds	r3, r7, r4
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <MX_GPIO_Init+0x120>)
 8003604:	0019      	movs	r1, r3
 8003606:	0010      	movs	r0, r2
 8003608:	f001 fada 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800360c:	193b      	adds	r3, r7, r4
 800360e:	2210      	movs	r2, #16
 8003610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003612:	193b      	adds	r3, r7, r4
 8003614:	2284      	movs	r2, #132	; 0x84
 8003616:	0392      	lsls	r2, r2, #14
 8003618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800361a:	193b      	adds	r3, r7, r4
 800361c:	2201      	movs	r2, #1
 800361e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003620:	193a      	adds	r2, r7, r4
 8003622:	2390      	movs	r3, #144	; 0x90
 8003624:	05db      	lsls	r3, r3, #23
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f001 fac9 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800362e:	0021      	movs	r1, r4
 8003630:	187b      	adds	r3, r7, r1
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	0152      	lsls	r2, r2, #5
 8003636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2201      	movs	r2, #1
 800363c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2203      	movs	r2, #3
 8003648:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	187b      	adds	r3, r7, r1
 800364c:	4a06      	ldr	r2, [pc, #24]	; (8003668 <MX_GPIO_Init+0x124>)
 800364e:	0019      	movs	r1, r3
 8003650:	0010      	movs	r0, r2
 8003652:	f001 fab5 	bl	8004bc0 <HAL_GPIO_Init>

}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b00b      	add	sp, #44	; 0x2c
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40021000 	.word	0x40021000
 8003664:	48000800 	.word	0x48000800
 8003668:	48000400 	.word	0x48000400

0800366c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003674:	e7fe      	b.n	8003674 <Error_Handler+0x8>
	...

08003678 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800367e:	f000 fa45 	bl	8003b0c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <SSD1306_Init+0x178>)
 8003684:	485b      	ldr	r0, [pc, #364]	; (80037f4 <SSD1306_Init+0x17c>)
 8003686:	2201      	movs	r2, #1
 8003688:	2178      	movs	r1, #120	; 0x78
 800368a:	f002 f85f 	bl	800574c <HAL_I2C_IsDeviceReady>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d001      	beq.n	8003696 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8003692:	2300      	movs	r3, #0
 8003694:	e0a8      	b.n	80037e8 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003696:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <SSD1306_Init+0x180>)
 8003698:	607b      	str	r3, [r7, #4]
	while(p>0)
 800369a:	e002      	b.n	80036a2 <SSD1306_Init+0x2a>
		p--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f9      	bne.n	800369c <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80036a8:	22ae      	movs	r2, #174	; 0xae
 80036aa:	2100      	movs	r1, #0
 80036ac:	2078      	movs	r0, #120	; 0x78
 80036ae:	f000 fabf 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80036b2:	2220      	movs	r2, #32
 80036b4:	2100      	movs	r1, #0
 80036b6:	2078      	movs	r0, #120	; 0x78
 80036b8:	f000 faba 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80036bc:	2210      	movs	r2, #16
 80036be:	2100      	movs	r1, #0
 80036c0:	2078      	movs	r0, #120	; 0x78
 80036c2:	f000 fab5 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80036c6:	22b0      	movs	r2, #176	; 0xb0
 80036c8:	2100      	movs	r1, #0
 80036ca:	2078      	movs	r0, #120	; 0x78
 80036cc:	f000 fab0 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80036d0:	22c8      	movs	r2, #200	; 0xc8
 80036d2:	2100      	movs	r1, #0
 80036d4:	2078      	movs	r0, #120	; 0x78
 80036d6:	f000 faab 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	2078      	movs	r0, #120	; 0x78
 80036e0:	f000 faa6 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80036e4:	2210      	movs	r2, #16
 80036e6:	2100      	movs	r1, #0
 80036e8:	2078      	movs	r0, #120	; 0x78
 80036ea:	f000 faa1 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	2100      	movs	r1, #0
 80036f2:	2078      	movs	r0, #120	; 0x78
 80036f4:	f000 fa9c 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80036f8:	2281      	movs	r2, #129	; 0x81
 80036fa:	2100      	movs	r1, #0
 80036fc:	2078      	movs	r0, #120	; 0x78
 80036fe:	f000 fa97 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	2100      	movs	r1, #0
 8003706:	2078      	movs	r0, #120	; 0x78
 8003708:	f000 fa92 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800370c:	22a1      	movs	r2, #161	; 0xa1
 800370e:	2100      	movs	r1, #0
 8003710:	2078      	movs	r0, #120	; 0x78
 8003712:	f000 fa8d 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003716:	22a6      	movs	r2, #166	; 0xa6
 8003718:	2100      	movs	r1, #0
 800371a:	2078      	movs	r0, #120	; 0x78
 800371c:	f000 fa88 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003720:	22a8      	movs	r2, #168	; 0xa8
 8003722:	2100      	movs	r1, #0
 8003724:	2078      	movs	r0, #120	; 0x78
 8003726:	f000 fa83 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800372a:	223f      	movs	r2, #63	; 0x3f
 800372c:	2100      	movs	r1, #0
 800372e:	2078      	movs	r0, #120	; 0x78
 8003730:	f000 fa7e 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003734:	22a4      	movs	r2, #164	; 0xa4
 8003736:	2100      	movs	r1, #0
 8003738:	2078      	movs	r0, #120	; 0x78
 800373a:	f000 fa79 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800373e:	22d3      	movs	r2, #211	; 0xd3
 8003740:	2100      	movs	r1, #0
 8003742:	2078      	movs	r0, #120	; 0x78
 8003744:	f000 fa74 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	2078      	movs	r0, #120	; 0x78
 800374e:	f000 fa6f 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003752:	22d5      	movs	r2, #213	; 0xd5
 8003754:	2100      	movs	r1, #0
 8003756:	2078      	movs	r0, #120	; 0x78
 8003758:	f000 fa6a 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800375c:	22f0      	movs	r2, #240	; 0xf0
 800375e:	2100      	movs	r1, #0
 8003760:	2078      	movs	r0, #120	; 0x78
 8003762:	f000 fa65 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003766:	22d9      	movs	r2, #217	; 0xd9
 8003768:	2100      	movs	r1, #0
 800376a:	2078      	movs	r0, #120	; 0x78
 800376c:	f000 fa60 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003770:	2222      	movs	r2, #34	; 0x22
 8003772:	2100      	movs	r1, #0
 8003774:	2078      	movs	r0, #120	; 0x78
 8003776:	f000 fa5b 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800377a:	22da      	movs	r2, #218	; 0xda
 800377c:	2100      	movs	r1, #0
 800377e:	2078      	movs	r0, #120	; 0x78
 8003780:	f000 fa56 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003784:	2212      	movs	r2, #18
 8003786:	2100      	movs	r1, #0
 8003788:	2078      	movs	r0, #120	; 0x78
 800378a:	f000 fa51 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800378e:	22db      	movs	r2, #219	; 0xdb
 8003790:	2100      	movs	r1, #0
 8003792:	2078      	movs	r0, #120	; 0x78
 8003794:	f000 fa4c 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003798:	2220      	movs	r2, #32
 800379a:	2100      	movs	r1, #0
 800379c:	2078      	movs	r0, #120	; 0x78
 800379e:	f000 fa47 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80037a2:	228d      	movs	r2, #141	; 0x8d
 80037a4:	2100      	movs	r1, #0
 80037a6:	2078      	movs	r0, #120	; 0x78
 80037a8:	f000 fa42 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80037ac:	2214      	movs	r2, #20
 80037ae:	2100      	movs	r1, #0
 80037b0:	2078      	movs	r0, #120	; 0x78
 80037b2:	f000 fa3d 	bl	8003c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80037b6:	22af      	movs	r2, #175	; 0xaf
 80037b8:	2100      	movs	r1, #0
 80037ba:	2078      	movs	r0, #120	; 0x78
 80037bc:	f000 fa38 	bl	8003c30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80037c0:	222e      	movs	r2, #46	; 0x2e
 80037c2:	2100      	movs	r1, #0
 80037c4:	2078      	movs	r0, #120	; 0x78
 80037c6:	f000 fa33 	bl	8003c30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f000 f84c 	bl	8003868 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80037d0:	f000 f816 	bl	8003800 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <SSD1306_Init+0x184>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <SSD1306_Init+0x184>)
 80037dc:	2200      	movs	r2, #0
 80037de:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <SSD1306_Init+0x184>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	00004e20 	.word	0x00004e20
 80037f4:	20000688 	.word	0x20000688
 80037f8:	000009c4 	.word	0x000009c4
 80037fc:	20000600 	.word	0x20000600

08003800 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e021      	b.n	8003852 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	3b50      	subs	r3, #80	; 0x50
 8003814:	b2db      	uxtb	r3, r3
 8003816:	001a      	movs	r2, r3
 8003818:	2100      	movs	r1, #0
 800381a:	2078      	movs	r0, #120	; 0x78
 800381c:	f000 fa08 	bl	8003c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	2078      	movs	r0, #120	; 0x78
 8003826:	f000 fa03 	bl	8003c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800382a:	2210      	movs	r2, #16
 800382c:	2100      	movs	r1, #0
 800382e:	2078      	movs	r0, #120	; 0x78
 8003830:	f000 f9fe 	bl	8003c30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	01da      	lsls	r2, r3, #7
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <SSD1306_UpdateScreen+0x64>)
 800383c:	18d2      	adds	r2, r2, r3
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	2140      	movs	r1, #64	; 0x40
 8003842:	2078      	movs	r0, #120	; 0x78
 8003844:	f000 f976 	bl	8003b34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003848:	1dfb      	adds	r3, r7, #7
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	3201      	adds	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b07      	cmp	r3, #7
 8003858:	d9d9      	bls.n	800380e <SSD1306_UpdateScreen+0xe>
	}
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000200 	.word	0x20000200

08003868 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	0002      	movs	r2, r0
 8003870:	1dfb      	adds	r3, r7, #7
 8003872:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003874:	1dfb      	adds	r3, r7, #7
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <SSD1306_Fill+0x18>
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <SSD1306_Fill+0x1a>
 8003880:	23ff      	movs	r3, #255	; 0xff
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	00d2      	lsls	r2, r2, #3
 8003886:	4804      	ldr	r0, [pc, #16]	; (8003898 <SSD1306_Fill+0x30>)
 8003888:	0019      	movs	r1, r3
 800388a:	f004 fa9d 	bl	8007dc8 <memset>
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	20000200 	.word	0x20000200

0800389c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	0004      	movs	r4, r0
 80038a4:	0008      	movs	r0, r1
 80038a6:	0011      	movs	r1, r2
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	1c22      	adds	r2, r4, #0
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	1c02      	adds	r2, r0, #0
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	1cfb      	adds	r3, r7, #3
 80038b6:	1c0a      	adds	r2, r1, #0
 80038b8:	701a      	strb	r2, [r3, #0]
	if (
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b7f      	cmp	r3, #127	; 0x7f
 80038c0:	d852      	bhi.n	8003968 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	2b3f      	cmp	r3, #63	; 0x3f
 80038c8:	d84e      	bhi.n	8003968 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <SSD1306_DrawPixel+0xd4>)
 80038cc:	791b      	ldrb	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80038d2:	1cfb      	adds	r3, r7, #3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	425a      	negs	r2, r3
 80038d8:	4153      	adcs	r3, r2
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	1cfb      	adds	r3, r7, #3
 80038de:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80038e0:	1cfb      	adds	r3, r7, #3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11e      	bne.n	8003926 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80038e8:	1dbb      	adds	r3, r7, #6
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	b298      	uxth	r0, r3
 80038f4:	0003      	movs	r3, r0
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <SSD1306_DrawPixel+0xd8>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	b25a      	sxtb	r2, r3
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	2107      	movs	r1, #7
 8003906:	400b      	ands	r3, r1
 8003908:	2101      	movs	r1, #1
 800390a:	4099      	lsls	r1, r3
 800390c:	000b      	movs	r3, r1
 800390e:	b25b      	sxtb	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	b259      	sxtb	r1, r3
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	0003      	movs	r3, r0
 800391a:	01db      	lsls	r3, r3, #7
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	b2c9      	uxtb	r1, r1
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <SSD1306_DrawPixel+0xd8>)
 8003922:	54d1      	strb	r1, [r2, r3]
 8003924:	e021      	b.n	800396a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	b298      	uxth	r0, r3
 8003932:	0003      	movs	r3, r0
 8003934:	01db      	lsls	r3, r3, #7
 8003936:	18d3      	adds	r3, r2, r3
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <SSD1306_DrawPixel+0xd8>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	b25b      	sxtb	r3, r3
 800393e:	1d3a      	adds	r2, r7, #4
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	2107      	movs	r1, #7
 8003944:	400a      	ands	r2, r1
 8003946:	2101      	movs	r1, #1
 8003948:	4091      	lsls	r1, r2
 800394a:	000a      	movs	r2, r1
 800394c:	b252      	sxtb	r2, r2
 800394e:	43d2      	mvns	r2, r2
 8003950:	b252      	sxtb	r2, r2
 8003952:	4013      	ands	r3, r2
 8003954:	b259      	sxtb	r1, r3
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	0003      	movs	r3, r0
 800395c:	01db      	lsls	r3, r3, #7
 800395e:	18d3      	adds	r3, r2, r3
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <SSD1306_DrawPixel+0xd8>)
 8003964:	54d1      	strb	r1, [r2, r3]
 8003966:	e000      	b.n	800396a <SSD1306_DrawPixel+0xce>
		return;
 8003968:	46c0      	nop			; (mov r8, r8)
	}
}
 800396a:	46bd      	mov	sp, r7
 800396c:	b003      	add	sp, #12
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	20000600 	.word	0x20000600
 8003974:	20000200 	.word	0x20000200

08003978 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	0002      	movs	r2, r0
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	1c0a      	adds	r2, r1, #0
 8003988:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <SSD1306_GotoXY+0x2c>)
 800398c:	1dba      	adds	r2, r7, #6
 800398e:	8812      	ldrh	r2, [r2, #0]
 8003990:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <SSD1306_GotoXY+0x2c>)
 8003994:	1d3a      	adds	r2, r7, #4
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	805a      	strh	r2, [r3, #2]
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	20000600 	.word	0x20000600

080039a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6039      	str	r1, [r7, #0]
 80039b0:	0011      	movs	r1, r2
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	1c02      	adds	r2, r0, #0
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	1dbb      	adds	r3, r7, #6
 80039ba:	1c0a      	adds	r2, r1, #0
 80039bc:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <SSD1306_Putc+0x100>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	001a      	movs	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	18d3      	adds	r3, r2, r3
	if (
 80039ca:	2b7f      	cmp	r3, #127	; 0x7f
 80039cc:	dc07      	bgt.n	80039de <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <SSD1306_Putc+0x100>)
 80039d0:	885b      	ldrh	r3, [r3, #2]
 80039d2:	001a      	movs	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80039da:	2b3f      	cmp	r3, #63	; 0x3f
 80039dc:	dd01      	ble.n	80039e2 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	e05e      	b.n	8003aa0 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e04a      	b.n	8003a7e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3b20      	subs	r3, #32
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	7849      	ldrb	r1, [r1, #1]
 80039f6:	434b      	muls	r3, r1
 80039f8:	0019      	movs	r1, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	18cb      	adds	r3, r1, r3
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e02f      	b.n	8003a6c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	409a      	lsls	r2, r3
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	4013      	ands	r3, r2
 8003a18:	d011      	beq.n	8003a3e <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	b298      	uxth	r0, r3
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a28:	885a      	ldrh	r2, [r3, #2]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	b299      	uxth	r1, r3
 8003a32:	1dbb      	adds	r3, r7, #6
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	001a      	movs	r2, r3
 8003a38:	f7ff ff30 	bl	800389c <SSD1306_DrawPixel>
 8003a3c:	e013      	b.n	8003a66 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	b298      	uxth	r0, r3
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a4c:	885a      	ldrh	r2, [r3, #2]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	b299      	uxth	r1, r3
 8003a56:	1dbb      	adds	r3, r7, #6
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	425a      	negs	r2, r3
 8003a5c:	4153      	adcs	r3, r2
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	001a      	movs	r2, r3
 8003a62:	f7ff ff1b 	bl	800389c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	001a      	movs	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d3c9      	bcc.n	8003a0c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	001a      	movs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d3ae      	bcc.n	80039e8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <SSD1306_Putc+0x100>)
 8003a9a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	781b      	ldrb	r3, [r3, #0]
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b006      	add	sp, #24
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000600 	.word	0x20000600

08003aac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8003aba:	e013      	b.n	8003ae4 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	7818      	ldrb	r0, [r3, #0]
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	f7ff ff6e 	bl	80039a8 <SSD1306_Putc>
 8003acc:	0003      	movs	r3, r0
 8003ace:	001a      	movs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d002      	beq.n	8003ade <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	e008      	b.n	8003af0 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e7      	bne.n	8003abc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	781b      	ldrb	r3, [r3, #0]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff feb3 	bl	8003868 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003b02:	f7ff fe7d 	bl	8003800 <SSD1306_UpdateScreen>
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <ssd1306_I2C_Init+0x24>)
 8003b14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b16:	e002      	b.n	8003b1e <ssd1306_I2C_Init+0x12>
		p--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f9      	bne.n	8003b18 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b002      	add	sp, #8
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	0003d090 	.word	0x0003d090

08003b34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b0c7      	sub	sp, #284	; 0x11c
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	0004      	movs	r4, r0
 8003b3c:	0008      	movs	r0, r1
 8003b3e:	603a      	str	r2, [r7, #0]
 8003b40:	0019      	movs	r1, r3
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <ssd1306_I2C_WriteMulti+0xe8>)
 8003b44:	2288      	movs	r2, #136	; 0x88
 8003b46:	0052      	lsls	r2, r2, #1
 8003b48:	4694      	mov	ip, r2
 8003b4a:	44bc      	add	ip, r7
 8003b4c:	4463      	add	r3, ip
 8003b4e:	1c22      	adds	r2, r4, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <ssd1306_I2C_WriteMulti+0xec>)
 8003b54:	2288      	movs	r2, #136	; 0x88
 8003b56:	0052      	lsls	r2, r2, #1
 8003b58:	4694      	mov	ip, r2
 8003b5a:	44bc      	add	ip, r7
 8003b5c:	4463      	add	r3, ip
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <ssd1306_I2C_WriteMulti+0xf0>)
 8003b64:	2288      	movs	r2, #136	; 0x88
 8003b66:	0052      	lsls	r2, r2, #1
 8003b68:	4694      	mov	ip, r2
 8003b6a:	44bc      	add	ip, r7
 8003b6c:	4463      	add	r3, ip
 8003b6e:	1c0a      	adds	r2, r1, #0
 8003b70:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <ssd1306_I2C_WriteMulti+0xf4>)
 8003b74:	2288      	movs	r2, #136	; 0x88
 8003b76:	0052      	lsls	r2, r2, #1
 8003b78:	4694      	mov	ip, r2
 8003b7a:	44bc      	add	ip, r7
 8003b7c:	4463      	add	r3, ip
 8003b7e:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <ssd1306_I2C_WriteMulti+0xec>)
 8003b80:	2188      	movs	r1, #136	; 0x88
 8003b82:	0049      	lsls	r1, r1, #1
 8003b84:	468c      	mov	ip, r1
 8003b86:	44bc      	add	ip, r7
 8003b88:	4462      	add	r2, ip
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003b8e:	2310      	movs	r3, #16
 8003b90:	33ff      	adds	r3, #255	; 0xff
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e015      	b.n	8003bc6 <ssd1306_I2C_WriteMulti+0x92>
dt[i+1] = data[i];
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	30ff      	adds	r0, #255	; 0xff
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	18d2      	adds	r2, r2, r3
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	7811      	ldrb	r1, [r2, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <ssd1306_I2C_WriteMulti+0xf4>)
 8003bb0:	2488      	movs	r4, #136	; 0x88
 8003bb2:	0064      	lsls	r4, r4, #1
 8003bb4:	46a4      	mov	ip, r4
 8003bb6:	44bc      	add	ip, r7
 8003bb8:	4462      	add	r2, ip
 8003bba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	3201      	adds	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	33ff      	adds	r3, #255	; 0xff
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <ssd1306_I2C_WriteMulti+0xf0>)
 8003bd2:	2188      	movs	r1, #136	; 0x88
 8003bd4:	0049      	lsls	r1, r1, #1
 8003bd6:	468c      	mov	ip, r1
 8003bd8:	44bc      	add	ip, r7
 8003bda:	4462      	add	r2, ip
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d8db      	bhi.n	8003b9a <ssd1306_I2C_WriteMulti+0x66>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <ssd1306_I2C_WriteMulti+0xe8>)
 8003be4:	2288      	movs	r2, #136	; 0x88
 8003be6:	0052      	lsls	r2, r2, #1
 8003be8:	4694      	mov	ip, r2
 8003bea:	44bc      	add	ip, r7
 8003bec:	4463      	add	r3, ip
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <ssd1306_I2C_WriteMulti+0xf0>)
 8003bf4:	2288      	movs	r2, #136	; 0x88
 8003bf6:	0052      	lsls	r2, r2, #1
 8003bf8:	4694      	mov	ip, r2
 8003bfa:	44bc      	add	ip, r7
 8003bfc:	4463      	add	r3, ip
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	220c      	movs	r2, #12
 8003c06:	18ba      	adds	r2, r7, r2
 8003c08:	4808      	ldr	r0, [pc, #32]	; (8003c2c <ssd1306_I2C_WriteMulti+0xf8>)
 8003c0a:	240a      	movs	r4, #10
 8003c0c:	9400      	str	r4, [sp, #0]
 8003c0e:	f001 fa33 	bl	8005078 <HAL_I2C_Master_Transmit>
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b045      	add	sp, #276	; 0x114
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	fffffef7 	.word	0xfffffef7
 8003c20:	fffffef6 	.word	0xfffffef6
 8003c24:	fffffef4 	.word	0xfffffef4
 8003c28:	fffffefc 	.word	0xfffffefc
 8003c2c:	20000688 	.word	0x20000688

08003c30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	0004      	movs	r4, r0
 8003c38:	0008      	movs	r0, r1
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	1c22      	adds	r2, r4, #0
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	1dbb      	adds	r3, r7, #6
 8003c44:	1c02      	adds	r2, r0, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	1d7b      	adds	r3, r7, #5
 8003c4a:	1c0a      	adds	r2, r1, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8003c4e:	200c      	movs	r0, #12
 8003c50:	183b      	adds	r3, r7, r0
 8003c52:	1dba      	adds	r2, r7, #6
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8003c58:	183b      	adds	r3, r7, r0
 8003c5a:	1d7a      	adds	r2, r7, #5
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b299      	uxth	r1, r3
 8003c66:	183a      	adds	r2, r7, r0
 8003c68:	4804      	ldr	r0, [pc, #16]	; (8003c7c <ssd1306_I2C_Write+0x4c>)
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f001 fa02 	bl	8005078 <HAL_I2C_Master_Transmit>
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b005      	add	sp, #20
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	20000688 	.word	0x20000688

08003c80 <SSD1306_print>:

//Custom
void SSD1306_print(uint16_t x, uint16_t y, float value){
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b091      	sub	sp, #68	; 0x44
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	603a      	str	r2, [r7, #0]
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	1c02      	adds	r2, r0, #0
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	1c0a      	adds	r2, r1, #0
 8003c92:	801a      	strh	r2, [r3, #0]
	char buffer[50];
	SSD1306_GotoXY (x, y);
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	0011      	movs	r1, r2
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff fe6a 	bl	8003978 <SSD1306_GotoXY>
	sprintf(buffer, "%0.1f", value);
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f7fe fd3f 	bl	8002728 <__aeabi_f2d>
 8003caa:	0002      	movs	r2, r0
 8003cac:	000b      	movs	r3, r1
 8003cae:	4907      	ldr	r1, [pc, #28]	; (8003ccc <SSD1306_print+0x4c>)
 8003cb0:	240c      	movs	r4, #12
 8003cb2:	1938      	adds	r0, r7, r4
 8003cb4:	f004 fd0a 	bl	80086cc <siprintf>
	SSD1306_Puts (buffer, &Font_7x10, 1);
 8003cb8:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <SSD1306_print+0x50>)
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff fef4 	bl	8003aac <SSD1306_Puts>
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b011      	add	sp, #68	; 0x44
 8003cca:	bd90      	pop	{r4, r7, pc}
 8003ccc:	0800aca0 	.word	0x0800aca0
 8003cd0:	20000000 	.word	0x20000000

08003cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_MspInit+0x44>)
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_MspInit+0x44>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	619a      	str	r2, [r3, #24]
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_MspInit+0x44>)
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_MspInit+0x44>)
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_MspInit+0x44>)
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	0549      	lsls	r1, r1, #21
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_MspInit+0x44>)
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	055b      	lsls	r3, r3, #21
 8003d08:	4013      	ands	r3, r2
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b08b      	sub	sp, #44	; 0x2c
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	2414      	movs	r4, #20
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	0018      	movs	r0, r3
 8003d2a:	2314      	movs	r3, #20
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f004 f84a 	bl	8007dc8 <memset>
  if(hadc->Instance==ADC1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_ADC_MspInit+0x94>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d133      	bne.n	8003da6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0089      	lsls	r1, r1, #2
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	619a      	str	r2, [r3, #24]
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	0289      	lsls	r1, r1, #10
 8003d64:	430a      	orrs	r2, r1
 8003d66:	615a      	str	r2, [r3, #20]
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_ADC_MspInit+0x98>)
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	2203      	movs	r2, #3
 8003d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	193a      	adds	r2, r7, r4
 8003d8a:	2390      	movs	r3, #144	; 0x90
 8003d8c:	05db      	lsls	r3, r3, #23
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 ff15 	bl	8004bc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	200c      	movs	r0, #12
 8003d9c:	f000 fe60 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003da0:	200c      	movs	r0, #12
 8003da2:	f000 fe72 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b00b      	add	sp, #44	; 0x2c
 8003dac:	bd90      	pop	{r4, r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	40012400 	.word	0x40012400
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b08d      	sub	sp, #52	; 0x34
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	241c      	movs	r4, #28
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	2314      	movs	r3, #20
 8003dc8:	001a      	movs	r2, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f003 fffc 	bl	8007dc8 <memset>
  if(hi2c->Instance==I2C1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a39      	ldr	r2, [pc, #228]	; (8003ebc <HAL_I2C_MspInit+0x104>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d134      	bne.n	8003e44 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dda:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	0289      	lsls	r1, r1, #10
 8003de4:	430a      	orrs	r2, r1
 8003de6:	615a      	str	r2, [r3, #20]
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	22c0      	movs	r2, #192	; 0xc0
 8003dfa:	00d2      	lsls	r2, r2, #3
 8003dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dfe:	0021      	movs	r1, r4
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	2212      	movs	r2, #18
 8003e04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2204      	movs	r2, #4
 8003e16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e18:	187a      	adds	r2, r7, r1
 8003e1a:	2390      	movs	r3, #144	; 0x90
 8003e1c:	05db      	lsls	r3, r3, #23
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fecd 	bl	8004bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	0389      	lsls	r1, r1, #14
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	039b      	lsls	r3, r3, #14
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e42:	e037      	b.n	8003eb4 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_I2C_MspInit+0x10c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d132      	bne.n	8003eb4 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	02c9      	lsls	r1, r1, #11
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	02db      	lsls	r3, r3, #11
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e6a:	211c      	movs	r1, #28
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	22c0      	movs	r2, #192	; 0xc0
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2212      	movs	r2, #18
 8003e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	2203      	movs	r2, #3
 8003e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2201      	movs	r2, #1
 8003e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_I2C_MspInit+0x110>)
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f000 fe94 	bl	8004bc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	03c9      	lsls	r1, r1, #15
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	61da      	str	r2, [r3, #28]
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_I2C_MspInit+0x108>)
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	03db      	lsls	r3, r3, #15
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b00d      	add	sp, #52	; 0x34
 8003eba:	bd90      	pop	{r4, r7, pc}
 8003ebc:	40005400 	.word	0x40005400
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40005800 	.word	0x40005800
 8003ec8:	48000400 	.word	0x48000400

08003ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <HAL_TIM_Base_MspInit+0x34>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10b      	bne.n	8003ef6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_TIM_Base_MspInit+0x38>)
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_TIM_Base_MspInit+0x38>)
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	61da      	str	r2, [r3, #28]
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_TIM_Base_MspInit+0x38>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b08b      	sub	sp, #44	; 0x2c
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	2414      	movs	r4, #20
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	0018      	movs	r0, r3
 8003f16:	2314      	movs	r3, #20
 8003f18:	001a      	movs	r2, r3
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f003 ff54 	bl	8007dc8 <memset>
  if(huart->Instance==USART2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d13a      	bne.n	8003fa0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0289      	lsls	r1, r1, #10
 8003f34:	430a      	orrs	r2, r1
 8003f36:	61da      	str	r2, [r3, #28]
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	029b      	lsls	r3, r3, #10
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0289      	lsls	r1, r1, #10
 8003f50:	430a      	orrs	r2, r1
 8003f52:	615a      	str	r2, [r3, #20]
 8003f54:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f62:	0021      	movs	r1, r4
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	220c      	movs	r2, #12
 8003f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2201      	movs	r2, #1
 8003f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f82:	187a      	adds	r2, r7, r1
 8003f84:	2390      	movs	r3, #144	; 0x90
 8003f86:	05db      	lsls	r3, r3, #23
 8003f88:	0011      	movs	r1, r2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fe18 	bl	8004bc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	201c      	movs	r0, #28
 8003f96:	f000 fd63 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f9a:	201c      	movs	r0, #28
 8003f9c:	f000 fd75 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b00b      	add	sp, #44	; 0x2c
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	40004400 	.word	0x40004400
 8003fac:	40021000 	.word	0x40021000

08003fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <NMI_Handler+0x4>

08003fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fba:	e7fe      	b.n	8003fba <HardFault_Handler+0x4>

08003fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fd4:	f000 f952 	bl	800427c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <ADC1_IRQHandler+0x14>)
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fac8 	bl	800457c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	20000800 	.word	0x20000800

08003ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <USART2_IRQHandler+0x14>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f003 f808 	bl	8007014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	2000077c 	.word	0x2000077c

08004010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	return 1;
 8004014:	2301      	movs	r3, #1
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_kill>:

int _kill(int pid, int sig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004026:	f003 fea5 	bl	8007d74 <__errno>
 800402a:	0003      	movs	r3, r0
 800402c:	2216      	movs	r2, #22
 800402e:	601a      	str	r2, [r3, #0]
	return -1;
 8004030:	2301      	movs	r3, #1
 8004032:	425b      	negs	r3, r3
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}

0800403c <_exit>:

void _exit (int status)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004044:	2301      	movs	r3, #1
 8004046:	425a      	negs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff ffe5 	bl	800401c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004052:	e7fe      	b.n	8004052 <_exit+0x16>

08004054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e00a      	b.n	800407c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004066:	e000      	b.n	800406a <_read+0x16>
 8004068:	bf00      	nop
 800406a:	0001      	movs	r1, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	60ba      	str	r2, [r7, #8]
 8004072:	b2ca      	uxtb	r2, r1
 8004074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3301      	adds	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	dbf0      	blt.n	8004066 <_read+0x12>
	}

return len;
 8004084:	687b      	ldr	r3, [r7, #4]
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b006      	add	sp, #24
 800408c:	bd80      	pop	{r7, pc}

0800408e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e009      	b.n	80040b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	60ba      	str	r2, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	0018      	movs	r0, r3
 80040aa:	e000      	b.n	80040ae <_write+0x20>
 80040ac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dbf1      	blt.n	80040a0 <_write+0x12>
	}
	return len;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b006      	add	sp, #24
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_close>:

int _close(int file)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
	return -1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	425b      	negs	r3, r3
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b002      	add	sp, #8
 80040d8:	bd80      	pop	{r7, pc}

080040da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	0192      	lsls	r2, r2, #6
 80040ea:	605a      	str	r2, [r3, #4]
	return 0;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_isatty>:

int _isatty(int file)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	return 1;
 80040fe:	2301      	movs	r3, #1
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
	return 0;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004128:	4a14      	ldr	r2, [pc, #80]	; (800417c <_sbrk+0x5c>)
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <_sbrk+0x60>)
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <_sbrk+0x64>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <_sbrk+0x64>)
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <_sbrk+0x68>)
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <_sbrk+0x64>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	429a      	cmp	r2, r3
 800414e:	d207      	bcs.n	8004160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004150:	f003 fe10 	bl	8007d74 <__errno>
 8004154:	0003      	movs	r3, r0
 8004156:	220c      	movs	r2, #12
 8004158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800415a:	2301      	movs	r3, #1
 800415c:	425b      	negs	r3, r3
 800415e:	e009      	b.n	8004174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <_sbrk+0x64>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <_sbrk+0x64>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	18d2      	adds	r2, r2, r3
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <_sbrk+0x64>)
 8004170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b006      	add	sp, #24
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20008000 	.word	0x20008000
 8004180:	00000400 	.word	0x00000400
 8004184:	20000608 	.word	0x20000608
 8004188:	20000858 	.word	0x20000858

0800418c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004198:	480d      	ldr	r0, [pc, #52]	; (80041d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800419a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800419c:	480d      	ldr	r0, [pc, #52]	; (80041d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800419e:	490e      	ldr	r1, [pc, #56]	; (80041d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <LoopForever+0xe>)
  movs r3, #0
 80041a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041a4:	e002      	b.n	80041ac <LoopCopyDataInit>

080041a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041aa:	3304      	adds	r3, #4

080041ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041b0:	d3f9      	bcc.n	80041a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041b2:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041b4:	4c0b      	ldr	r4, [pc, #44]	; (80041e4 <LoopForever+0x16>)
  movs r3, #0
 80041b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041b8:	e001      	b.n	80041be <LoopFillZerobss>

080041ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041bc:	3204      	adds	r2, #4

080041be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041c0:	d3fb      	bcc.n	80041ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80041c2:	f7ff ffe3 	bl	800418c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80041c6:	f003 fddb 	bl	8007d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041ca:	f7fe ff3f 	bl	800304c <main>

080041ce <LoopForever>:

LoopForever:
    b LoopForever
 80041ce:	e7fe      	b.n	80041ce <LoopForever>
  ldr   r0, =_estack
 80041d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80041d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80041dc:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 80041e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80041e4:	20000854 	.word	0x20000854

080041e8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041e8:	e7fe      	b.n	80041e8 <DMA1_Channel1_IRQHandler>
	...

080041ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_Init+0x24>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_Init+0x24>)
 80041f6:	2110      	movs	r1, #16
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f000 f809 	bl	8004214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004202:	f7ff fd67 	bl	8003cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40022000 	.word	0x40022000

08004214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_InitTick+0x5c>)
 800421e:	681c      	ldr	r4, [r3, #0]
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_InitTick+0x60>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	0019      	movs	r1, r3
 8004226:	23fa      	movs	r3, #250	; 0xfa
 8004228:	0098      	lsls	r0, r3, #2
 800422a:	f7fb ff87 	bl	800013c <__udivsi3>
 800422e:	0003      	movs	r3, r0
 8004230:	0019      	movs	r1, r3
 8004232:	0020      	movs	r0, r4
 8004234:	f7fb ff82 	bl	800013c <__udivsi3>
 8004238:	0003      	movs	r3, r0
 800423a:	0018      	movs	r0, r3
 800423c:	f000 fc35 	bl	8004aaa <HAL_SYSTICK_Config>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d001      	beq.n	8004248 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e00f      	b.n	8004268 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d80b      	bhi.n	8004266 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	2301      	movs	r3, #1
 8004252:	425b      	negs	r3, r3
 8004254:	2200      	movs	r2, #0
 8004256:	0018      	movs	r0, r3
 8004258:	f000 fc02 	bl	8004a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_InitTick+0x64>)
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b003      	add	sp, #12
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	20000008 	.word	0x20000008
 8004274:	20000010 	.word	0x20000010
 8004278:	2000000c 	.word	0x2000000c

0800427c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_IncTick+0x1c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	001a      	movs	r2, r3
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_IncTick+0x20>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	18d2      	adds	r2, r2, r3
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_IncTick+0x20>)
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	20000010 	.word	0x20000010
 800429c:	20000840 	.word	0x20000840

080042a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  return uwTick;
 80042a4:	4b02      	ldr	r3, [pc, #8]	; (80042b0 <HAL_GetTick+0x10>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	20000840 	.word	0x20000840

080042b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	d005      	beq.n	80042da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_Delay+0x44>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	001a      	movs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	f7ff ffe0 	bl	80042a0 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d8f7      	bhi.n	80042dc <HAL_Delay+0x28>
  {
  }
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000010 	.word	0x20000010

080042fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004304:	230f      	movs	r3, #15
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e125      	b.n	8004566 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2234      	movs	r2, #52	; 0x34
 800432c:	2100      	movs	r1, #0
 800432e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fcf2 	bl	8003d1c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	2210      	movs	r2, #16
 800433e:	4013      	ands	r3, r2
 8004340:	d000      	beq.n	8004344 <HAL_ADC_Init+0x48>
 8004342:	e103      	b.n	800454c <HAL_ADC_Init+0x250>
 8004344:	230f      	movs	r3, #15
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d000      	beq.n	8004350 <HAL_ADC_Init+0x54>
 800434e:	e0fd      	b.n	800454c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2204      	movs	r2, #4
 8004358:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800435a:	d000      	beq.n	800435e <HAL_ADC_Init+0x62>
 800435c:	e0f6      	b.n	800454c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_ADC_Init+0x274>)
 8004364:	4013      	ands	r3, r2
 8004366:	2202      	movs	r2, #2
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2203      	movs	r2, #3
 8004376:	4013      	ands	r3, r2
 8004378:	2b01      	cmp	r3, #1
 800437a:	d112      	bne.n	80043a2 <HAL_ADC_Init+0xa6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	2b01      	cmp	r3, #1
 8004388:	d009      	beq.n	800439e <HAL_ADC_Init+0xa2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	401a      	ands	r2, r3
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	429a      	cmp	r2, r3
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_Init+0xa6>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_ADC_Init+0xa8>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2218      	movs	r2, #24
 80043b0:	4393      	bics	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	0899      	lsrs	r1, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4964      	ldr	r1, [pc, #400]	; (8004574 <HAL_ADC_Init+0x278>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7e1b      	ldrb	r3, [r3, #24]
 80043ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7e5b      	ldrb	r3, [r3, #25]
 80043f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7e9b      	ldrb	r3, [r3, #26]
 80043f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80043fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2b01      	cmp	r3, #1
 8004402:	d002      	beq.n	800440a <HAL_ADC_Init+0x10e>
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	015b      	lsls	r3, r3, #5
 8004408:	e000      	b.n	800440c <HAL_ADC_Init+0x110>
 800440a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800440c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004412:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d101      	bne.n	8004420 <HAL_ADC_Init+0x124>
 800441c:	2304      	movs	r3, #4
 800441e:	e000      	b.n	8004422 <HAL_ADC_Init+0x126>
 8004420:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004422:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2124      	movs	r1, #36	; 0x24
 8004428:	5c5b      	ldrb	r3, [r3, r1]
 800442a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800442c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7edb      	ldrb	r3, [r3, #27]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d115      	bne.n	8004468 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7e9b      	ldrb	r3, [r3, #26]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	0252      	lsls	r2, r2, #9
 800444a:	4313      	orrs	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	e00b      	b.n	8004468 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	2220      	movs	r2, #32
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2201      	movs	r2, #1
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	23c2      	movs	r3, #194	; 0xc2
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	429a      	cmp	r2, r3
 8004472:	d007      	beq.n	8004484 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800447c:	4313      	orrs	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68d9      	ldr	r1, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	430a      	orrs	r2, r1
 8004492:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	055b      	lsls	r3, r3, #21
 800449c:	429a      	cmp	r2, r3
 800449e:	d01b      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d017      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d013      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d00f      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00b      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d007      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d003      	beq.n	80044d8 <HAL_ADC_Init+0x1dc>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2b07      	cmp	r3, #7
 80044d6:	d112      	bne.n	80044fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2107      	movs	r1, #7
 80044e4:	438a      	bics	r2, r1
 80044e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6959      	ldr	r1, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	2207      	movs	r2, #7
 80044f4:	401a      	ands	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_ADC_Init+0x27c>)
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	d10b      	bne.n	8004526 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2203      	movs	r2, #3
 800451a:	4393      	bics	r3, r2
 800451c:	2201      	movs	r2, #1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004524:	e01c      	b.n	8004560 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	2212      	movs	r2, #18
 800452c:	4393      	bics	r3, r2
 800452e:	2210      	movs	r2, #16
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	2201      	movs	r2, #1
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004542:	230f      	movs	r3, #15
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	2201      	movs	r2, #1
 8004548:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800454a:	e009      	b.n	8004560 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	2210      	movs	r2, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004558:	230f      	movs	r3, #15
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004560:	230f      	movs	r3, #15
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	fffffefd 	.word	0xfffffefd
 8004574:	fffe0219 	.word	0xfffe0219
 8004578:	833fffe7 	.word	0x833fffe7

0800457c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	2b04      	cmp	r3, #4
 8004590:	d106      	bne.n	80045a0 <HAL_ADC_IRQHandler+0x24>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	4013      	ands	r3, r2
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00d      	beq.n	80045bc <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2208      	movs	r2, #8
 80045a8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d14f      	bne.n	800464e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2208      	movs	r2, #8
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d148      	bne.n	800464e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2210      	movs	r2, #16
 80045c2:	4013      	ands	r3, r2
 80045c4:	d106      	bne.n	80045d4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	0092      	lsls	r2, r2, #2
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	23c0      	movs	r3, #192	; 0xc0
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4013      	ands	r3, r2
 80045e0:	d12d      	bne.n	800463e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d129      	bne.n	800463e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d122      	bne.n	800463e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2204      	movs	r2, #4
 8004600:	4013      	ands	r3, r2
 8004602:	d110      	bne.n	8004626 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	210c      	movs	r1, #12
 8004610:	438a      	bics	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	4a33      	ldr	r2, [pc, #204]	; (80046e8 <HAL_ADC_IRQHandler+0x16c>)
 800461a:	4013      	ands	r3, r2
 800461c:	2201      	movs	r2, #1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
 8004624:	e00b      	b.n	800463e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	2220      	movs	r2, #32
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2201      	movs	r2, #1
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 f853 	bl	80046ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	220c      	movs	r2, #12
 800464c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	4013      	ands	r3, r2
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d115      	bne.n	8004688 <HAL_ADC_IRQHandler+0x10c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	4013      	ands	r3, r2
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d10e      	bne.n	8004688 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	0252      	lsls	r2, r2, #9
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 f83e 	bl	80046fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	4013      	ands	r3, r2
 8004692:	2b10      	cmp	r3, #16
 8004694:	d123      	bne.n	80046de <HAL_ADC_IRQHandler+0x162>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2210      	movs	r2, #16
 800469e:	4013      	ands	r3, r2
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d11c      	bne.n	80046de <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d006      	beq.n	80046ba <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10d      	bne.n	80046d6 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2202      	movs	r2, #2
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 f81b 	bl	800470c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2210      	movs	r2, #16
 80046dc:	601a      	str	r2, [r3, #0]
  }

}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	fffffefe 	.word	0xfffffefe

080046ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004726:	230f      	movs	r3, #15
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	055b      	lsls	r3, r3, #21
 800473a:	429a      	cmp	r2, r3
 800473c:	d011      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x46>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d00d      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x46>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	2b02      	cmp	r3, #2
 800474c:	d009      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x46>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	2b03      	cmp	r3, #3
 8004754:	d005      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x46>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	2b04      	cmp	r3, #4
 800475c:	d001      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x46>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2234      	movs	r2, #52	; 0x34
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x54>
 800476c:	2302      	movs	r3, #2
 800476e:	e0bb      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x1cc>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2234      	movs	r2, #52	; 0x34
 8004774:	2101      	movs	r1, #1
 8004776:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2204      	movs	r2, #4
 8004780:	4013      	ands	r3, r2
 8004782:	d000      	beq.n	8004786 <HAL_ADC_ConfigChannel+0x6a>
 8004784:	e09f      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4a59      	ldr	r2, [pc, #356]	; (80048f0 <HAL_ADC_ConfigChannel+0x1d4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x76>
 8004790:	e077      	b.n	8004882 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	055b      	lsls	r3, r3, #21
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d037      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d033      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d02f      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d02b      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d027      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d023      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d01f      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d01b      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2107      	movs	r1, #7
 80047f8:	400b      	ands	r3, r1
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d012      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2107      	movs	r1, #7
 800480a:	438a      	bics	r2, r1
 800480c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6959      	ldr	r1, [r3, #20]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2207      	movs	r2, #7
 800481a:	401a      	ands	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d003      	beq.n	8004834 <HAL_ADC_ConfigChannel+0x118>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b11      	cmp	r3, #17
 8004832:	d152      	bne.n	80048da <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_ADC_ConfigChannel+0x1d8>)
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d102      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x12a>
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	e001      	b.n	800484a <HAL_ADC_ConfigChannel+0x12e>
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	03db      	lsls	r3, r3, #15
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <HAL_ADC_ConfigChannel+0x1d8>)
 800484c:	430b      	orrs	r3, r1
 800484e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b10      	cmp	r3, #16
 8004856:	d140      	bne.n	80048da <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <HAL_ADC_ConfigChannel+0x1dc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4927      	ldr	r1, [pc, #156]	; (80048fc <HAL_ADC_ConfigChannel+0x1e0>)
 800485e:	0018      	movs	r0, r3
 8004860:	f7fb fc6c 	bl	800013c <__udivsi3>
 8004864:	0003      	movs	r3, r0
 8004866:	001a      	movs	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	189b      	adds	r3, r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004872:	e002      	b.n	800487a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3b01      	subs	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f9      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x158>
 8004880:	e02b      	b.n	80048da <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	4099      	lsls	r1, r3
 8004890:	000b      	movs	r3, r1
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d003      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x190>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b11      	cmp	r3, #17
 80048aa:	d116      	bne.n	80048da <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_ADC_ConfigChannel+0x1d8>)
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x1a0>
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_ADC_ConfigChannel+0x1e4>)
 80048ba:	e000      	b.n	80048be <HAL_ADC_ConfigChannel+0x1a2>
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_ADC_ConfigChannel+0x1e8>)
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_ADC_ConfigChannel+0x1d8>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e009      	b.n	80048da <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	2220      	movs	r2, #32
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80048d2:	230f      	movs	r3, #15
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2234      	movs	r2, #52	; 0x34
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80048e2:	230f      	movs	r3, #15
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	781b      	ldrb	r3, [r3, #0]
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00001001 	.word	0x00001001
 80048f4:	40012708 	.word	0x40012708
 80048f8:	20000008 	.word	0x20000008
 80048fc:	000f4240 	.word	0x000f4240
 8004900:	ff7fffff 	.word	0xff7fffff
 8004904:	ffbfffff 	.word	0xffbfffff

08004908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b7f      	cmp	r3, #127	; 0x7f
 800491a:	d809      	bhi.n	8004930 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491c:	1dfb      	adds	r3, r7, #7
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	001a      	movs	r2, r3
 8004922:	231f      	movs	r3, #31
 8004924:	401a      	ands	r2, r3
 8004926:	4b04      	ldr	r3, [pc, #16]	; (8004938 <__NVIC_EnableIRQ+0x30>)
 8004928:	2101      	movs	r1, #1
 800492a:	4091      	lsls	r1, r2
 800492c:	000a      	movs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
  }
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000e100 	.word	0xe000e100

0800493c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	0002      	movs	r2, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b7f      	cmp	r3, #127	; 0x7f
 8004950:	d828      	bhi.n	80049a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <__NVIC_SetPriority+0xd4>)
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b25b      	sxtb	r3, r3
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	33c0      	adds	r3, #192	; 0xc0
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	589b      	ldr	r3, [r3, r2]
 8004962:	1dfa      	adds	r2, r7, #7
 8004964:	7812      	ldrb	r2, [r2, #0]
 8004966:	0011      	movs	r1, r2
 8004968:	2203      	movs	r2, #3
 800496a:	400a      	ands	r2, r1
 800496c:	00d2      	lsls	r2, r2, #3
 800496e:	21ff      	movs	r1, #255	; 0xff
 8004970:	4091      	lsls	r1, r2
 8004972:	000a      	movs	r2, r1
 8004974:	43d2      	mvns	r2, r2
 8004976:	401a      	ands	r2, r3
 8004978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	019b      	lsls	r3, r3, #6
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	401a      	ands	r2, r3
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	0018      	movs	r0, r3
 8004988:	2303      	movs	r3, #3
 800498a:	4003      	ands	r3, r0
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004990:	481f      	ldr	r0, [pc, #124]	; (8004a10 <__NVIC_SetPriority+0xd4>)
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b25b      	sxtb	r3, r3
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	430a      	orrs	r2, r1
 800499c:	33c0      	adds	r3, #192	; 0xc0
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049a2:	e031      	b.n	8004a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049a4:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <__NVIC_SetPriority+0xd8>)
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	0019      	movs	r1, r3
 80049ac:	230f      	movs	r3, #15
 80049ae:	400b      	ands	r3, r1
 80049b0:	3b08      	subs	r3, #8
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3306      	adds	r3, #6
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	18d3      	adds	r3, r2, r3
 80049ba:	3304      	adds	r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1dfa      	adds	r2, r7, #7
 80049c0:	7812      	ldrb	r2, [r2, #0]
 80049c2:	0011      	movs	r1, r2
 80049c4:	2203      	movs	r2, #3
 80049c6:	400a      	ands	r2, r1
 80049c8:	00d2      	lsls	r2, r2, #3
 80049ca:	21ff      	movs	r1, #255	; 0xff
 80049cc:	4091      	lsls	r1, r2
 80049ce:	000a      	movs	r2, r1
 80049d0:	43d2      	mvns	r2, r2
 80049d2:	401a      	ands	r2, r3
 80049d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	401a      	ands	r2, r3
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	0018      	movs	r0, r3
 80049e4:	2303      	movs	r3, #3
 80049e6:	4003      	ands	r3, r0
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ec:	4809      	ldr	r0, [pc, #36]	; (8004a14 <__NVIC_SetPriority+0xd8>)
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	001c      	movs	r4, r3
 80049f4:	230f      	movs	r3, #15
 80049f6:	4023      	ands	r3, r4
 80049f8:	3b08      	subs	r3, #8
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	430a      	orrs	r2, r1
 80049fe:	3306      	adds	r3, #6
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	18c3      	adds	r3, r0, r3
 8004a04:	3304      	adds	r3, #4
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bd90      	pop	{r4, r7, pc}
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	045b      	lsls	r3, r3, #17
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d301      	bcc.n	8004a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e010      	b.n	8004a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <SysTick_Config+0x44>)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	3a01      	subs	r2, #1
 8004a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a38:	2301      	movs	r3, #1
 8004a3a:	425b      	negs	r3, r3
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff ff7c 	bl	800493c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <SysTick_Config+0x44>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a4a:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <SysTick_Config+0x44>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	e000e010 	.word	0xe000e010

08004a60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	210f      	movs	r1, #15
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	1c02      	adds	r2, r0, #0
 8004a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	187b      	adds	r3, r7, r1
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff ff5d 	bl	800493c <__NVIC_SetPriority>
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b004      	add	sp, #16
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	0002      	movs	r2, r0
 8004a92:	1dfb      	adds	r3, r7, #7
 8004a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a96:	1dfb      	adds	r3, r7, #7
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff ff33 	bl	8004908 <__NVIC_EnableIRQ>
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff ffaf 	bl	8004a18 <SysTick_Config>
 8004aba:	0003      	movs	r3, r0
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d008      	beq.n	8004aea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e020      	b.n	8004b2c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	210e      	movs	r1, #14
 8004af6:	438a      	bics	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	438a      	bics	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	2101      	movs	r1, #1
 8004b14:	4091      	lsls	r1, r2
 8004b16:	000a      	movs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2221      	movs	r2, #33	; 0x21
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	210f      	movs	r1, #15
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2221      	movs	r2, #33	; 0x21
 8004b48:	5c9b      	ldrb	r3, [r3, r2]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d006      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2204      	movs	r2, #4
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b56:	187b      	adds	r3, r7, r1
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e028      	b.n	8004bb0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	210e      	movs	r1, #14
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2101      	movs	r1, #1
 8004b88:	4091      	lsls	r1, r2
 8004b8a:	000a      	movs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	0010      	movs	r0, r2
 8004bae:	4798      	blx	r3
    } 
  }
  return status;
 8004bb0:	230f      	movs	r3, #15
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bce:	e14f      	b.n	8004e70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4091      	lsls	r1, r2
 8004bda:	000a      	movs	r2, r1
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d100      	bne.n	8004be8 <HAL_GPIO_Init+0x28>
 8004be6:	e140      	b.n	8004e6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2203      	movs	r2, #3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	0013      	movs	r3, r2
 8004c10:	43da      	mvns	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	409a      	lsls	r2, r3
 8004c22:	0013      	movs	r3, r2
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2203      	movs	r2, #3
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	0013      	movs	r3, r2
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	0013      	movs	r3, r2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	0092      	lsls	r2, r2, #2
 8004cb4:	58d3      	ldr	r3, [r2, r3]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2207      	movs	r2, #7
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	0013      	movs	r3, r2
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2107      	movs	r1, #7
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	0013      	movs	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	6939      	ldr	r1, [r7, #16]
 8004cf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	0013      	movs	r3, r2
 8004d02:	43da      	mvns	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	401a      	ands	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	409a      	lsls	r2, r3
 8004d18:	0013      	movs	r3, r2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	23c0      	movs	r3, #192	; 0xc0
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d100      	bne.n	8004d34 <HAL_GPIO_Init+0x174>
 8004d32:	e09a      	b.n	8004e6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <HAL_GPIO_Init+0x2c8>)
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <HAL_GPIO_Init+0x2c8>)
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	619a      	str	r2, [r3, #24]
 8004d40:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <HAL_GPIO_Init+0x2c8>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d4c:	4a4f      	ldr	r2, [pc, #316]	; (8004e8c <HAL_GPIO_Init+0x2cc>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	589b      	ldr	r3, [r3, r2]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	4013      	ands	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	409a      	lsls	r2, r3
 8004d66:	0013      	movs	r3, r2
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	2390      	movs	r3, #144	; 0x90
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0x1e2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a44      	ldr	r2, [pc, #272]	; (8004e90 <HAL_GPIO_Init+0x2d0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00d      	beq.n	8004d9e <HAL_GPIO_Init+0x1de>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a43      	ldr	r2, [pc, #268]	; (8004e94 <HAL_GPIO_Init+0x2d4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0x1da>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a42      	ldr	r2, [pc, #264]	; (8004e98 <HAL_GPIO_Init+0x2d8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_GPIO_Init+0x1d6>
 8004d92:	2303      	movs	r3, #3
 8004d94:	e006      	b.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004d96:	2305      	movs	r3, #5
 8004d98:	e004      	b.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e002      	b.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004da2:	2300      	movs	r3, #0
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	2103      	movs	r1, #3
 8004da8:	400a      	ands	r2, r1
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	4093      	lsls	r3, r2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004db4:	4935      	ldr	r1, [pc, #212]	; (8004e8c <HAL_GPIO_Init+0x2cc>)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	089b      	lsrs	r3, r3, #2
 8004dba:	3302      	adds	r3, #2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43da      	mvns	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	4013      	ands	r3, r2
 8004e06:	d003      	beq.n	8004e10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e10:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	035b      	lsls	r3, r3, #13
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e3a:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e40:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	039b      	lsls	r3, r3, #14
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	40da      	lsrs	r2, r3
 8004e78:	1e13      	subs	r3, r2, #0
 8004e7a:	d000      	beq.n	8004e7e <HAL_GPIO_Init+0x2be>
 8004e7c:	e6a8      	b.n	8004bd0 <HAL_GPIO_Init+0x10>
  } 
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b006      	add	sp, #24
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	48000400 	.word	0x48000400
 8004e94:	48000800 	.word	0x48000800
 8004e98:	48000c00 	.word	0x48000c00
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	000a      	movs	r2, r1
 8004eaa:	1cbb      	adds	r3, r7, #2
 8004eac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	1cba      	adds	r2, r7, #2
 8004eb4:	8812      	ldrh	r2, [r2, #0]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004eba:	230f      	movs	r3, #15
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e003      	b.n	8004ecc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ec4:	230f      	movs	r3, #15
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ecc:	230f      	movs	r3, #15
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	781b      	ldrb	r3, [r3, #0]
  }
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	0008      	movs	r0, r1
 8004ee4:	0011      	movs	r1, r2
 8004ee6:	1cbb      	adds	r3, r7, #2
 8004ee8:	1c02      	adds	r2, r0, #0
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	1c7b      	adds	r3, r7, #1
 8004eee:	1c0a      	adds	r2, r1, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ef2:	1c7b      	adds	r3, r7, #1
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004efa:	1cbb      	adds	r3, r7, #2
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f02:	e003      	b.n	8004f0c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f04:	1cbb      	adds	r3, r7, #2
 8004f06:	881a      	ldrh	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b002      	add	sp, #8
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	000a      	movs	r2, r1
 8004f1e:	1cbb      	adds	r3, r7, #2
 8004f20:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f28:	1cbb      	adds	r3, r7, #2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	041a      	lsls	r2, r3, #16
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	1cb9      	adds	r1, r7, #2
 8004f38:	8809      	ldrh	r1, [r1, #0]
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e082      	b.n	8005064 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2241      	movs	r2, #65	; 0x41
 8004f62:	5c9b      	ldrb	r3, [r3, r2]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2240      	movs	r2, #64	; 0x40
 8004f6e:	2100      	movs	r1, #0
 8004f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fe ff1f 	bl	8003db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2241      	movs	r2, #65	; 0x41
 8004f7e:	2124      	movs	r1, #36	; 0x24
 8004f80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	438a      	bics	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_I2C_Init+0x120>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4931      	ldr	r1, [pc, #196]	; (8005070 <HAL_I2C_Init+0x124>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d108      	bne.n	8004fca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2180      	movs	r1, #128	; 0x80
 8004fc2:	0209      	lsls	r1, r1, #8
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e007      	b.n	8004fda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2184      	movs	r1, #132	; 0x84
 8004fd4:	0209      	lsls	r1, r1, #8
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d104      	bne.n	8004fec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	0112      	lsls	r2, r2, #4
 8004fea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	491f      	ldr	r1, [pc, #124]	; (8005074 <HAL_I2C_Init+0x128>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	491a      	ldr	r1, [pc, #104]	; (8005070 <HAL_I2C_Init+0x124>)
 8005008:	400a      	ands	r2, r1
 800500a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	431a      	orrs	r2, r3
 8005016:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69d9      	ldr	r1, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2241      	movs	r2, #65	; 0x41
 8005050:	2120      	movs	r1, #32
 8005052:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2242      	movs	r2, #66	; 0x42
 800505e:	2100      	movs	r1, #0
 8005060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	0018      	movs	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	b002      	add	sp, #8
 800506a:	bd80      	pop	{r7, pc}
 800506c:	f0ffffff 	.word	0xf0ffffff
 8005070:	ffff7fff 	.word	0xffff7fff
 8005074:	02008000 	.word	0x02008000

08005078 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	0008      	movs	r0, r1
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	0019      	movs	r1, r3
 8005086:	230a      	movs	r3, #10
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	1c02      	adds	r2, r0, #0
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	2308      	movs	r3, #8
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	1c0a      	adds	r2, r1, #0
 8005094:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2241      	movs	r2, #65	; 0x41
 800509a:	5c9b      	ldrb	r3, [r3, r2]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d000      	beq.n	80050a4 <HAL_I2C_Master_Transmit+0x2c>
 80050a2:	e0e7      	b.n	8005274 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2240      	movs	r2, #64	; 0x40
 80050a8:	5c9b      	ldrb	r3, [r3, r2]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_I2C_Master_Transmit+0x3a>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e0e1      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	2101      	movs	r1, #1
 80050b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050ba:	f7ff f8f1 	bl	80042a0 <HAL_GetTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	0219      	lsls	r1, r3, #8
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2319      	movs	r3, #25
 80050ce:	2201      	movs	r2, #1
 80050d0:	f000 fd3e 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80050d4:	1e03      	subs	r3, r0, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0cc      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2241      	movs	r2, #65	; 0x41
 80050e0:	2121      	movs	r1, #33	; 0x21
 80050e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2242      	movs	r2, #66	; 0x42
 80050e8:	2110      	movs	r1, #16
 80050ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2208      	movs	r2, #8
 80050fc:	18ba      	adds	r2, r7, r2
 80050fe:	8812      	ldrh	r2, [r2, #0]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2bff      	cmp	r3, #255	; 0xff
 8005110:	d911      	bls.n	8005136 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	b2da      	uxtb	r2, r3
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	045c      	lsls	r4, r3, #17
 8005122:	230a      	movs	r3, #10
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	8819      	ldrh	r1, [r3, #0]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	4b55      	ldr	r3, [pc, #340]	; (8005280 <HAL_I2C_Master_Transmit+0x208>)
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	0023      	movs	r3, r4
 8005130:	f000 fe42 	bl	8005db8 <I2C_TransferConfig>
 8005134:	e075      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	b2da      	uxtb	r2, r3
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	049c      	lsls	r4, r3, #18
 800514a:	230a      	movs	r3, #10
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	8819      	ldrh	r1, [r3, #0]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <HAL_I2C_Master_Transmit+0x208>)
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	0023      	movs	r3, r4
 8005158:	f000 fe2e 	bl	8005db8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800515c:	e061      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0018      	movs	r0, r3
 8005166:	f000 fd32 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e081      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d03a      	beq.n	8005222 <HAL_I2C_Master_Transmit+0x1aa>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d136      	bne.n	8005222 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	0013      	movs	r3, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	f000 fcc5 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80051c6:	1e03      	subs	r3, r0, #0
 80051c8:	d001      	beq.n	80051ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e053      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2bff      	cmp	r3, #255	; 0xff
 80051d6:	d911      	bls.n	80051fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	045c      	lsls	r4, r3, #17
 80051e8:	230a      	movs	r3, #10
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	8819      	ldrh	r1, [r3, #0]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0023      	movs	r3, r4
 80051f6:	f000 fddf 	bl	8005db8 <I2C_TransferConfig>
 80051fa:	e012      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b2da      	uxtb	r2, r3
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	049c      	lsls	r4, r3, #18
 8005210:	230a      	movs	r3, #10
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	8819      	ldrh	r1, [r3, #0]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	0023      	movs	r3, r4
 800521e:	f000 fdcb 	bl	8005db8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d198      	bne.n	800515e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	0018      	movs	r0, r3
 8005234:	f000 fd0a 	bl	8005c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e01a      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2220      	movs	r2, #32
 8005246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	490c      	ldr	r1, [pc, #48]	; (8005284 <HAL_I2C_Master_Transmit+0x20c>)
 8005254:	400a      	ands	r2, r1
 8005256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	2120      	movs	r1, #32
 800525e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2242      	movs	r2, #66	; 0x42
 8005264:	2100      	movs	r1, #0
 8005266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2240      	movs	r2, #64	; 0x40
 800526c:	2100      	movs	r1, #0
 800526e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b007      	add	sp, #28
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	80002000 	.word	0x80002000
 8005284:	fe00e800 	.word	0xfe00e800

08005288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	000c      	movs	r4, r1
 8005292:	0010      	movs	r0, r2
 8005294:	0019      	movs	r1, r3
 8005296:	230a      	movs	r3, #10
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	1c22      	adds	r2, r4, #0
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	2308      	movs	r3, #8
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	1c02      	adds	r2, r0, #0
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	1c0a      	adds	r2, r1, #0
 80052aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2241      	movs	r2, #65	; 0x41
 80052b0:	5c9b      	ldrb	r3, [r3, r2]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d000      	beq.n	80052ba <HAL_I2C_Mem_Write+0x32>
 80052b8:	e10c      	b.n	80054d4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_I2C_Mem_Write+0x42>
 80052c0:	232c      	movs	r3, #44	; 0x2c
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	0092      	lsls	r2, r2, #2
 80052d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0ff      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	5c9b      	ldrb	r3, [r3, r2]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_I2C_Mem_Write+0x5c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e0f8      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	2101      	movs	r1, #1
 80052ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052ec:	f7fe ffd8 	bl	80042a0 <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	0219      	lsls	r1, r3, #8
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2319      	movs	r3, #25
 8005300:	2201      	movs	r2, #1
 8005302:	f000 fc25 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005306:	1e03      	subs	r3, r0, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0e3      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2241      	movs	r2, #65	; 0x41
 8005312:	2121      	movs	r1, #33	; 0x21
 8005314:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2242      	movs	r2, #66	; 0x42
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	222c      	movs	r2, #44	; 0x2c
 800532e:	18ba      	adds	r2, r7, r2
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800533a:	1dbb      	adds	r3, r7, #6
 800533c:	881c      	ldrh	r4, [r3, #0]
 800533e:	2308      	movs	r3, #8
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	230a      	movs	r3, #10
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	8819      	ldrh	r1, [r3, #0]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	0023      	movs	r3, r4
 8005356:	f000 fb13 	bl	8005980 <I2C_RequestMemoryWrite>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d005      	beq.n	800536a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2240      	movs	r2, #64	; 0x40
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0b5      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2bff      	cmp	r3, #255	; 0xff
 8005372:	d911      	bls.n	8005398 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	22ff      	movs	r2, #255	; 0xff
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537e:	b2da      	uxtb	r2, r3
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	045c      	lsls	r4, r3, #17
 8005384:	230a      	movs	r3, #10
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	8819      	ldrh	r1, [r3, #0]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	2300      	movs	r3, #0
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	0023      	movs	r3, r4
 8005392:	f000 fd11 	bl	8005db8 <I2C_TransferConfig>
 8005396:	e012      	b.n	80053be <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	049c      	lsls	r4, r3, #18
 80053ac:	230a      	movs	r3, #10
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	8819      	ldrh	r1, [r3, #0]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	0023      	movs	r3, r4
 80053ba:	f000 fcfd 	bl	8005db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fc02 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 80053ca:	1e03      	subs	r3, r0, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e081      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03a      	beq.n	8005482 <HAL_I2C_Mem_Write+0x1fa>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d136      	bne.n	8005482 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	0013      	movs	r3, r2
 800541e:	2200      	movs	r2, #0
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	f000 fb95 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e053      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2bff      	cmp	r3, #255	; 0xff
 8005436:	d911      	bls.n	800545c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	b2da      	uxtb	r2, r3
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	045c      	lsls	r4, r3, #17
 8005448:	230a      	movs	r3, #10
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	8819      	ldrh	r1, [r3, #0]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	2300      	movs	r3, #0
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	0023      	movs	r3, r4
 8005456:	f000 fcaf 	bl	8005db8 <I2C_TransferConfig>
 800545a:	e012      	b.n	8005482 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	b2da      	uxtb	r2, r3
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	049c      	lsls	r4, r3, #18
 8005470:	230a      	movs	r3, #10
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	8819      	ldrh	r1, [r3, #0]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	0023      	movs	r3, r4
 800547e:	f000 fc9b 	bl	8005db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d198      	bne.n	80053be <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fbda 	bl	8005c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005498:	1e03      	subs	r3, r0, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01a      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2220      	movs	r2, #32
 80054a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	490b      	ldr	r1, [pc, #44]	; (80054e0 <HAL_I2C_Mem_Write+0x258>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2241      	movs	r2, #65	; 0x41
 80054bc:	2120      	movs	r1, #32
 80054be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2242      	movs	r2, #66	; 0x42
 80054c4:	2100      	movs	r1, #0
 80054c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	2100      	movs	r1, #0
 80054ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	0018      	movs	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	b007      	add	sp, #28
 80054dc:	bd90      	pop	{r4, r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	fe00e800 	.word	0xfe00e800

080054e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	000c      	movs	r4, r1
 80054ee:	0010      	movs	r0, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	230a      	movs	r3, #10
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	1c22      	adds	r2, r4, #0
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	2308      	movs	r3, #8
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	1c02      	adds	r2, r0, #0
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	1dbb      	adds	r3, r7, #6
 8005504:	1c0a      	adds	r2, r1, #0
 8005506:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2241      	movs	r2, #65	; 0x41
 800550c:	5c9b      	ldrb	r3, [r3, r2]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b20      	cmp	r3, #32
 8005512:	d000      	beq.n	8005516 <HAL_I2C_Mem_Read+0x32>
 8005514:	e110      	b.n	8005738 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <HAL_I2C_Mem_Read+0x42>
 800551c:	232c      	movs	r3, #44	; 0x2c
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2280      	movs	r2, #128	; 0x80
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e103      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2240      	movs	r2, #64	; 0x40
 8005536:	5c9b      	ldrb	r3, [r3, r2]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2C_Mem_Read+0x5c>
 800553c:	2302      	movs	r3, #2
 800553e:	e0fc      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	2101      	movs	r1, #1
 8005546:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005548:	f7fe feaa 	bl	80042a0 <HAL_GetTick>
 800554c:	0003      	movs	r3, r0
 800554e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	0219      	lsls	r1, r3, #8
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2319      	movs	r3, #25
 800555c:	2201      	movs	r2, #1
 800555e:	f000 faf7 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005562:	1e03      	subs	r3, r0, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e0e7      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2241      	movs	r2, #65	; 0x41
 800556e:	2122      	movs	r1, #34	; 0x22
 8005570:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2242      	movs	r2, #66	; 0x42
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	222c      	movs	r2, #44	; 0x2c
 800558a:	18ba      	adds	r2, r7, r2
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005596:	1dbb      	adds	r3, r7, #6
 8005598:	881c      	ldrh	r4, [r3, #0]
 800559a:	2308      	movs	r3, #8
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	881a      	ldrh	r2, [r3, #0]
 80055a0:	230a      	movs	r3, #10
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	8819      	ldrh	r1, [r3, #0]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	0023      	movs	r3, r4
 80055b2:	f000 fa49 	bl	8005a48 <I2C_RequestMemoryRead>
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	2100      	movs	r1, #0
 80055c0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0b9      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2bff      	cmp	r3, #255	; 0xff
 80055ce:	d911      	bls.n	80055f4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	22ff      	movs	r2, #255	; 0xff
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	045c      	lsls	r4, r3, #17
 80055e0:	230a      	movs	r3, #10
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	8819      	ldrh	r1, [r3, #0]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	4b56      	ldr	r3, [pc, #344]	; (8005744 <HAL_I2C_Mem_Read+0x260>)
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	0023      	movs	r3, r4
 80055ee:	f000 fbe3 	bl	8005db8 <I2C_TransferConfig>
 80055f2:	e012      	b.n	800561a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	b2da      	uxtb	r2, r3
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	049c      	lsls	r4, r3, #18
 8005608:	230a      	movs	r3, #10
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	8819      	ldrh	r1, [r3, #0]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	4b4c      	ldr	r3, [pc, #304]	; (8005744 <HAL_I2C_Mem_Read+0x260>)
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	0023      	movs	r3, r4
 8005616:	f000 fbcf 	bl	8005db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800561a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	0013      	movs	r3, r2
 8005624:	2200      	movs	r2, #0
 8005626:	2104      	movs	r1, #4
 8005628:	f000 fa92 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e082      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d03a      	beq.n	80056e6 <HAL_I2C_Mem_Read+0x202>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d136      	bne.n	80056e6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	0013      	movs	r3, r2
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	f000 fa63 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 800568a:	1e03      	subs	r3, r0, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e053      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	2bff      	cmp	r3, #255	; 0xff
 800569a:	d911      	bls.n	80056c0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	22ff      	movs	r2, #255	; 0xff
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	045c      	lsls	r4, r3, #17
 80056ac:	230a      	movs	r3, #10
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	8819      	ldrh	r1, [r3, #0]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	2300      	movs	r3, #0
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	0023      	movs	r3, r4
 80056ba:	f000 fb7d 	bl	8005db8 <I2C_TransferConfig>
 80056be:	e012      	b.n	80056e6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	049c      	lsls	r4, r3, #18
 80056d4:	230a      	movs	r3, #10
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	8819      	ldrh	r1, [r3, #0]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	2300      	movs	r3, #0
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	0023      	movs	r3, r4
 80056e2:	f000 fb69 	bl	8005db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d194      	bne.n	800561a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 faa8 	bl	8005c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e01a      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2220      	movs	r2, #32
 800570a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	490c      	ldr	r1, [pc, #48]	; (8005748 <HAL_I2C_Mem_Read+0x264>)
 8005718:	400a      	ands	r2, r1
 800571a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	2120      	movs	r1, #32
 8005722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2242      	movs	r2, #66	; 0x42
 8005728:	2100      	movs	r1, #0
 800572a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2240      	movs	r2, #64	; 0x40
 8005730:	2100      	movs	r1, #0
 8005732:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	0018      	movs	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	b007      	add	sp, #28
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	80002400 	.word	0x80002400
 8005748:	fe00e800 	.word	0xfe00e800

0800574c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	230a      	movs	r3, #10
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	1c0a      	adds	r2, r1, #0
 800575e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2241      	movs	r2, #65	; 0x41
 8005768:	5c9b      	ldrb	r3, [r3, r2]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b20      	cmp	r3, #32
 800576e:	d000      	beq.n	8005772 <HAL_I2C_IsDeviceReady+0x26>
 8005770:	e0fe      	b.n	8005970 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	401a      	ands	r2, r3
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	429a      	cmp	r2, r3
 8005784:	d101      	bne.n	800578a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005786:	2302      	movs	r3, #2
 8005788:	e0f3      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2240      	movs	r2, #64	; 0x40
 800578e:	5c9b      	ldrb	r3, [r3, r2]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_I2C_IsDeviceReady+0x4c>
 8005794:	2302      	movs	r3, #2
 8005796:	e0ec      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2240      	movs	r2, #64	; 0x40
 800579c:	2101      	movs	r1, #1
 800579e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2241      	movs	r2, #65	; 0x41
 80057a4:	2124      	movs	r1, #36	; 0x24
 80057a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_I2C_IsDeviceReady+0x7a>
 80057b6:	230a      	movs	r3, #10
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	059b      	lsls	r3, r3, #22
 80057be:	0d9b      	lsrs	r3, r3, #22
 80057c0:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_I2C_IsDeviceReady+0x230>)
 80057c2:	431a      	orrs	r2, r3
 80057c4:	e007      	b.n	80057d6 <HAL_I2C_IsDeviceReady+0x8a>
 80057c6:	230a      	movs	r3, #10
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	059b      	lsls	r3, r3, #22
 80057ce:	0d9b      	lsrs	r3, r3, #22
 80057d0:	22a0      	movs	r2, #160	; 0xa0
 80057d2:	0192      	lsls	r2, r2, #6
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80057dc:	f7fe fd60 	bl	80042a0 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2220      	movs	r2, #32
 80057ec:	4013      	ands	r3, r2
 80057ee:	3b20      	subs	r3, #32
 80057f0:	425a      	negs	r2, r3
 80057f2:	4153      	adcs	r3, r2
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	231f      	movs	r3, #31
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2210      	movs	r2, #16
 8005804:	4013      	ands	r3, r2
 8005806:	3b10      	subs	r3, #16
 8005808:	425a      	negs	r2, r3
 800580a:	4153      	adcs	r3, r2
 800580c:	b2da      	uxtb	r2, r3
 800580e:	231e      	movs	r3, #30
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005814:	e035      	b.n	8005882 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	d01a      	beq.n	8005852 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fe fd40 	bl	80042a0 <HAL_GetTick>
 8005820:	0002      	movs	r2, r0
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <HAL_I2C_IsDeviceReady+0xe6>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2241      	movs	r2, #65	; 0x41
 8005836:	2120      	movs	r1, #32
 8005838:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	2220      	movs	r2, #32
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	2100      	movs	r1, #0
 800584c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e08f      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2220      	movs	r2, #32
 800585a:	4013      	ands	r3, r2
 800585c:	3b20      	subs	r3, #32
 800585e:	425a      	negs	r2, r3
 8005860:	4153      	adcs	r3, r2
 8005862:	b2da      	uxtb	r2, r3
 8005864:	231f      	movs	r3, #31
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2210      	movs	r2, #16
 8005872:	4013      	ands	r3, r2
 8005874:	3b10      	subs	r3, #16
 8005876:	425a      	negs	r2, r3
 8005878:	4153      	adcs	r3, r2
 800587a:	b2da      	uxtb	r2, r3
 800587c:	231e      	movs	r3, #30
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005882:	231f      	movs	r3, #31
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_I2C_IsDeviceReady+0x14a>
 800588c:	231e      	movs	r3, #30
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0bf      	beq.n	8005816 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2210      	movs	r2, #16
 800589e:	4013      	ands	r3, r2
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d01a      	beq.n	80058da <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	0013      	movs	r3, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	2120      	movs	r1, #32
 80058b2:	f000 f94d 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80058b6:	1e03      	subs	r3, r0, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e059      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2241      	movs	r2, #65	; 0x41
 80058ca:	2120      	movs	r1, #32
 80058cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2240      	movs	r2, #64	; 0x40
 80058d2:	2100      	movs	r1, #0
 80058d4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e04b      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	0013      	movs	r3, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	2120      	movs	r1, #32
 80058e8:	f000 f932 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80058ec:	1e03      	subs	r3, r0, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e03e      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2210      	movs	r2, #16
 80058fa:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2220      	movs	r2, #32
 8005902:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d119      	bne.n	8005940 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	01c9      	lsls	r1, r1, #7
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	0013      	movs	r3, r2
 8005928:	2200      	movs	r2, #0
 800592a:	2120      	movs	r1, #32
 800592c:	f000 f910 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005930:	1e03      	subs	r3, r0, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e01c      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2220      	movs	r2, #32
 800593e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3301      	adds	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d900      	bls.n	8005950 <HAL_I2C_IsDeviceReady+0x204>
 800594e:	e72e      	b.n	80057ae <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2241      	movs	r2, #65	; 0x41
 8005954:	2120      	movs	r1, #32
 8005956:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	2220      	movs	r2, #32
 800595e:	431a      	orrs	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	2100      	movs	r1, #0
 800596a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b008      	add	sp, #32
 8005978:	bd80      	pop	{r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	02002000 	.word	0x02002000

08005980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	000c      	movs	r4, r1
 800598a:	0010      	movs	r0, r2
 800598c:	0019      	movs	r1, r3
 800598e:	250a      	movs	r5, #10
 8005990:	197b      	adds	r3, r7, r5
 8005992:	1c22      	adds	r2, r4, #0
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	2308      	movs	r3, #8
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	1c02      	adds	r2, r0, #0
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	1dbb      	adds	r3, r7, #6
 80059a0:	1c0a      	adds	r2, r1, #0
 80059a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059a4:	1dbb      	adds	r3, r7, #6
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	045c      	lsls	r4, r3, #17
 80059ae:	197b      	adds	r3, r7, r5
 80059b0:	8819      	ldrh	r1, [r3, #0]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <I2C_RequestMemoryWrite+0xc4>)
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	0023      	movs	r3, r4
 80059ba:	f000 f9fd 	bl	8005db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	6a39      	ldr	r1, [r7, #32]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f902 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e033      	b.n	8005a3a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059d2:	1dbb      	adds	r3, r7, #6
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059da:	2308      	movs	r3, #8
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
 80059e8:	e019      	b.n	8005a1e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059ea:	2308      	movs	r3, #8
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	6a39      	ldr	r1, [r7, #32]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f8e3 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d001      	beq.n	8005a10 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e014      	b.n	8005a3a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a10:	2308      	movs	r3, #8
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	6a3a      	ldr	r2, [r7, #32]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	0013      	movs	r3, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	f000 f890 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	1e03      	subs	r3, r0, #0
 8005a32:	d001      	beq.n	8005a38 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b004      	add	sp, #16
 8005a40:	bdb0      	pop	{r4, r5, r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	80002000 	.word	0x80002000

08005a48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a48:	b5b0      	push	{r4, r5, r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	000c      	movs	r4, r1
 8005a52:	0010      	movs	r0, r2
 8005a54:	0019      	movs	r1, r3
 8005a56:	250a      	movs	r5, #10
 8005a58:	197b      	adds	r3, r7, r5
 8005a5a:	1c22      	adds	r2, r4, #0
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	2308      	movs	r3, #8
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	1c02      	adds	r2, r0, #0
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	1c0a      	adds	r2, r1, #0
 8005a6a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a6c:	1dbb      	adds	r3, r7, #6
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	197b      	adds	r3, r7, r5
 8005a74:	8819      	ldrh	r1, [r3, #0]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <I2C_RequestMemoryRead+0xc0>)
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f000 f99b 	bl	8005db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 f8a0 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8e:	1e03      	subs	r3, r0, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e033      	b.n	8005afe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8005aac:	e019      	b.n	8005ae2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aae:	2308      	movs	r3, #8
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	6a39      	ldr	r1, [r7, #32]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f881 	bl	8005bce <I2C_WaitOnTXISFlagUntilTimeout>
 8005acc:	1e03      	subs	r3, r0, #0
 8005ace:	d001      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e014      	b.n	8005afe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	0013      	movs	r3, r2
 8005aec:	2200      	movs	r2, #0
 8005aee:	2140      	movs	r1, #64	; 0x40
 8005af0:	f000 f82e 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005af4:	1e03      	subs	r3, r0, #0
 8005af6:	d001      	beq.n	8005afc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bdb0      	pop	{r4, r5, r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	80002000 	.word	0x80002000

08005b0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d103      	bne.n	8005b2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2201      	movs	r2, #1
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d007      	beq.n	8005b48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2101      	movs	r1, #1
 8005b44:	430a      	orrs	r2, r1
 8005b46:	619a      	str	r2, [r3, #24]
  }
}
 8005b48:	46c0      	nop			; (mov r8, r8)
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	1dfb      	adds	r3, r7, #7
 8005b5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b60:	e021      	b.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	d01e      	beq.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b68:	f7fe fb9a 	bl	80042a0 <HAL_GetTick>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d113      	bne.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	2220      	movs	r2, #32
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2241      	movs	r2, #65	; 0x41
 8005b8e:	2120      	movs	r1, #32
 8005b90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2242      	movs	r2, #66	; 0x42
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2240      	movs	r2, #64	; 0x40
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00f      	b.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	425a      	negs	r2, r3
 8005bb6:	4153      	adcs	r3, r2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	001a      	movs	r2, r3
 8005bbc:	1dfb      	adds	r3, r7, #7
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d0ce      	beq.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b004      	add	sp, #16
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bda:	e02b      	b.n	8005c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 f86e 	bl	8005cc4 <I2C_IsAcknowledgeFailed>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e029      	b.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	d01e      	beq.n	8005c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fe fb53 	bl	80042a0 <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d113      	bne.n	8005c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	2220      	movs	r2, #32
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2241      	movs	r2, #65	; 0x41
 8005c1c:	2120      	movs	r1, #32
 8005c1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2242      	movs	r2, #66	; 0x42
 8005c24:	2100      	movs	r1, #0
 8005c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2240      	movs	r2, #64	; 0x40
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e007      	b.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d1cc      	bne.n	8005bdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b004      	add	sp, #16
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c58:	e028      	b.n	8005cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f82f 	bl	8005cc4 <I2C_IsAcknowledgeFailed>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e026      	b.n	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fe fb17 	bl	80042a0 <HAL_GetTick>
 8005c72:	0002      	movs	r2, r0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d113      	bne.n	8005cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c88:	2220      	movs	r2, #32
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2241      	movs	r2, #65	; 0x41
 8005c94:	2120      	movs	r1, #32
 8005c96:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2242      	movs	r2, #66	; 0x42
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e007      	b.n	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d1cf      	bne.n	8005c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b004      	add	sp, #16
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2210      	movs	r2, #16
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d164      	bne.n	8005da8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	049b      	lsls	r3, r3, #18
 8005ce8:	401a      	ands	r2, r3
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	049b      	lsls	r3, r3, #18
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d02b      	beq.n	8005d4a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2180      	movs	r1, #128	; 0x80
 8005cfe:	01c9      	lsls	r1, r1, #7
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d04:	e021      	b.n	8005d4a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	d01e      	beq.n	8005d4a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0c:	f7fe fac8 	bl	80042a0 <HAL_GetTick>
 8005d10:	0002      	movs	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d302      	bcc.n	8005d22 <I2C_IsAcknowledgeFailed+0x5e>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d113      	bne.n	8005d4a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	2220      	movs	r2, #32
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2241      	movs	r2, #65	; 0x41
 8005d32:	2120      	movs	r1, #32
 8005d34:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2242      	movs	r2, #66	; 0x42
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	2100      	movs	r1, #0
 8005d44:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e02f      	b.n	8005daa <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2220      	movs	r2, #32
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d1d6      	bne.n	8005d06 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2220      	movs	r2, #32
 8005d66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff fece 	bl	8005b0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	490e      	ldr	r1, [pc, #56]	; (8005db4 <I2C_IsAcknowledgeFailed+0xf0>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	2204      	movs	r2, #4
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2241      	movs	r2, #65	; 0x41
 8005d90:	2120      	movs	r1, #32
 8005d92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2242      	movs	r2, #66	; 0x42
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2240      	movs	r2, #64	; 0x40
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b004      	add	sp, #16
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	fe00e800 	.word	0xfe00e800

08005db8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	0008      	movs	r0, r1
 8005dc2:	0011      	movs	r1, r2
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	240a      	movs	r4, #10
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	1c02      	adds	r2, r0, #0
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	2009      	movs	r0, #9
 8005dd0:	183b      	adds	r3, r7, r0
 8005dd2:	1c0a      	adds	r2, r1, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	0d51      	lsrs	r1, r2, #21
 8005de0:	2280      	movs	r2, #128	; 0x80
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	400a      	ands	r2, r1
 8005de6:	490e      	ldr	r1, [pc, #56]	; (8005e20 <I2C_TransferConfig+0x68>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	43d2      	mvns	r2, r2
 8005dec:	401a      	ands	r2, r3
 8005dee:	0011      	movs	r1, r2
 8005df0:	193b      	adds	r3, r7, r4
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	059b      	lsls	r3, r3, #22
 8005df6:	0d9a      	lsrs	r2, r3, #22
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	0418      	lsls	r0, r3, #16
 8005dfe:	23ff      	movs	r3, #255	; 0xff
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	4003      	ands	r3, r0
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b005      	add	sp, #20
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	03ff63ff 	.word	0x03ff63ff

08005e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2241      	movs	r2, #65	; 0x41
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d138      	bne.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2240      	movs	r2, #64	; 0x40
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e032      	b.n	8005eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2240      	movs	r2, #64	; 0x40
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2241      	movs	r2, #65	; 0x41
 8005e54:	2124      	movs	r1, #36	; 0x24
 8005e56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2101      	movs	r1, #1
 8005e64:	438a      	bics	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4911      	ldr	r1, [pc, #68]	; (8005eb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005e74:	400a      	ands	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2101      	movs	r1, #1
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2241      	movs	r2, #65	; 0x41
 8005e9c:	2120      	movs	r1, #32
 8005e9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2240      	movs	r2, #64	; 0x40
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	0018      	movs	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b002      	add	sp, #8
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	ffffefff 	.word	0xffffefff

08005ebc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2241      	movs	r2, #65	; 0x41
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d139      	bne.n	8005f46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2240      	movs	r2, #64	; 0x40
 8005ed6:	5c9b      	ldrb	r3, [r3, r2]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e033      	b.n	8005f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2240      	movs	r2, #64	; 0x40
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2241      	movs	r2, #65	; 0x41
 8005eec:	2124      	movs	r1, #36	; 0x24
 8005eee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2101      	movs	r1, #1
 8005efc:	438a      	bics	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2241      	movs	r2, #65	; 0x41
 8005f36:	2120      	movs	r1, #32
 8005f38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	2100      	movs	r1, #0
 8005f40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b004      	add	sp, #16
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	fffff0ff 	.word	0xfffff0ff

08005f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e305      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <HAL_RCC_OscConfig+0x1e>
 8005f70:	e08d      	b.n	800608e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f72:	4bc5      	ldr	r3, [pc, #788]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	220c      	movs	r2, #12
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d00e      	beq.n	8005f9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f7e:	4bc2      	ldr	r3, [pc, #776]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	220c      	movs	r2, #12
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d116      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x64>
 8005f8a:	4bbf      	ldr	r3, [pc, #764]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	025b      	lsls	r3, r3, #9
 8005f92:	401a      	ands	r2, r3
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	025b      	lsls	r3, r3, #9
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d10d      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9c:	4bba      	ldr	r3, [pc, #744]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d100      	bne.n	8005faa <HAL_RCC_OscConfig+0x56>
 8005fa8:	e070      	b.n	800608c <HAL_RCC_OscConfig+0x138>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d000      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x60>
 8005fb2:	e06b      	b.n	800608c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e2dc      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x7c>
 8005fc0:	4bb1      	ldr	r3, [pc, #708]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4bb0      	ldr	r3, [pc, #704]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fc6:	2180      	movs	r1, #128	; 0x80
 8005fc8:	0249      	lsls	r1, r1, #9
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e02f      	b.n	8006030 <HAL_RCC_OscConfig+0xdc>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x9e>
 8005fd8:	4bab      	ldr	r3, [pc, #684]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4baa      	ldr	r3, [pc, #680]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fde:	49ab      	ldr	r1, [pc, #684]	; (800628c <HAL_RCC_OscConfig+0x338>)
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	4ba8      	ldr	r3, [pc, #672]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4ba7      	ldr	r3, [pc, #668]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005fea:	49a9      	ldr	r1, [pc, #676]	; (8006290 <HAL_RCC_OscConfig+0x33c>)
 8005fec:	400a      	ands	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e01e      	b.n	8006030 <HAL_RCC_OscConfig+0xdc>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10e      	bne.n	8006018 <HAL_RCC_OscConfig+0xc4>
 8005ffa:	4ba3      	ldr	r3, [pc, #652]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4ba2      	ldr	r3, [pc, #648]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006000:	2180      	movs	r1, #128	; 0x80
 8006002:	02c9      	lsls	r1, r1, #11
 8006004:	430a      	orrs	r2, r1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	4b9f      	ldr	r3, [pc, #636]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b9e      	ldr	r3, [pc, #632]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	0249      	lsls	r1, r1, #9
 8006012:	430a      	orrs	r2, r1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e00b      	b.n	8006030 <HAL_RCC_OscConfig+0xdc>
 8006018:	4b9b      	ldr	r3, [pc, #620]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b9a      	ldr	r3, [pc, #616]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800601e:	499b      	ldr	r1, [pc, #620]	; (800628c <HAL_RCC_OscConfig+0x338>)
 8006020:	400a      	ands	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	4b98      	ldr	r3, [pc, #608]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b97      	ldr	r3, [pc, #604]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800602a:	4999      	ldr	r1, [pc, #612]	; (8006290 <HAL_RCC_OscConfig+0x33c>)
 800602c:	400a      	ands	r2, r1
 800602e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d014      	beq.n	8006062 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fe f932 	bl	80042a0 <HAL_GetTick>
 800603c:	0003      	movs	r3, r0
 800603e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006042:	f7fe f92d 	bl	80042a0 <HAL_GetTick>
 8006046:	0002      	movs	r2, r0
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b64      	cmp	r3, #100	; 0x64
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e28e      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006054:	4b8c      	ldr	r3, [pc, #560]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	4013      	ands	r3, r2
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0xee>
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fe f91d 	bl	80042a0 <HAL_GetTick>
 8006066:	0003      	movs	r3, r0
 8006068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800606c:	f7fe f918 	bl	80042a0 <HAL_GetTick>
 8006070:	0002      	movs	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	; 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e279      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607e:	4b82      	ldr	r3, [pc, #520]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	4013      	ands	r3, r2
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x118>
 800608a:	e000      	b.n	800608e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2202      	movs	r2, #2
 8006094:	4013      	ands	r3, r2
 8006096:	d100      	bne.n	800609a <HAL_RCC_OscConfig+0x146>
 8006098:	e06c      	b.n	8006174 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800609a:	4b7b      	ldr	r3, [pc, #492]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	220c      	movs	r2, #12
 80060a0:	4013      	ands	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80060a4:	4b78      	ldr	r3, [pc, #480]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	220c      	movs	r2, #12
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d11f      	bne.n	80060f0 <HAL_RCC_OscConfig+0x19c>
 80060b0:	4b75      	ldr	r3, [pc, #468]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	025b      	lsls	r3, r3, #9
 80060b8:	401a      	ands	r2, r3
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d116      	bne.n	80060f0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	4b71      	ldr	r3, [pc, #452]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2202      	movs	r2, #2
 80060c8:	4013      	ands	r3, r2
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_OscConfig+0x184>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e24c      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d8:	4b6b      	ldr	r3, [pc, #428]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	22f8      	movs	r2, #248	; 0xf8
 80060de:	4393      	bics	r3, r2
 80060e0:	0019      	movs	r1, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	00da      	lsls	r2, r3, #3
 80060e8:	4b67      	ldr	r3, [pc, #412]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	e041      	b.n	8006174 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d024      	beq.n	8006142 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f8:	4b63      	ldr	r3, [pc, #396]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b62      	ldr	r3, [pc, #392]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80060fe:	2101      	movs	r1, #1
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006104:	f7fe f8cc 	bl	80042a0 <HAL_GetTick>
 8006108:	0003      	movs	r3, r0
 800610a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610e:	f7fe f8c7 	bl	80042a0 <HAL_GetTick>
 8006112:	0002      	movs	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e228      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	4b59      	ldr	r3, [pc, #356]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2202      	movs	r2, #2
 8006126:	4013      	ands	r3, r2
 8006128:	d0f1      	beq.n	800610e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612a:	4b57      	ldr	r3, [pc, #348]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	22f8      	movs	r2, #248	; 0xf8
 8006130:	4393      	bics	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	00da      	lsls	r2, r3, #3
 800613a:	4b53      	ldr	r3, [pc, #332]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800613c:	430a      	orrs	r2, r1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e018      	b.n	8006174 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006142:	4b51      	ldr	r3, [pc, #324]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006148:	2101      	movs	r1, #1
 800614a:	438a      	bics	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fe f8a7 	bl	80042a0 <HAL_GetTick>
 8006152:	0003      	movs	r3, r0
 8006154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006158:	f7fe f8a2 	bl	80042a0 <HAL_GetTick>
 800615c:	0002      	movs	r2, r0
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e203      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2202      	movs	r2, #2
 8006170:	4013      	ands	r3, r2
 8006172:	d1f1      	bne.n	8006158 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2208      	movs	r2, #8
 800617a:	4013      	ands	r3, r2
 800617c:	d036      	beq.n	80061ec <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d019      	beq.n	80061ba <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006186:	4b40      	ldr	r3, [pc, #256]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618a:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800618c:	2101      	movs	r1, #1
 800618e:	430a      	orrs	r2, r1
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006192:	f7fe f885 	bl	80042a0 <HAL_GetTick>
 8006196:	0003      	movs	r3, r0
 8006198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619c:	f7fe f880 	bl	80042a0 <HAL_GetTick>
 80061a0:	0002      	movs	r2, r0
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e1e1      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ae:	4b36      	ldr	r3, [pc, #216]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2202      	movs	r2, #2
 80061b4:	4013      	ands	r3, r2
 80061b6:	d0f1      	beq.n	800619c <HAL_RCC_OscConfig+0x248>
 80061b8:	e018      	b.n	80061ec <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ba:	4b33      	ldr	r3, [pc, #204]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80061bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061be:	4b32      	ldr	r3, [pc, #200]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80061c0:	2101      	movs	r1, #1
 80061c2:	438a      	bics	r2, r1
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c6:	f7fe f86b 	bl	80042a0 <HAL_GetTick>
 80061ca:	0003      	movs	r3, r0
 80061cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d0:	f7fe f866 	bl	80042a0 <HAL_GetTick>
 80061d4:	0002      	movs	r2, r0
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e1c7      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e2:	4b29      	ldr	r3, [pc, #164]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2202      	movs	r2, #2
 80061e8:	4013      	ands	r3, r2
 80061ea:	d1f1      	bne.n	80061d0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2204      	movs	r2, #4
 80061f2:	4013      	ands	r3, r2
 80061f4:	d100      	bne.n	80061f8 <HAL_RCC_OscConfig+0x2a4>
 80061f6:	e0b5      	b.n	8006364 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f8:	201f      	movs	r0, #31
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006200:	4b21      	ldr	r3, [pc, #132]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	055b      	lsls	r3, r3, #21
 8006208:	4013      	ands	r3, r2
 800620a:	d110      	bne.n	800622e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	0549      	lsls	r1, r1, #21
 8006216:	430a      	orrs	r2, r1
 8006218:	61da      	str	r2, [r3, #28]
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800621c:	69da      	ldr	r2, [r3, #28]
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	055b      	lsls	r3, r3, #21
 8006222:	4013      	ands	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006228:	183b      	adds	r3, r7, r0
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622e:	4b19      	ldr	r3, [pc, #100]	; (8006294 <HAL_RCC_OscConfig+0x340>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4013      	ands	r3, r2
 8006238:	d11a      	bne.n	8006270 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_RCC_OscConfig+0x340>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <HAL_RCC_OscConfig+0x340>)
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	0049      	lsls	r1, r1, #1
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006248:	f7fe f82a 	bl	80042a0 <HAL_GetTick>
 800624c:	0003      	movs	r3, r0
 800624e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fe f825 	bl	80042a0 <HAL_GetTick>
 8006256:	0002      	movs	r2, r0
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b64      	cmp	r3, #100	; 0x64
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e186      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <HAL_RCC_OscConfig+0x340>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4013      	ands	r3, r2
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10f      	bne.n	8006298 <HAL_RCC_OscConfig+0x344>
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <HAL_RCC_OscConfig+0x334>)
 800627e:	2101      	movs	r1, #1
 8006280:	430a      	orrs	r2, r1
 8006282:	621a      	str	r2, [r3, #32]
 8006284:	e036      	b.n	80062f4 <HAL_RCC_OscConfig+0x3a0>
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	40021000 	.word	0x40021000
 800628c:	fffeffff 	.word	0xfffeffff
 8006290:	fffbffff 	.word	0xfffbffff
 8006294:	40007000 	.word	0x40007000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <HAL_RCC_OscConfig+0x366>
 80062a0:	4bb6      	ldr	r3, [pc, #728]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	4bb5      	ldr	r3, [pc, #724]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062a6:	2101      	movs	r1, #1
 80062a8:	438a      	bics	r2, r1
 80062aa:	621a      	str	r2, [r3, #32]
 80062ac:	4bb3      	ldr	r3, [pc, #716]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062ae:	6a1a      	ldr	r2, [r3, #32]
 80062b0:	4bb2      	ldr	r3, [pc, #712]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062b2:	2104      	movs	r1, #4
 80062b4:	438a      	bics	r2, r1
 80062b6:	621a      	str	r2, [r3, #32]
 80062b8:	e01c      	b.n	80062f4 <HAL_RCC_OscConfig+0x3a0>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d10c      	bne.n	80062dc <HAL_RCC_OscConfig+0x388>
 80062c2:	4bae      	ldr	r3, [pc, #696]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	4bad      	ldr	r3, [pc, #692]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062c8:	2104      	movs	r1, #4
 80062ca:	430a      	orrs	r2, r1
 80062cc:	621a      	str	r2, [r3, #32]
 80062ce:	4bab      	ldr	r3, [pc, #684]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	4baa      	ldr	r3, [pc, #680]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062d4:	2101      	movs	r1, #1
 80062d6:	430a      	orrs	r2, r1
 80062d8:	621a      	str	r2, [r3, #32]
 80062da:	e00b      	b.n	80062f4 <HAL_RCC_OscConfig+0x3a0>
 80062dc:	4ba7      	ldr	r3, [pc, #668]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	4ba6      	ldr	r3, [pc, #664]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062e2:	2101      	movs	r1, #1
 80062e4:	438a      	bics	r2, r1
 80062e6:	621a      	str	r2, [r3, #32]
 80062e8:	4ba4      	ldr	r3, [pc, #656]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	4ba3      	ldr	r3, [pc, #652]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80062ee:	2104      	movs	r1, #4
 80062f0:	438a      	bics	r2, r1
 80062f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d014      	beq.n	8006326 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fc:	f7fd ffd0 	bl	80042a0 <HAL_GetTick>
 8006300:	0003      	movs	r3, r0
 8006302:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	e009      	b.n	800631a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fd ffcb 	bl	80042a0 <HAL_GetTick>
 800630a:	0002      	movs	r2, r0
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	4a9b      	ldr	r2, [pc, #620]	; (8006580 <HAL_RCC_OscConfig+0x62c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e12b      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	4b98      	ldr	r3, [pc, #608]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	2202      	movs	r2, #2
 8006320:	4013      	ands	r3, r2
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x3b2>
 8006324:	e013      	b.n	800634e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006326:	f7fd ffbb 	bl	80042a0 <HAL_GetTick>
 800632a:	0003      	movs	r3, r0
 800632c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632e:	e009      	b.n	8006344 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006330:	f7fd ffb6 	bl	80042a0 <HAL_GetTick>
 8006334:	0002      	movs	r2, r0
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	4a91      	ldr	r2, [pc, #580]	; (8006580 <HAL_RCC_OscConfig+0x62c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e116      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006344:	4b8d      	ldr	r3, [pc, #564]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	2202      	movs	r2, #2
 800634a:	4013      	ands	r3, r2
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800634e:	231f      	movs	r3, #31
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b88      	ldr	r3, [pc, #544]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	4b87      	ldr	r3, [pc, #540]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800635e:	4989      	ldr	r1, [pc, #548]	; (8006584 <HAL_RCC_OscConfig+0x630>)
 8006360:	400a      	ands	r2, r1
 8006362:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2210      	movs	r2, #16
 800636a:	4013      	ands	r3, r2
 800636c:	d063      	beq.n	8006436 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d12a      	bne.n	80063cc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006376:	4b81      	ldr	r3, [pc, #516]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637a:	4b80      	ldr	r3, [pc, #512]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800637c:	2104      	movs	r1, #4
 800637e:	430a      	orrs	r2, r1
 8006380:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006382:	4b7e      	ldr	r3, [pc, #504]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006386:	4b7d      	ldr	r3, [pc, #500]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006388:	2101      	movs	r1, #1
 800638a:	430a      	orrs	r2, r1
 800638c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638e:	f7fd ff87 	bl	80042a0 <HAL_GetTick>
 8006392:	0003      	movs	r3, r0
 8006394:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006398:	f7fd ff82 	bl	80042a0 <HAL_GetTick>
 800639c:	0002      	movs	r2, r0
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e0e3      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80063aa:	4b74      	ldr	r3, [pc, #464]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	2202      	movs	r2, #2
 80063b0:	4013      	ands	r3, r2
 80063b2:	d0f1      	beq.n	8006398 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063b4:	4b71      	ldr	r3, [pc, #452]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	22f8      	movs	r2, #248	; 0xf8
 80063ba:	4393      	bics	r3, r2
 80063bc:	0019      	movs	r1, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	4b6d      	ldr	r3, [pc, #436]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063c6:	430a      	orrs	r2, r1
 80063c8:	635a      	str	r2, [r3, #52]	; 0x34
 80063ca:	e034      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	3305      	adds	r3, #5
 80063d2:	d111      	bne.n	80063f8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80063d4:	4b69      	ldr	r3, [pc, #420]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	4b68      	ldr	r3, [pc, #416]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063da:	2104      	movs	r1, #4
 80063dc:	438a      	bics	r2, r1
 80063de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063e0:	4b66      	ldr	r3, [pc, #408]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	22f8      	movs	r2, #248	; 0xf8
 80063e6:	4393      	bics	r3, r2
 80063e8:	0019      	movs	r1, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	00da      	lsls	r2, r3, #3
 80063f0:	4b62      	ldr	r3, [pc, #392]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063f2:	430a      	orrs	r2, r1
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34
 80063f6:	e01e      	b.n	8006436 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063f8:	4b60      	ldr	r3, [pc, #384]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	4b5f      	ldr	r3, [pc, #380]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80063fe:	2104      	movs	r1, #4
 8006400:	430a      	orrs	r2, r1
 8006402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006404:	4b5d      	ldr	r3, [pc, #372]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	4b5c      	ldr	r3, [pc, #368]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800640a:	2101      	movs	r1, #1
 800640c:	438a      	bics	r2, r1
 800640e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006410:	f7fd ff46 	bl	80042a0 <HAL_GetTick>
 8006414:	0003      	movs	r3, r0
 8006416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800641a:	f7fd ff41 	bl	80042a0 <HAL_GetTick>
 800641e:	0002      	movs	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e0a2      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800642c:	4b53      	ldr	r3, [pc, #332]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	2202      	movs	r2, #2
 8006432:	4013      	ands	r3, r2
 8006434:	d1f1      	bne.n	800641a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d100      	bne.n	8006440 <HAL_RCC_OscConfig+0x4ec>
 800643e:	e097      	b.n	8006570 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006440:	4b4e      	ldr	r3, [pc, #312]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	220c      	movs	r2, #12
 8006446:	4013      	ands	r3, r2
 8006448:	2b08      	cmp	r3, #8
 800644a:	d100      	bne.n	800644e <HAL_RCC_OscConfig+0x4fa>
 800644c:	e06b      	b.n	8006526 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d14c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006456:	4b49      	ldr	r3, [pc, #292]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b48      	ldr	r3, [pc, #288]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800645c:	494a      	ldr	r1, [pc, #296]	; (8006588 <HAL_RCC_OscConfig+0x634>)
 800645e:	400a      	ands	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006462:	f7fd ff1d 	bl	80042a0 <HAL_GetTick>
 8006466:	0003      	movs	r3, r0
 8006468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646c:	f7fd ff18 	bl	80042a0 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e079      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800647e:	4b3f      	ldr	r3, [pc, #252]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	049b      	lsls	r3, r3, #18
 8006486:	4013      	ands	r3, r2
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800648a:	4b3c      	ldr	r3, [pc, #240]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	220f      	movs	r2, #15
 8006490:	4393      	bics	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4b38      	ldr	r3, [pc, #224]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800649a:	430a      	orrs	r2, r1
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c
 800649e:	4b37      	ldr	r3, [pc, #220]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4a3a      	ldr	r2, [pc, #232]	; (800658c <HAL_RCC_OscConfig+0x638>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	0019      	movs	r1, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	431a      	orrs	r2, r3
 80064b2:	4b32      	ldr	r3, [pc, #200]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064b4:	430a      	orrs	r2, r1
 80064b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b8:	4b30      	ldr	r3, [pc, #192]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b2f      	ldr	r3, [pc, #188]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	0449      	lsls	r1, r1, #17
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c6:	f7fd feeb 	bl	80042a0 <HAL_GetTick>
 80064ca:	0003      	movs	r3, r0
 80064cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d0:	f7fd fee6 	bl	80042a0 <HAL_GetTick>
 80064d4:	0002      	movs	r2, r0
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e047      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	049b      	lsls	r3, r3, #18
 80064ea:	4013      	ands	r3, r2
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCC_OscConfig+0x57c>
 80064ee:	e03f      	b.n	8006570 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b21      	ldr	r3, [pc, #132]	; (800657c <HAL_RCC_OscConfig+0x628>)
 80064f6:	4924      	ldr	r1, [pc, #144]	; (8006588 <HAL_RCC_OscConfig+0x634>)
 80064f8:	400a      	ands	r2, r1
 80064fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fd fed0 	bl	80042a0 <HAL_GetTick>
 8006500:	0003      	movs	r3, r0
 8006502:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006506:	f7fd fecb 	bl	80042a0 <HAL_GetTick>
 800650a:	0002      	movs	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e02c      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006518:	4b18      	ldr	r3, [pc, #96]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	049b      	lsls	r3, r3, #18
 8006520:	4013      	ands	r3, r2
 8006522:	d1f0      	bne.n	8006506 <HAL_RCC_OscConfig+0x5b2>
 8006524:	e024      	b.n	8006570 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e01f      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_RCC_OscConfig+0x628>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCC_OscConfig+0x628>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	025b      	lsls	r3, r3, #9
 8006544:	401a      	ands	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	429a      	cmp	r2, r3
 800654c:	d10e      	bne.n	800656c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	220f      	movs	r2, #15
 8006552:	401a      	ands	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d107      	bne.n	800656c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	23f0      	movs	r3, #240	; 0xf0
 8006560:	039b      	lsls	r3, r3, #14
 8006562:	401a      	ands	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b008      	add	sp, #32
 8006578:	bd80      	pop	{r7, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	40021000 	.word	0x40021000
 8006580:	00001388 	.word	0x00001388
 8006584:	efffffff 	.word	0xefffffff
 8006588:	feffffff 	.word	0xfeffffff
 800658c:	ffc2ffff 	.word	0xffc2ffff

08006590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0b3      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b5b      	ldr	r3, [pc, #364]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2201      	movs	r2, #1
 80065aa:	4013      	ands	r3, r2
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d911      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b58      	ldr	r3, [pc, #352]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	4393      	bics	r3, r2
 80065ba:	0019      	movs	r1, r3
 80065bc:	4b55      	ldr	r3, [pc, #340]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c4:	4b53      	ldr	r3, [pc, #332]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	4013      	ands	r3, r2
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e09a      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d015      	beq.n	800660c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2204      	movs	r2, #4
 80065e6:	4013      	ands	r3, r2
 80065e8:	d006      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80065ea:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	4b4a      	ldr	r3, [pc, #296]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80065f0:	21e0      	movs	r1, #224	; 0xe0
 80065f2:	00c9      	lsls	r1, r1, #3
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f8:	4b47      	ldr	r3, [pc, #284]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	22f0      	movs	r2, #240	; 0xf0
 80065fe:	4393      	bics	r3, r2
 8006600:	0019      	movs	r1, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	4b44      	ldr	r3, [pc, #272]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2201      	movs	r2, #1
 8006612:	4013      	ands	r3, r2
 8006614:	d040      	beq.n	8006698 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	4b3e      	ldr	r3, [pc, #248]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	4013      	ands	r3, r2
 8006628:	d114      	bne.n	8006654 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e06e      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006636:	4b38      	ldr	r3, [pc, #224]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	049b      	lsls	r3, r3, #18
 800663e:	4013      	ands	r3, r2
 8006640:	d108      	bne.n	8006654 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e062      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006646:	4b34      	ldr	r3, [pc, #208]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2202      	movs	r2, #2
 800664c:	4013      	ands	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e05b      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006654:	4b30      	ldr	r3, [pc, #192]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2203      	movs	r2, #3
 800665a:	4393      	bics	r3, r2
 800665c:	0019      	movs	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006668:	f7fd fe1a 	bl	80042a0 <HAL_GetTick>
 800666c:	0003      	movs	r3, r0
 800666e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006670:	e009      	b.n	8006686 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006672:	f7fd fe15 	bl	80042a0 <HAL_GetTick>
 8006676:	0002      	movs	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	4a27      	ldr	r2, [pc, #156]	; (800671c <HAL_RCC_ClockConfig+0x18c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e042      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	220c      	movs	r2, #12
 800668c:	401a      	ands	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	429a      	cmp	r2, r3
 8006696:	d1ec      	bne.n	8006672 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006698:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2201      	movs	r2, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d211      	bcs.n	80066ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a6:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2201      	movs	r2, #1
 80066ac:	4393      	bics	r3, r2
 80066ae:	0019      	movs	r1, r3
 80066b0:	4b18      	ldr	r3, [pc, #96]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b8:	4b16      	ldr	r3, [pc, #88]	; (8006714 <HAL_RCC_ClockConfig+0x184>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	4013      	ands	r3, r2
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e020      	b.n	800670c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2204      	movs	r2, #4
 80066d0:	4013      	ands	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <HAL_RCC_ClockConfig+0x190>)
 80066da:	4013      	ands	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066e8:	f000 f820 	bl	800672c <HAL_RCC_GetSysClockFreq>
 80066ec:	0001      	movs	r1, r0
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <HAL_RCC_ClockConfig+0x188>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	220f      	movs	r2, #15
 80066f6:	4013      	ands	r3, r2
 80066f8:	4a0a      	ldr	r2, [pc, #40]	; (8006724 <HAL_RCC_ClockConfig+0x194>)
 80066fa:	5cd3      	ldrb	r3, [r2, r3]
 80066fc:	000a      	movs	r2, r1
 80066fe:	40da      	lsrs	r2, r3
 8006700:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x198>)
 8006702:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006704:	2003      	movs	r0, #3
 8006706:	f7fd fd85 	bl	8004214 <HAL_InitTick>
  
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b004      	add	sp, #16
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40022000 	.word	0x40022000
 8006718:	40021000 	.word	0x40021000
 800671c:	00001388 	.word	0x00001388
 8006720:	fffff8ff 	.word	0xfffff8ff
 8006724:	0800b534 	.word	0x0800b534
 8006728:	20000008 	.word	0x20000008

0800672c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b08f      	sub	sp, #60	; 0x3c
 8006730:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006732:	2314      	movs	r3, #20
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006738:	ca13      	ldmia	r2!, {r0, r1, r4}
 800673a:	c313      	stmia	r3!, {r0, r1, r4}
 800673c:	6812      	ldr	r2, [r2, #0]
 800673e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006744:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006746:	c313      	stmia	r3!, {r0, r1, r4}
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006750:	2300      	movs	r3, #0
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
 8006754:	2300      	movs	r3, #0
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
 8006758:	2300      	movs	r3, #0
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006760:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	220c      	movs	r2, #12
 800676a:	4013      	ands	r3, r2
 800676c:	2b04      	cmp	r3, #4
 800676e:	d002      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0x4a>
 8006770:	2b08      	cmp	r3, #8
 8006772:	d003      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0x50>
 8006774:	e02c      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8006778:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800677a:	e02c      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	0c9b      	lsrs	r3, r3, #18
 8006780:	220f      	movs	r2, #15
 8006782:	4013      	ands	r3, r2
 8006784:	2214      	movs	r2, #20
 8006786:	18ba      	adds	r2, r7, r2
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800678c:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	220f      	movs	r2, #15
 8006792:	4013      	ands	r3, r2
 8006794:	1d3a      	adds	r2, r7, #4
 8006796:	5cd3      	ldrb	r3, [r2, r3]
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800679a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	025b      	lsls	r3, r3, #9
 80067a0:	4013      	ands	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a6:	4811      	ldr	r0, [pc, #68]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80067a8:	f7f9 fcc8 	bl	800013c <__udivsi3>
 80067ac:	0003      	movs	r3, r0
 80067ae:	001a      	movs	r2, r3
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	4353      	muls	r3, r2
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	e008      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ba:	480c      	ldr	r0, [pc, #48]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80067bc:	f7f9 fcbe 	bl	800013c <__udivsi3>
 80067c0:	0003      	movs	r3, r0
 80067c2:	001a      	movs	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	4353      	muls	r3, r2
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80067d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	b00f      	add	sp, #60	; 0x3c
 80067de:	bd90      	pop	{r4, r7, pc}
 80067e0:	0800aca8 	.word	0x0800aca8
 80067e4:	0800acb8 	.word	0x0800acb8
 80067e8:	40021000 	.word	0x40021000
 80067ec:	007a1200 	.word	0x007a1200

080067f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <HAL_RCC_GetHCLKFreq+0x10>)
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	20000008 	.word	0x20000008

08006804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006808:	f7ff fff2 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 800680c:	0001      	movs	r1, r0
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	2207      	movs	r2, #7
 8006816:	4013      	ands	r3, r2
 8006818:	4a04      	ldr	r2, [pc, #16]	; (800682c <HAL_RCC_GetPCLK1Freq+0x28>)
 800681a:	5cd3      	ldrb	r3, [r2, r3]
 800681c:	40d9      	lsrs	r1, r3
 800681e:	000b      	movs	r3, r1
}    
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	40021000 	.word	0x40021000
 800682c:	0800b544 	.word	0x0800b544

08006830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	025b      	lsls	r3, r3, #9
 8006848:	4013      	ands	r3, r2
 800684a:	d100      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800684c:	e08e      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800684e:	2017      	movs	r0, #23
 8006850:	183b      	adds	r3, r7, r0
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	055b      	lsls	r3, r3, #21
 800685e:	4013      	ands	r3, r2
 8006860:	d110      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	4b53      	ldr	r3, [pc, #332]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	0549      	lsls	r1, r1, #21
 800686c:	430a      	orrs	r2, r1
 800686e:	61da      	str	r2, [r3, #28]
 8006870:	4b50      	ldr	r3, [pc, #320]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	055b      	lsls	r3, r3, #21
 8006878:	4013      	ands	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687e:	183b      	adds	r3, r7, r0
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d11a      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006890:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b48      	ldr	r3, [pc, #288]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	0049      	lsls	r1, r1, #1
 800689a:	430a      	orrs	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689e:	f7fd fcff 	bl	80042a0 <HAL_GetTick>
 80068a2:	0003      	movs	r3, r0
 80068a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a8:	f7fd fcfa 	bl	80042a0 <HAL_GetTick>
 80068ac:	0002      	movs	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e077      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ba:	4b3f      	ldr	r3, [pc, #252]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	2380      	movs	r3, #128	; 0x80
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4013      	ands	r3, r2
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c6:	4b3b      	ldr	r3, [pc, #236]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	23c0      	movs	r3, #192	; 0xc0
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4013      	ands	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d034      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	23c0      	movs	r3, #192	; 0xc0
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4013      	ands	r3, r2
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d02c      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e8:	4b32      	ldr	r3, [pc, #200]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4a33      	ldr	r2, [pc, #204]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068f2:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	0249      	lsls	r1, r1, #9
 80068fc:	430a      	orrs	r2, r1
 80068fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006900:	4b2c      	ldr	r3, [pc, #176]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006906:	492e      	ldr	r1, [pc, #184]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006908:	400a      	ands	r2, r1
 800690a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800690c:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	4013      	ands	r3, r2
 8006918:	d013      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691a:	f7fd fcc1 	bl	80042a0 <HAL_GetTick>
 800691e:	0003      	movs	r3, r0
 8006920:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006922:	e009      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006924:	f7fd fcbc 	bl	80042a0 <HAL_GetTick>
 8006928:	0002      	movs	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e038      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	2202      	movs	r2, #2
 800693e:	4013      	ands	r3, r2
 8006940:	d0f0      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006948:	4013      	ands	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006952:	430a      	orrs	r2, r1
 8006954:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006956:	2317      	movs	r3, #23
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006960:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006966:	4918      	ldr	r1, [pc, #96]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006968:	400a      	ands	r2, r1
 800696a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2201      	movs	r2, #1
 8006972:	4013      	ands	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006976:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	2203      	movs	r2, #3
 800697c:	4393      	bics	r3, r2
 800697e:	0019      	movs	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006986:	430a      	orrs	r2, r1
 8006988:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	4013      	ands	r3, r2
 8006992:	d009      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	2210      	movs	r2, #16
 800699a:	4393      	bics	r3, r2
 800699c:	0019      	movs	r1, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80069a4:	430a      	orrs	r2, r1
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b006      	add	sp, #24
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40007000 	.word	0x40007000
 80069bc:	fffffcff 	.word	0xfffffcff
 80069c0:	fffeffff 	.word	0xfffeffff
 80069c4:	00001388 	.word	0x00001388
 80069c8:	efffffff 	.word	0xefffffff

080069cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e042      	b.n	8006a64 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	223d      	movs	r2, #61	; 0x3d
 80069e2:	5c9b      	ldrb	r3, [r3, r2]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d107      	bne.n	80069fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	223c      	movs	r2, #60	; 0x3c
 80069ee:	2100      	movs	r1, #0
 80069f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7fd fa69 	bl	8003ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	223d      	movs	r2, #61	; 0x3d
 80069fe:	2102      	movs	r1, #2
 8006a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	f000 f945 	bl	8006c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2246      	movs	r2, #70	; 0x46
 8006a16:	2101      	movs	r1, #1
 8006a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	223e      	movs	r2, #62	; 0x3e
 8006a1e:	2101      	movs	r1, #1
 8006a20:	5499      	strb	r1, [r3, r2]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	223f      	movs	r2, #63	; 0x3f
 8006a26:	2101      	movs	r1, #1
 8006a28:	5499      	strb	r1, [r3, r2]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2240      	movs	r2, #64	; 0x40
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5499      	strb	r1, [r3, r2]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2241      	movs	r2, #65	; 0x41
 8006a36:	2101      	movs	r1, #1
 8006a38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2242      	movs	r2, #66	; 0x42
 8006a3e:	2101      	movs	r1, #1
 8006a40:	5499      	strb	r1, [r3, r2]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2243      	movs	r2, #67	; 0x43
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2244      	movs	r2, #68	; 0x44
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2245      	movs	r2, #69	; 0x45
 8006a56:	2101      	movs	r1, #1
 8006a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	223d      	movs	r2, #61	; 0x3d
 8006a5e:	2101      	movs	r1, #1
 8006a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	223d      	movs	r2, #61	; 0x3d
 8006a78:	5c9b      	ldrb	r3, [r3, r2]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e02d      	b.n	8006ae0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	223d      	movs	r2, #61	; 0x3d
 8006a88:	2102      	movs	r1, #2
 8006a8a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <HAL_TIM_Base_Start+0x7c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_TIM_Base_Start+0x3e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a14      	ldr	r2, [pc, #80]	; (8006aec <HAL_TIM_Base_Start+0x80>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_TIM_Base_Start+0x3e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <HAL_TIM_Base_Start+0x84>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d111      	bne.n	8006ace <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d010      	beq.n	8006ade <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	e007      	b.n	8006ade <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	430a      	orrs	r2, r1
 8006adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40014000 	.word	0x40014000

08006af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	230f      	movs	r3, #15
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	223c      	movs	r2, #60	; 0x3c
 8006b0a:	5c9b      	ldrb	r3, [r3, r2]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_ConfigClockSource+0x20>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0bc      	b.n	8006c8e <HAL_TIM_ConfigClockSource+0x19a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	223c      	movs	r2, #60	; 0x3c
 8006b18:	2101      	movs	r1, #1
 8006b1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	223d      	movs	r2, #61	; 0x3d
 8006b20:	2102      	movs	r1, #2
 8006b22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2277      	movs	r2, #119	; 0x77
 8006b30:	4393      	bics	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a58      	ldr	r2, [pc, #352]	; (8006c98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	0192      	lsls	r2, r2, #6
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0xde>
 8006b50:	2280      	movs	r2, #128	; 0x80
 8006b52:	0192      	lsls	r2, r2, #6
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d900      	bls.n	8006b5a <HAL_TIM_ConfigClockSource+0x66>
 8006b58:	e088      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	0152      	lsls	r2, r2, #5
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d100      	bne.n	8006b64 <HAL_TIM_ConfigClockSource+0x70>
 8006b62:	e088      	b.n	8006c76 <HAL_TIM_ConfigClockSource+0x182>
 8006b64:	2280      	movs	r2, #128	; 0x80
 8006b66:	0152      	lsls	r2, r2, #5
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d900      	bls.n	8006b6e <HAL_TIM_ConfigClockSource+0x7a>
 8006b6c:	e07e      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b6e:	2b70      	cmp	r3, #112	; 0x70
 8006b70:	d018      	beq.n	8006ba4 <HAL_TIM_ConfigClockSource+0xb0>
 8006b72:	d900      	bls.n	8006b76 <HAL_TIM_ConfigClockSource+0x82>
 8006b74:	e07a      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b76:	2b60      	cmp	r3, #96	; 0x60
 8006b78:	d04f      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x126>
 8006b7a:	d900      	bls.n	8006b7e <HAL_TIM_ConfigClockSource+0x8a>
 8006b7c:	e076      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b7e:	2b50      	cmp	r3, #80	; 0x50
 8006b80:	d03b      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x106>
 8006b82:	d900      	bls.n	8006b86 <HAL_TIM_ConfigClockSource+0x92>
 8006b84:	e072      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d057      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x146>
 8006b8a:	d900      	bls.n	8006b8e <HAL_TIM_ConfigClockSource+0x9a>
 8006b8c:	e06e      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b8e:	2b30      	cmp	r3, #48	; 0x30
 8006b90:	d063      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x166>
 8006b92:	d86b      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d060      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x166>
 8006b98:	d868      	bhi.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d05d      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x166>
 8006b9e:	2b10      	cmp	r3, #16
 8006ba0:	d05b      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x166>
 8006ba2:	e063      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f000 f962 	bl	8006e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2277      	movs	r2, #119	; 0x77
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]
      break;
 8006bd0:	e052      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6899      	ldr	r1, [r3, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f000 f94b 	bl	8006e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	01c9      	lsls	r1, r1, #7
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
      break;
 8006bf8:	e03e      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	001a      	movs	r2, r3
 8006c08:	f000 f8be 	bl	8006d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2150      	movs	r1, #80	; 0x50
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 f918 	bl	8006e48 <TIM_ITRx_SetConfig>
      break;
 8006c18:	e02e      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	001a      	movs	r2, r3
 8006c28:	f000 f8dc 	bl	8006de4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2160      	movs	r1, #96	; 0x60
 8006c32:	0018      	movs	r0, r3
 8006c34:	f000 f908 	bl	8006e48 <TIM_ITRx_SetConfig>
      break;
 8006c38:	e01e      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	001a      	movs	r2, r3
 8006c48:	f000 f89e 	bl	8006d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	0018      	movs	r0, r3
 8006c54:	f000 f8f8 	bl	8006e48 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e00e      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	0019      	movs	r1, r3
 8006c64:	0010      	movs	r0, r2
 8006c66:	f000 f8ef 	bl	8006e48 <TIM_ITRx_SetConfig>
      break;
 8006c6a:	e005      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006c6c:	230f      	movs	r3, #15
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
      break;
 8006c74:	e000      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006c76:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	223d      	movs	r2, #61	; 0x3d
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	223c      	movs	r2, #60	; 0x3c
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

  return status;
 8006c88:	230f      	movs	r3, #15
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	781b      	ldrb	r3, [r3, #0]
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b004      	add	sp, #16
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	ffff00ff 	.word	0xffff00ff

08006c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2f      	ldr	r2, [pc, #188]	; (8006d6c <TIM_Base_SetConfig+0xd0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0x20>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2e      	ldr	r2, [pc, #184]	; (8006d70 <TIM_Base_SetConfig+0xd4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d108      	bne.n	8006cce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2270      	movs	r2, #112	; 0x70
 8006cc0:	4393      	bics	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <TIM_Base_SetConfig+0xd0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <TIM_Base_SetConfig+0x62>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <TIM_Base_SetConfig+0xd4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_Base_SetConfig+0x62>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a24      	ldr	r2, [pc, #144]	; (8006d74 <TIM_Base_SetConfig+0xd8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_Base_SetConfig+0x62>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a23      	ldr	r2, [pc, #140]	; (8006d78 <TIM_Base_SetConfig+0xdc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0x62>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a22      	ldr	r2, [pc, #136]	; (8006d7c <TIM_Base_SetConfig+0xe0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0x62>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a21      	ldr	r2, [pc, #132]	; (8006d80 <TIM_Base_SetConfig+0xe4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <TIM_Base_SetConfig+0xe8>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	4393      	bics	r3, r2
 8006d16:	001a      	movs	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <TIM_Base_SetConfig+0xd0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <TIM_Base_SetConfig+0xba>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a0d      	ldr	r2, [pc, #52]	; (8006d78 <TIM_Base_SetConfig+0xdc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <TIM_Base_SetConfig+0xba>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <TIM_Base_SetConfig+0xe0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0xba>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a0b      	ldr	r2, [pc, #44]	; (8006d80 <TIM_Base_SetConfig+0xe4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d103      	bne.n	8006d5e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	615a      	str	r2, [r3, #20]
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b004      	add	sp, #16
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40002000 	.word	0x40002000
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40014400 	.word	0x40014400
 8006d80:	40014800 	.word	0x40014800
 8006d84:	fffffcff 	.word	0xfffffcff

08006d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4393      	bics	r3, r2
 8006da2:	001a      	movs	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	22f0      	movs	r2, #240	; 0xf0
 8006db2:	4393      	bics	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	220a      	movs	r2, #10
 8006dc4:	4393      	bics	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	46c0      	nop			; (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b006      	add	sp, #24
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	2210      	movs	r2, #16
 8006df6:	4393      	bics	r3, r2
 8006df8:	001a      	movs	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4a0d      	ldr	r2, [pc, #52]	; (8006e44 <TIM_TI2_ConfigInputStage+0x60>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	031b      	lsls	r3, r3, #12
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	22a0      	movs	r2, #160	; 0xa0
 8006e20:	4393      	bics	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b006      	add	sp, #24
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	ffff0fff 	.word	0xffff0fff

08006e48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2270      	movs	r2, #112	; 0x70
 8006e5c:	4393      	bics	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	2207      	movs	r2, #7
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	609a      	str	r2, [r3, #8]
}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b004      	add	sp, #16
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <TIM_ETR_SetConfig+0x3c>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	021a      	lsls	r2, r3, #8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b006      	add	sp, #24
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	ffff00ff 	.word	0xffff00ff

08006ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	223c      	movs	r2, #60	; 0x3c
 8006eca:	5c9b      	ldrb	r3, [r3, r2]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e041      	b.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	223c      	movs	r2, #60	; 0x3c
 8006ed8:	2101      	movs	r1, #1
 8006eda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	223d      	movs	r2, #61	; 0x3d
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2270      	movs	r2, #112	; 0x70
 8006ef8:	4393      	bics	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d009      	beq.n	8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a11      	ldr	r2, [pc, #68]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10c      	bne.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	4393      	bics	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	223d      	movs	r2, #61	; 0x3d
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	223c      	movs	r2, #60	; 0x3c
 8006f52:	2100      	movs	r1, #0
 8006f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	0018      	movs	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b004      	add	sp, #16
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40014000 	.word	0x40014000

08006f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e044      	b.n	8007008 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d107      	bne.n	8006f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2274      	movs	r2, #116	; 0x74
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7fc ffb9 	bl	8003f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2224      	movs	r2, #36	; 0x24
 8006f9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	438a      	bics	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f000 fb0c 	bl	80075cc <UART_SetConfig>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e024      	b.n	8007008 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 fc6f 	bl	80078ac <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	490d      	ldr	r1, [pc, #52]	; (8007010 <HAL_UART_Init+0xa4>)
 8006fda:	400a      	ands	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2108      	movs	r1, #8
 8006fea:	438a      	bics	r2, r1
 8006fec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	0018      	movs	r0, r3
 8007002:	f000 fd07 	bl	8007a14 <UART_CheckIdleState>
 8007006:	0003      	movs	r3, r0
}
 8007008:	0018      	movs	r0, r3
 800700a:	46bd      	mov	sp, r7
 800700c:	b002      	add	sp, #8
 800700e:	bd80      	pop	{r7, pc}
 8007010:	fffff7ff 	.word	0xfffff7ff

08007014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b0ab      	sub	sp, #172	; 0xac
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	22a4      	movs	r2, #164	; 0xa4
 8007024:	18b9      	adds	r1, r7, r2
 8007026:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	20a0      	movs	r0, #160	; 0xa0
 8007030:	1839      	adds	r1, r7, r0
 8007032:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	219c      	movs	r1, #156	; 0x9c
 800703c:	1879      	adds	r1, r7, r1
 800703e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007040:	0011      	movs	r1, r2
 8007042:	18bb      	adds	r3, r7, r2
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a99      	ldr	r2, [pc, #612]	; (80072ac <HAL_UART_IRQHandler+0x298>)
 8007048:	4013      	ands	r3, r2
 800704a:	2298      	movs	r2, #152	; 0x98
 800704c:	18bc      	adds	r4, r7, r2
 800704e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007050:	18bb      	adds	r3, r7, r2
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d114      	bne.n	8007082 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007058:	187b      	adds	r3, r7, r1
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2220      	movs	r2, #32
 800705e:	4013      	ands	r3, r2
 8007060:	d00f      	beq.n	8007082 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007062:	183b      	adds	r3, r7, r0
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2220      	movs	r2, #32
 8007068:	4013      	ands	r3, r2
 800706a:	d00a      	beq.n	8007082 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	2b00      	cmp	r3, #0
 8007072:	d100      	bne.n	8007076 <HAL_UART_IRQHandler+0x62>
 8007074:	e27e      	b.n	8007574 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	0010      	movs	r0, r2
 800707e:	4798      	blx	r3
      }
      return;
 8007080:	e278      	b.n	8007574 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007082:	2398      	movs	r3, #152	; 0x98
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d100      	bne.n	800708e <HAL_UART_IRQHandler+0x7a>
 800708c:	e114      	b.n	80072b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800708e:	239c      	movs	r3, #156	; 0x9c
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	4013      	ands	r3, r2
 8007098:	d106      	bne.n	80070a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800709a:	23a0      	movs	r3, #160	; 0xa0
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a83      	ldr	r2, [pc, #524]	; (80072b0 <HAL_UART_IRQHandler+0x29c>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	d100      	bne.n	80070a8 <HAL_UART_IRQHandler+0x94>
 80070a6:	e107      	b.n	80072b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a8:	23a4      	movs	r3, #164	; 0xa4
 80070aa:	18fb      	adds	r3, r7, r3
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2201      	movs	r2, #1
 80070b0:	4013      	ands	r3, r2
 80070b2:	d012      	beq.n	80070da <HAL_UART_IRQHandler+0xc6>
 80070b4:	23a0      	movs	r3, #160	; 0xa0
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	4013      	ands	r3, r2
 80070c0:	d00b      	beq.n	80070da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	589b      	ldr	r3, [r3, r2]
 80070d0:	2201      	movs	r2, #1
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2180      	movs	r1, #128	; 0x80
 80070d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070da:	23a4      	movs	r3, #164	; 0xa4
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2202      	movs	r2, #2
 80070e2:	4013      	ands	r3, r2
 80070e4:	d011      	beq.n	800710a <HAL_UART_IRQHandler+0xf6>
 80070e6:	239c      	movs	r3, #156	; 0x9c
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2201      	movs	r2, #1
 80070ee:	4013      	ands	r3, r2
 80070f0:	d00b      	beq.n	800710a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2202      	movs	r2, #2
 80070f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2280      	movs	r2, #128	; 0x80
 80070fe:	589b      	ldr	r3, [r3, r2]
 8007100:	2204      	movs	r2, #4
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800710a:	23a4      	movs	r3, #164	; 0xa4
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2204      	movs	r2, #4
 8007112:	4013      	ands	r3, r2
 8007114:	d011      	beq.n	800713a <HAL_UART_IRQHandler+0x126>
 8007116:	239c      	movs	r3, #156	; 0x9c
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	4013      	ands	r3, r2
 8007120:	d00b      	beq.n	800713a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2204      	movs	r2, #4
 8007128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2280      	movs	r2, #128	; 0x80
 800712e:	589b      	ldr	r3, [r3, r2]
 8007130:	2202      	movs	r2, #2
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2180      	movs	r1, #128	; 0x80
 8007138:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800713a:	23a4      	movs	r3, #164	; 0xa4
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2208      	movs	r2, #8
 8007142:	4013      	ands	r3, r2
 8007144:	d017      	beq.n	8007176 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007146:	23a0      	movs	r3, #160	; 0xa0
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2220      	movs	r2, #32
 800714e:	4013      	ands	r3, r2
 8007150:	d105      	bne.n	800715e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007152:	239c      	movs	r3, #156	; 0x9c
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2208      	movs	r2, #8
 8007164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	589b      	ldr	r3, [r3, r2]
 800716c:	2208      	movs	r2, #8
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007176:	23a4      	movs	r3, #164	; 0xa4
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	2380      	movs	r3, #128	; 0x80
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	4013      	ands	r3, r2
 8007182:	d013      	beq.n	80071ac <HAL_UART_IRQHandler+0x198>
 8007184:	23a0      	movs	r3, #160	; 0xa0
 8007186:	18fb      	adds	r3, r7, r3
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	04db      	lsls	r3, r3, #19
 800718e:	4013      	ands	r3, r2
 8007190:	d00c      	beq.n	80071ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2280      	movs	r2, #128	; 0x80
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	589b      	ldr	r3, [r3, r2]
 80071a2:	2220      	movs	r2, #32
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2180      	movs	r1, #128	; 0x80
 80071aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	589b      	ldr	r3, [r3, r2]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d100      	bne.n	80071b8 <HAL_UART_IRQHandler+0x1a4>
 80071b6:	e1df      	b.n	8007578 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071b8:	23a4      	movs	r3, #164	; 0xa4
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2220      	movs	r2, #32
 80071c0:	4013      	ands	r3, r2
 80071c2:	d00e      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071c4:	23a0      	movs	r3, #160	; 0xa0
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2220      	movs	r2, #32
 80071cc:	4013      	ands	r3, r2
 80071ce:	d008      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	0010      	movs	r0, r2
 80071e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2280      	movs	r2, #128	; 0x80
 80071e6:	589b      	ldr	r3, [r3, r2]
 80071e8:	2194      	movs	r1, #148	; 0x94
 80071ea:	187a      	adds	r2, r7, r1
 80071ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2240      	movs	r2, #64	; 0x40
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d004      	beq.n	8007206 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2228      	movs	r2, #40	; 0x28
 8007202:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007204:	d047      	beq.n	8007296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	0018      	movs	r0, r3
 800720a:	f000 fd0f 	bl	8007c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2240      	movs	r2, #64	; 0x40
 8007216:	4013      	ands	r3, r2
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d137      	bne.n	800728c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800721c:	f3ef 8310 	mrs	r3, PRIMASK
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007224:	2090      	movs	r0, #144	; 0x90
 8007226:	183a      	adds	r2, r7, r0
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	2301      	movs	r3, #1
 800722c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007230:	f383 8810 	msr	PRIMASK, r3
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2140      	movs	r1, #64	; 0x40
 8007242:	438a      	bics	r2, r1
 8007244:	609a      	str	r2, [r3, #8]
 8007246:	183b      	adds	r3, r7, r0
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800724e:	f383 8810 	msr	PRIMASK, r3
}
 8007252:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	2b00      	cmp	r3, #0
 800725a:	d012      	beq.n	8007282 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <HAL_UART_IRQHandler+0x2a0>)
 8007262:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	0018      	movs	r0, r3
 800726a:	f7fd fc63 	bl	8004b34 <HAL_DMA_Abort_IT>
 800726e:	1e03      	subs	r3, r0, #0
 8007270:	d01a      	beq.n	80072a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	0018      	movs	r0, r3
 800727e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	e012      	b.n	80072a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 f98d 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728a:	e00d      	b.n	80072a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	0018      	movs	r0, r3
 8007290:	f000 f988 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e008      	b.n	80072a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	0018      	movs	r0, r3
 800729a:	f000 f983 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2280      	movs	r2, #128	; 0x80
 80072a2:	2100      	movs	r1, #0
 80072a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80072a6:	e167      	b.n	8007578 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	46c0      	nop			; (mov r8, r8)
    return;
 80072aa:	e165      	b.n	8007578 <HAL_UART_IRQHandler+0x564>
 80072ac:	0000080f 	.word	0x0000080f
 80072b0:	04000120 	.word	0x04000120
 80072b4:	08007cf1 	.word	0x08007cf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d000      	beq.n	80072c2 <HAL_UART_IRQHandler+0x2ae>
 80072c0:	e131      	b.n	8007526 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072c2:	23a4      	movs	r3, #164	; 0xa4
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2210      	movs	r2, #16
 80072ca:	4013      	ands	r3, r2
 80072cc:	d100      	bne.n	80072d0 <HAL_UART_IRQHandler+0x2bc>
 80072ce:	e12a      	b.n	8007526 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072d0:	23a0      	movs	r3, #160	; 0xa0
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2210      	movs	r2, #16
 80072d8:	4013      	ands	r3, r2
 80072da:	d100      	bne.n	80072de <HAL_UART_IRQHandler+0x2ca>
 80072dc:	e123      	b.n	8007526 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2210      	movs	r2, #16
 80072e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2240      	movs	r2, #64	; 0x40
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d000      	beq.n	80072f6 <HAL_UART_IRQHandler+0x2e2>
 80072f4:	e09b      	b.n	800742e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	217e      	movs	r1, #126	; 0x7e
 8007300:	187b      	adds	r3, r7, r1
 8007302:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007304:	187b      	adds	r3, r7, r1
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d100      	bne.n	800730e <HAL_UART_IRQHandler+0x2fa>
 800730c:	e136      	b.n	800757c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2258      	movs	r2, #88	; 0x58
 8007312:	5a9b      	ldrh	r3, [r3, r2]
 8007314:	187a      	adds	r2, r7, r1
 8007316:	8812      	ldrh	r2, [r2, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d300      	bcc.n	800731e <HAL_UART_IRQHandler+0x30a>
 800731c:	e12e      	b.n	800757c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	187a      	adds	r2, r7, r1
 8007322:	215a      	movs	r1, #90	; 0x5a
 8007324:	8812      	ldrh	r2, [r2, #0]
 8007326:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b20      	cmp	r3, #32
 8007330:	d06e      	beq.n	8007410 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007332:	f3ef 8310 	mrs	r3, PRIMASK
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800733a:	67bb      	str	r3, [r7, #120]	; 0x78
 800733c:	2301      	movs	r3, #1
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	f383 8810 	msr	PRIMASK, r3
}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	498e      	ldr	r1, [pc, #568]	; (800758c <HAL_UART_IRQHandler+0x578>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	f383 8810 	msr	PRIMASK, r3
}
 8007362:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007364:	f3ef 8310 	mrs	r3, PRIMASK
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	677b      	str	r3, [r7, #116]	; 0x74
 800736e:	2301      	movs	r3, #1
 8007370:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	f383 8810 	msr	PRIMASK, r3
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	438a      	bics	r2, r1
 8007388:	609a      	str	r2, [r3, #8]
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007396:	f3ef 8310 	mrs	r3, PRIMASK
 800739a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800739c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	673b      	str	r3, [r7, #112]	; 0x70
 80073a0:	2301      	movs	r3, #1
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a6:	f383 8810 	msr	PRIMASK, r3
}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2140      	movs	r1, #64	; 0x40
 80073b8:	438a      	bics	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d4:	f3ef 8310 	mrs	r3, PRIMASK
 80073d8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80073da:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073de:	2301      	movs	r3, #1
 80073e0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073e4:	f383 8810 	msr	PRIMASK, r3
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2110      	movs	r1, #16
 80073f6:	438a      	bics	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007400:	f383 8810 	msr	PRIMASK, r3
}
 8007404:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	0018      	movs	r0, r3
 800740c:	f7fd fb5a 	bl	8004ac4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2258      	movs	r2, #88	; 0x58
 8007414:	5a9a      	ldrh	r2, [r3, r2]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	215a      	movs	r1, #90	; 0x5a
 800741a:	5a5b      	ldrh	r3, [r3, r1]
 800741c:	b29b      	uxth	r3, r3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0011      	movs	r1, r2
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f8c4 	bl	80075b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800742c:	e0a6      	b.n	800757c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2258      	movs	r2, #88	; 0x58
 8007432:	5a99      	ldrh	r1, [r3, r2]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	225a      	movs	r2, #90	; 0x5a
 8007438:	5a9b      	ldrh	r3, [r3, r2]
 800743a:	b29a      	uxth	r2, r3
 800743c:	208e      	movs	r0, #142	; 0x8e
 800743e:	183b      	adds	r3, r7, r0
 8007440:	1a8a      	subs	r2, r1, r2
 8007442:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	225a      	movs	r2, #90	; 0x5a
 8007448:	5a9b      	ldrh	r3, [r3, r2]
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d100      	bne.n	8007452 <HAL_UART_IRQHandler+0x43e>
 8007450:	e096      	b.n	8007580 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8007452:	183b      	adds	r3, r7, r0
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d100      	bne.n	800745c <HAL_UART_IRQHandler+0x448>
 800745a:	e091      	b.n	8007580 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745c:	f3ef 8310 	mrs	r3, PRIMASK
 8007460:	60fb      	str	r3, [r7, #12]
  return(result);
 8007462:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007464:	2488      	movs	r4, #136	; 0x88
 8007466:	193a      	adds	r2, r7, r4
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	2301      	movs	r3, #1
 800746c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f383 8810 	msr	PRIMASK, r3
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4943      	ldr	r1, [pc, #268]	; (8007590 <HAL_UART_IRQHandler+0x57c>)
 8007482:	400a      	ands	r2, r1
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	193b      	adds	r3, r7, r4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f383 8810 	msr	PRIMASK, r3
}
 8007492:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007494:	f3ef 8310 	mrs	r3, PRIMASK
 8007498:	61bb      	str	r3, [r7, #24]
  return(result);
 800749a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	2484      	movs	r4, #132	; 0x84
 800749e:	193a      	adds	r2, r7, r4
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	2301      	movs	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f383 8810 	msr	PRIMASK, r3
}
 80074ac:	46c0      	nop			; (mov r8, r8)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2101      	movs	r1, #1
 80074ba:	438a      	bics	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	193b      	adds	r3, r7, r4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	f383 8810 	msr	PRIMASK, r3
}
 80074ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074de:	f3ef 8310 	mrs	r3, PRIMASK
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e6:	2480      	movs	r4, #128	; 0x80
 80074e8:	193a      	adds	r2, r7, r4
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	2301      	movs	r3, #1
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2110      	movs	r1, #16
 8007504:	438a      	bics	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	193b      	adds	r3, r7, r4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007516:	183b      	adds	r3, r7, r0
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0011      	movs	r1, r2
 800751e:	0018      	movs	r0, r3
 8007520:	f000 f848 	bl	80075b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007524:	e02c      	b.n	8007580 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007526:	23a4      	movs	r3, #164	; 0xa4
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2280      	movs	r2, #128	; 0x80
 800752e:	4013      	ands	r3, r2
 8007530:	d00f      	beq.n	8007552 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007532:	23a0      	movs	r3, #160	; 0xa0
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	4013      	ands	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01e      	beq.n	8007584 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	0010      	movs	r0, r2
 800754e:	4798      	blx	r3
    }
    return;
 8007550:	e018      	b.n	8007584 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007552:	23a4      	movs	r3, #164	; 0xa4
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2240      	movs	r2, #64	; 0x40
 800755a:	4013      	ands	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_UART_IRQHandler+0x572>
 800755e:	23a0      	movs	r3, #160	; 0xa0
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2240      	movs	r2, #64	; 0x40
 8007566:	4013      	ands	r3, r2
 8007568:	d00d      	beq.n	8007586 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	0018      	movs	r0, r3
 800756e:	f000 fbd6 	bl	8007d1e <UART_EndTransmit_IT>
    return;
 8007572:	e008      	b.n	8007586 <HAL_UART_IRQHandler+0x572>
      return;
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	e006      	b.n	8007586 <HAL_UART_IRQHandler+0x572>
    return;
 8007578:	46c0      	nop			; (mov r8, r8)
 800757a:	e004      	b.n	8007586 <HAL_UART_IRQHandler+0x572>
      return;
 800757c:	46c0      	nop			; (mov r8, r8)
 800757e:	e002      	b.n	8007586 <HAL_UART_IRQHandler+0x572>
      return;
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	e000      	b.n	8007586 <HAL_UART_IRQHandler+0x572>
    return;
 8007584:	46c0      	nop			; (mov r8, r8)
  }

}
 8007586:	46bd      	mov	sp, r7
 8007588:	b02b      	add	sp, #172	; 0xac
 800758a:	bd90      	pop	{r4, r7, pc}
 800758c:	fffffeff 	.word	0xfffffeff
 8007590:	fffffedf 	.word	0xfffffedf

08007594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800759c:	46c0      	nop			; (mov r8, r8)
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075ac:	46c0      	nop			; (mov r8, r8)
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b002      	add	sp, #8
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	000a      	movs	r2, r1
 80075be:	1cbb      	adds	r3, r7, #2
 80075c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b002      	add	sp, #8
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075d4:	231e      	movs	r3, #30
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4aa1      	ldr	r2, [pc, #644]	; (8007880 <UART_SetConfig+0x2b4>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	0019      	movs	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	430a      	orrs	r2, r1
 8007608:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4a9c      	ldr	r2, [pc, #624]	; (8007884 <UART_SetConfig+0x2b8>)
 8007612:	4013      	ands	r3, r2
 8007614:	0019      	movs	r1, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4a93      	ldr	r2, [pc, #588]	; (8007888 <UART_SetConfig+0x2bc>)
 800763a:	4013      	ands	r3, r2
 800763c:	0019      	movs	r1, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	430a      	orrs	r2, r1
 8007646:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a8f      	ldr	r2, [pc, #572]	; (800788c <UART_SetConfig+0x2c0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d127      	bne.n	80076a2 <UART_SetConfig+0xd6>
 8007652:	4b8f      	ldr	r3, [pc, #572]	; (8007890 <UART_SetConfig+0x2c4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	2203      	movs	r2, #3
 8007658:	4013      	ands	r3, r2
 800765a:	2b03      	cmp	r3, #3
 800765c:	d00d      	beq.n	800767a <UART_SetConfig+0xae>
 800765e:	d81b      	bhi.n	8007698 <UART_SetConfig+0xcc>
 8007660:	2b02      	cmp	r3, #2
 8007662:	d014      	beq.n	800768e <UART_SetConfig+0xc2>
 8007664:	d818      	bhi.n	8007698 <UART_SetConfig+0xcc>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <UART_SetConfig+0xa4>
 800766a:	2b01      	cmp	r3, #1
 800766c:	d00a      	beq.n	8007684 <UART_SetConfig+0xb8>
 800766e:	e013      	b.n	8007698 <UART_SetConfig+0xcc>
 8007670:	231f      	movs	r3, #31
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e049      	b.n	800770e <UART_SetConfig+0x142>
 800767a:	231f      	movs	r3, #31
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	2202      	movs	r2, #2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e044      	b.n	800770e <UART_SetConfig+0x142>
 8007684:	231f      	movs	r3, #31
 8007686:	18fb      	adds	r3, r7, r3
 8007688:	2204      	movs	r2, #4
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e03f      	b.n	800770e <UART_SetConfig+0x142>
 800768e:	231f      	movs	r3, #31
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	2208      	movs	r2, #8
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e03a      	b.n	800770e <UART_SetConfig+0x142>
 8007698:	231f      	movs	r3, #31
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	2210      	movs	r2, #16
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e035      	b.n	800770e <UART_SetConfig+0x142>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7b      	ldr	r2, [pc, #492]	; (8007894 <UART_SetConfig+0x2c8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d104      	bne.n	80076b6 <UART_SetConfig+0xea>
 80076ac:	231f      	movs	r3, #31
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e02b      	b.n	800770e <UART_SetConfig+0x142>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a77      	ldr	r2, [pc, #476]	; (8007898 <UART_SetConfig+0x2cc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d104      	bne.n	80076ca <UART_SetConfig+0xfe>
 80076c0:	231f      	movs	r3, #31
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e021      	b.n	800770e <UART_SetConfig+0x142>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a73      	ldr	r2, [pc, #460]	; (800789c <UART_SetConfig+0x2d0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d104      	bne.n	80076de <UART_SetConfig+0x112>
 80076d4:	231f      	movs	r3, #31
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	e017      	b.n	800770e <UART_SetConfig+0x142>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a6f      	ldr	r2, [pc, #444]	; (80078a0 <UART_SetConfig+0x2d4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d104      	bne.n	80076f2 <UART_SetConfig+0x126>
 80076e8:	231f      	movs	r3, #31
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e00d      	b.n	800770e <UART_SetConfig+0x142>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a6b      	ldr	r2, [pc, #428]	; (80078a4 <UART_SetConfig+0x2d8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d104      	bne.n	8007706 <UART_SetConfig+0x13a>
 80076fc:	231f      	movs	r3, #31
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e003      	b.n	800770e <UART_SetConfig+0x142>
 8007706:	231f      	movs	r3, #31
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	2210      	movs	r2, #16
 800770c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69da      	ldr	r2, [r3, #28]
 8007712:	2380      	movs	r3, #128	; 0x80
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	429a      	cmp	r2, r3
 8007718:	d15d      	bne.n	80077d6 <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 800771a:	231f      	movs	r3, #31
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d015      	beq.n	8007750 <UART_SetConfig+0x184>
 8007724:	dc18      	bgt.n	8007758 <UART_SetConfig+0x18c>
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00d      	beq.n	8007746 <UART_SetConfig+0x17a>
 800772a:	dc15      	bgt.n	8007758 <UART_SetConfig+0x18c>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <UART_SetConfig+0x16a>
 8007730:	2b02      	cmp	r3, #2
 8007732:	d005      	beq.n	8007740 <UART_SetConfig+0x174>
 8007734:	e010      	b.n	8007758 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007736:	f7ff f865 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 800773a:	0003      	movs	r3, r0
 800773c:	61bb      	str	r3, [r7, #24]
        break;
 800773e:	e012      	b.n	8007766 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007740:	4b59      	ldr	r3, [pc, #356]	; (80078a8 <UART_SetConfig+0x2dc>)
 8007742:	61bb      	str	r3, [r7, #24]
        break;
 8007744:	e00f      	b.n	8007766 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007746:	f7fe fff1 	bl	800672c <HAL_RCC_GetSysClockFreq>
 800774a:	0003      	movs	r3, r0
 800774c:	61bb      	str	r3, [r7, #24]
        break;
 800774e:	e00a      	b.n	8007766 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	61bb      	str	r3, [r7, #24]
        break;
 8007756:	e006      	b.n	8007766 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800775c:	231e      	movs	r3, #30
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	2201      	movs	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
        break;
 8007764:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d100      	bne.n	800776e <UART_SetConfig+0x1a2>
 800776c:	e07b      	b.n	8007866 <UART_SetConfig+0x29a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	005a      	lsls	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	18d2      	adds	r2, r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	0019      	movs	r1, r3
 8007780:	0010      	movs	r0, r2
 8007782:	f7f8 fcdb 	bl	800013c <__udivsi3>
 8007786:	0003      	movs	r3, r0
 8007788:	b29b      	uxth	r3, r3
 800778a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d91c      	bls.n	80077cc <UART_SetConfig+0x200>
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	2380      	movs	r3, #128	; 0x80
 8007796:	025b      	lsls	r3, r3, #9
 8007798:	429a      	cmp	r2, r3
 800779a:	d217      	bcs.n	80077cc <UART_SetConfig+0x200>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	200e      	movs	r0, #14
 80077a2:	183b      	adds	r3, r7, r0
 80077a4:	210f      	movs	r1, #15
 80077a6:	438a      	bics	r2, r1
 80077a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2207      	movs	r2, #7
 80077b2:	4013      	ands	r3, r2
 80077b4:	b299      	uxth	r1, r3
 80077b6:	183b      	adds	r3, r7, r0
 80077b8:	183a      	adds	r2, r7, r0
 80077ba:	8812      	ldrh	r2, [r2, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	183a      	adds	r2, r7, r0
 80077c6:	8812      	ldrh	r2, [r2, #0]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	e04c      	b.n	8007866 <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 80077cc:	231e      	movs	r3, #30
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e047      	b.n	8007866 <UART_SetConfig+0x29a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077d6:	231f      	movs	r3, #31
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d015      	beq.n	800780c <UART_SetConfig+0x240>
 80077e0:	dc18      	bgt.n	8007814 <UART_SetConfig+0x248>
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d00d      	beq.n	8007802 <UART_SetConfig+0x236>
 80077e6:	dc15      	bgt.n	8007814 <UART_SetConfig+0x248>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <UART_SetConfig+0x226>
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d005      	beq.n	80077fc <UART_SetConfig+0x230>
 80077f0:	e010      	b.n	8007814 <UART_SetConfig+0x248>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f2:	f7ff f807 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 80077f6:	0003      	movs	r3, r0
 80077f8:	61bb      	str	r3, [r7, #24]
        break;
 80077fa:	e012      	b.n	8007822 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <UART_SetConfig+0x2dc>)
 80077fe:	61bb      	str	r3, [r7, #24]
        break;
 8007800:	e00f      	b.n	8007822 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007802:	f7fe ff93 	bl	800672c <HAL_RCC_GetSysClockFreq>
 8007806:	0003      	movs	r3, r0
 8007808:	61bb      	str	r3, [r7, #24]
        break;
 800780a:	e00a      	b.n	8007822 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	61bb      	str	r3, [r7, #24]
        break;
 8007812:	e006      	b.n	8007822 <UART_SetConfig+0x256>
      default:
        pclk = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007818:	231e      	movs	r3, #30
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
        break;
 8007820:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01e      	beq.n	8007866 <UART_SetConfig+0x29a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	085a      	lsrs	r2, r3, #1
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	18d2      	adds	r2, r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	0019      	movs	r1, r3
 8007838:	0010      	movs	r0, r2
 800783a:	f7f8 fc7f 	bl	800013c <__udivsi3>
 800783e:	0003      	movs	r3, r0
 8007840:	b29b      	uxth	r3, r3
 8007842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b0f      	cmp	r3, #15
 8007848:	d909      	bls.n	800785e <UART_SetConfig+0x292>
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	025b      	lsls	r3, r3, #9
 8007850:	429a      	cmp	r2, r3
 8007852:	d204      	bcs.n	800785e <UART_SetConfig+0x292>
      {
        huart->Instance->BRR = usartdiv;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	60da      	str	r2, [r3, #12]
 800785c:	e003      	b.n	8007866 <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 800785e:	231e      	movs	r3, #30
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	2201      	movs	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007872:	231e      	movs	r3, #30
 8007874:	18fb      	adds	r3, r7, r3
 8007876:	781b      	ldrb	r3, [r3, #0]
}
 8007878:	0018      	movs	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	b008      	add	sp, #32
 800787e:	bd80      	pop	{r7, pc}
 8007880:	efff69f3 	.word	0xefff69f3
 8007884:	ffffcfff 	.word	0xffffcfff
 8007888:	fffff4ff 	.word	0xfffff4ff
 800788c:	40013800 	.word	0x40013800
 8007890:	40021000 	.word	0x40021000
 8007894:	40004400 	.word	0x40004400
 8007898:	40004800 	.word	0x40004800
 800789c:	40004c00 	.word	0x40004c00
 80078a0:	40005000 	.word	0x40005000
 80078a4:	40011400 	.word	0x40011400
 80078a8:	007a1200 	.word	0x007a1200

080078ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2201      	movs	r2, #1
 80078ba:	4013      	ands	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a4a      	ldr	r2, [pc, #296]	; (80079f0 <UART_AdvFeatureConfig+0x144>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	0019      	movs	r1, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	2202      	movs	r2, #2
 80078dc:	4013      	ands	r3, r2
 80078de:	d00b      	beq.n	80078f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4a43      	ldr	r2, [pc, #268]	; (80079f4 <UART_AdvFeatureConfig+0x148>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	0019      	movs	r1, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2204      	movs	r2, #4
 80078fe:	4013      	ands	r3, r2
 8007900:	d00b      	beq.n	800791a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4a3b      	ldr	r2, [pc, #236]	; (80079f8 <UART_AdvFeatureConfig+0x14c>)
 800790a:	4013      	ands	r3, r2
 800790c:	0019      	movs	r1, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2208      	movs	r2, #8
 8007920:	4013      	ands	r3, r2
 8007922:	d00b      	beq.n	800793c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4a34      	ldr	r2, [pc, #208]	; (80079fc <UART_AdvFeatureConfig+0x150>)
 800792c:	4013      	ands	r3, r2
 800792e:	0019      	movs	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2210      	movs	r2, #16
 8007942:	4013      	ands	r3, r2
 8007944:	d00b      	beq.n	800795e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <UART_AdvFeatureConfig+0x154>)
 800794e:	4013      	ands	r3, r2
 8007950:	0019      	movs	r1, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	2220      	movs	r2, #32
 8007964:	4013      	ands	r3, r2
 8007966:	d00b      	beq.n	8007980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <UART_AdvFeatureConfig+0x158>)
 8007970:	4013      	ands	r3, r2
 8007972:	0019      	movs	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2240      	movs	r2, #64	; 0x40
 8007986:	4013      	ands	r3, r2
 8007988:	d01d      	beq.n	80079c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <UART_AdvFeatureConfig+0x15c>)
 8007992:	4013      	ands	r3, r2
 8007994:	0019      	movs	r1, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a6:	2380      	movs	r3, #128	; 0x80
 80079a8:	035b      	lsls	r3, r3, #13
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d10b      	bne.n	80079c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <UART_AdvFeatureConfig+0x160>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	0019      	movs	r1, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	4013      	ands	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4a0e      	ldr	r2, [pc, #56]	; (8007a10 <UART_AdvFeatureConfig+0x164>)
 80079d8:	4013      	ands	r3, r2
 80079da:	0019      	movs	r1, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }
}
 80079e8:	46c0      	nop			; (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b002      	add	sp, #8
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	fffdffff 	.word	0xfffdffff
 80079f4:	fffeffff 	.word	0xfffeffff
 80079f8:	fffbffff 	.word	0xfffbffff
 80079fc:	ffff7fff 	.word	0xffff7fff
 8007a00:	ffffefff 	.word	0xffffefff
 8007a04:	ffffdfff 	.word	0xffffdfff
 8007a08:	ffefffff 	.word	0xffefffff
 8007a0c:	ff9fffff 	.word	0xff9fffff
 8007a10:	fff7ffff 	.word	0xfff7ffff

08007a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2280      	movs	r2, #128	; 0x80
 8007a20:	2100      	movs	r1, #0
 8007a22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a24:	f7fc fc3c 	bl	80042a0 <HAL_GetTick>
 8007a28:	0003      	movs	r3, r0
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2208      	movs	r2, #8
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d10c      	bne.n	8007a54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2280      	movs	r2, #128	; 0x80
 8007a3e:	0391      	lsls	r1, r2, #14
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4a17      	ldr	r2, [pc, #92]	; (8007aa0 <UART_CheckIdleState+0x8c>)
 8007a44:	9200      	str	r2, [sp, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f000 f82c 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8007a4c:	1e03      	subs	r3, r0, #0
 8007a4e:	d001      	beq.n	8007a54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e021      	b.n	8007a98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d10c      	bne.n	8007a7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2280      	movs	r2, #128	; 0x80
 8007a66:	03d1      	lsls	r1, r2, #15
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4a0d      	ldr	r2, [pc, #52]	; (8007aa0 <UART_CheckIdleState+0x8c>)
 8007a6c:	9200      	str	r2, [sp, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f000 f818 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8007a74:	1e03      	subs	r3, r0, #0
 8007a76:	d001      	beq.n	8007a7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e00d      	b.n	8007a98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2274      	movs	r2, #116	; 0x74
 8007a92:	2100      	movs	r1, #0
 8007a94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b004      	add	sp, #16
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	01ffffff 	.word	0x01ffffff

08007aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b094      	sub	sp, #80	; 0x50
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	1dfb      	adds	r3, r7, #7
 8007ab2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab4:	e0a3      	b.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ab8:	3301      	adds	r3, #1
 8007aba:	d100      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0x1a>
 8007abc:	e09f      	b.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007abe:	f7fc fbef 	bl	80042a0 <HAL_GetTick>
 8007ac2:	0002      	movs	r2, r0
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d13d      	bne.n	8007b50 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ade:	2301      	movs	r3, #1
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	f383 8810 	msr	PRIMASK, r3
}
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	494c      	ldr	r1, [pc, #304]	; (8007c28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007af6:	400a      	ands	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f383 8810 	msr	PRIMASK, r3
}
 8007b04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b06:	f3ef 8310 	mrs	r3, PRIMASK
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b10:	2301      	movs	r3, #1
 8007b12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	f383 8810 	msr	PRIMASK, r3
}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2101      	movs	r1, #1
 8007b28:	438a      	bics	r2, r1
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b32:	f383 8810 	msr	PRIMASK, r3
}
 8007b36:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2274      	movs	r2, #116	; 0x74
 8007b48:	2100      	movs	r1, #0
 8007b4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e067      	b.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2204      	movs	r2, #4
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d050      	beq.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69da      	ldr	r2, [r3, #28]
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	401a      	ands	r2, r3
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d146      	bne.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	0112      	lsls	r2, r2, #4
 8007b78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7e:	613b      	str	r3, [r7, #16]
  return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b84:	2301      	movs	r3, #1
 8007b86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f383 8810 	msr	PRIMASK, r3
}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4923      	ldr	r1, [pc, #140]	; (8007c28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007b9c:	400a      	ands	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f383 8810 	msr	PRIMASK, r3
}
 8007baa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2101      	movs	r1, #1
 8007bce:	438a      	bics	r2, r1
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	f383 8810 	msr	PRIMASK, r3
}
 8007bdc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2280      	movs	r2, #128	; 0x80
 8007bee:	2120      	movs	r1, #32
 8007bf0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2274      	movs	r2, #116	; 0x74
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e010      	b.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	4013      	ands	r3, r2
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	425a      	negs	r2, r3
 8007c0e:	4153      	adcs	r3, r2
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	001a      	movs	r2, r3
 8007c14:	1dfb      	adds	r3, r7, #7
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d100      	bne.n	8007c1e <UART_WaitOnFlagUntilTimeout+0x17a>
 8007c1c:	e74b      	b.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b014      	add	sp, #80	; 0x50
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	fffffe5f 	.word	0xfffffe5f

08007c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08e      	sub	sp, #56	; 0x38
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c34:	f3ef 8310 	mrs	r3, PRIMASK
 8007c38:	617b      	str	r3, [r7, #20]
  return(result);
 8007c3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f383 8810 	msr	PRIMASK, r3
}
 8007c48:	46c0      	nop			; (mov r8, r8)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4925      	ldr	r1, [pc, #148]	; (8007cec <UART_EndRxTransfer+0xc0>)
 8007c56:	400a      	ands	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f383 8810 	msr	PRIMASK, r3
}
 8007c64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c66:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c70:	2301      	movs	r3, #1
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	f383 8810 	msr	PRIMASK, r3
}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2101      	movs	r1, #1
 8007c88:	438a      	bics	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f383 8810 	msr	PRIMASK, r3
}
 8007c96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d118      	bne.n	8007cd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007caa:	2301      	movs	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f383 8810 	msr	PRIMASK, r3
}
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2110      	movs	r1, #16
 8007cc2:	438a      	bics	r2, r1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f383 8810 	msr	PRIMASK, r3
}
 8007cd0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b00e      	add	sp, #56	; 0x38
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	fffffedf 	.word	0xfffffedf

08007cf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	225a      	movs	r2, #90	; 0x5a
 8007d02:	2100      	movs	r1, #0
 8007d04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2252      	movs	r2, #82	; 0x52
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7ff fc47 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b004      	add	sp, #16
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d26:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	2301      	movs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f383 8810 	msr	PRIMASK, r3
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2140      	movs	r1, #64	; 0x40
 8007d48:	438a      	bics	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f383 8810 	msr	PRIMASK, r3
}
 8007d56:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	0018      	movs	r0, r3
 8007d68:	f7ff fc14 	bl	8007594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d6c:	46c0      	nop			; (mov r8, r8)
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b006      	add	sp, #24
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <__errno>:
 8007d74:	4b01      	ldr	r3, [pc, #4]	; (8007d7c <__errno+0x8>)
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	4770      	bx	lr
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	20000014 	.word	0x20000014

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	2600      	movs	r6, #0
 8007d84:	4d0c      	ldr	r5, [pc, #48]	; (8007db8 <__libc_init_array+0x38>)
 8007d86:	4c0d      	ldr	r4, [pc, #52]	; (8007dbc <__libc_init_array+0x3c>)
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	2600      	movs	r6, #0
 8007d92:	f002 ff6d 	bl	800ac70 <_init>
 8007d96:	4d0a      	ldr	r5, [pc, #40]	; (8007dc0 <__libc_init_array+0x40>)
 8007d98:	4c0a      	ldr	r4, [pc, #40]	; (8007dc4 <__libc_init_array+0x44>)
 8007d9a:	1b64      	subs	r4, r4, r5
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	42a6      	cmp	r6, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	00b3      	lsls	r3, r6, #2
 8007da6:	58eb      	ldr	r3, [r5, r3]
 8007da8:	4798      	blx	r3
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	00b3      	lsls	r3, r6, #2
 8007db0:	58eb      	ldr	r3, [r5, r3]
 8007db2:	4798      	blx	r3
 8007db4:	3601      	adds	r6, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	0800b92c 	.word	0x0800b92c
 8007dbc:	0800b92c 	.word	0x0800b92c
 8007dc0:	0800b92c 	.word	0x0800b92c
 8007dc4:	0800b930 	.word	0x0800b930

08007dc8 <memset>:
 8007dc8:	0003      	movs	r3, r0
 8007dca:	1882      	adds	r2, r0, r2
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	7019      	strb	r1, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <__cvt>:
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	001e      	movs	r6, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	0014      	movs	r4, r2
 8007de0:	b08b      	sub	sp, #44	; 0x2c
 8007de2:	429e      	cmp	r6, r3
 8007de4:	da04      	bge.n	8007df0 <__cvt+0x18>
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	0609      	lsls	r1, r1, #24
 8007dea:	1873      	adds	r3, r6, r1
 8007dec:	001e      	movs	r6, r3
 8007dee:	232d      	movs	r3, #45	; 0x2d
 8007df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007df2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007df4:	7013      	strb	r3, [r2, #0]
 8007df6:	2320      	movs	r3, #32
 8007df8:	2203      	movs	r2, #3
 8007dfa:	439f      	bics	r7, r3
 8007dfc:	2f46      	cmp	r7, #70	; 0x46
 8007dfe:	d007      	beq.n	8007e10 <__cvt+0x38>
 8007e00:	003b      	movs	r3, r7
 8007e02:	3b45      	subs	r3, #69	; 0x45
 8007e04:	4259      	negs	r1, r3
 8007e06:	414b      	adcs	r3, r1
 8007e08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e0a:	3a01      	subs	r2, #1
 8007e0c:	18cb      	adds	r3, r1, r3
 8007e0e:	9310      	str	r3, [sp, #64]	; 0x40
 8007e10:	ab09      	add	r3, sp, #36	; 0x24
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	ab08      	add	r3, sp, #32
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e1a:	9200      	str	r2, [sp, #0]
 8007e1c:	9302      	str	r3, [sp, #8]
 8007e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e20:	0022      	movs	r2, r4
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	0033      	movs	r3, r6
 8007e26:	f000 fcfd 	bl	8008824 <_dtoa_r>
 8007e2a:	0005      	movs	r5, r0
 8007e2c:	2f47      	cmp	r7, #71	; 0x47
 8007e2e:	d102      	bne.n	8007e36 <__cvt+0x5e>
 8007e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e32:	07db      	lsls	r3, r3, #31
 8007e34:	d528      	bpl.n	8007e88 <__cvt+0xb0>
 8007e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e38:	18eb      	adds	r3, r5, r3
 8007e3a:	9307      	str	r3, [sp, #28]
 8007e3c:	2f46      	cmp	r7, #70	; 0x46
 8007e3e:	d114      	bne.n	8007e6a <__cvt+0x92>
 8007e40:	782b      	ldrb	r3, [r5, #0]
 8007e42:	2b30      	cmp	r3, #48	; 0x30
 8007e44:	d10c      	bne.n	8007e60 <__cvt+0x88>
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	0020      	movs	r0, r4
 8007e4c:	0031      	movs	r1, r6
 8007e4e:	f7f8 fafb 	bl	8000448 <__aeabi_dcmpeq>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d104      	bne.n	8007e60 <__cvt+0x88>
 8007e56:	2301      	movs	r3, #1
 8007e58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	18d3      	adds	r3, r2, r3
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	0020      	movs	r0, r4
 8007e70:	0031      	movs	r1, r6
 8007e72:	f7f8 fae9 	bl	8000448 <__aeabi_dcmpeq>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d001      	beq.n	8007e7e <__cvt+0xa6>
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7e:	2230      	movs	r2, #48	; 0x30
 8007e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e82:	9907      	ldr	r1, [sp, #28]
 8007e84:	428b      	cmp	r3, r1
 8007e86:	d306      	bcc.n	8007e96 <__cvt+0xbe>
 8007e88:	0028      	movs	r0, r5
 8007e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e8e:	1b5b      	subs	r3, r3, r5
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	b00b      	add	sp, #44	; 0x2c
 8007e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	9109      	str	r1, [sp, #36]	; 0x24
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e7f0      	b.n	8007e80 <__cvt+0xa8>

08007e9e <__exponent>:
 8007e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea0:	1c83      	adds	r3, r0, #2
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	9303      	str	r3, [sp, #12]
 8007ea6:	0005      	movs	r5, r0
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	232b      	movs	r3, #43	; 0x2b
 8007eac:	7002      	strb	r2, [r0, #0]
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	da01      	bge.n	8007eb6 <__exponent+0x18>
 8007eb2:	424c      	negs	r4, r1
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	706b      	strb	r3, [r5, #1]
 8007eb8:	2c09      	cmp	r4, #9
 8007eba:	dd31      	ble.n	8007f20 <__exponent+0x82>
 8007ebc:	270a      	movs	r7, #10
 8007ebe:	ab04      	add	r3, sp, #16
 8007ec0:	1dde      	adds	r6, r3, #7
 8007ec2:	0020      	movs	r0, r4
 8007ec4:	0039      	movs	r1, r7
 8007ec6:	9601      	str	r6, [sp, #4]
 8007ec8:	f7f8 faa8 	bl	800041c <__aeabi_idivmod>
 8007ecc:	3e01      	subs	r6, #1
 8007ece:	3130      	adds	r1, #48	; 0x30
 8007ed0:	0020      	movs	r0, r4
 8007ed2:	7031      	strb	r1, [r6, #0]
 8007ed4:	0039      	movs	r1, r7
 8007ed6:	9402      	str	r4, [sp, #8]
 8007ed8:	f7f8 f9ba 	bl	8000250 <__divsi3>
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	0004      	movs	r4, r0
 8007ee0:	2b63      	cmp	r3, #99	; 0x63
 8007ee2:	dcee      	bgt.n	8007ec2 <__exponent+0x24>
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	3430      	adds	r4, #48	; 0x30
 8007ee8:	1e9a      	subs	r2, r3, #2
 8007eea:	0013      	movs	r3, r2
 8007eec:	9903      	ldr	r1, [sp, #12]
 8007eee:	7014      	strb	r4, [r2, #0]
 8007ef0:	a804      	add	r0, sp, #16
 8007ef2:	3007      	adds	r0, #7
 8007ef4:	4298      	cmp	r0, r3
 8007ef6:	d80e      	bhi.n	8007f16 <__exponent+0x78>
 8007ef8:	ab04      	add	r3, sp, #16
 8007efa:	3307      	adds	r3, #7
 8007efc:	2000      	movs	r0, #0
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d804      	bhi.n	8007f0c <__exponent+0x6e>
 8007f02:	ab04      	add	r3, sp, #16
 8007f04:	3009      	adds	r0, #9
 8007f06:	18c0      	adds	r0, r0, r3
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	1ac0      	subs	r0, r0, r3
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	1818      	adds	r0, r3, r0
 8007f10:	1b40      	subs	r0, r0, r5
 8007f12:	b007      	add	sp, #28
 8007f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f16:	7818      	ldrb	r0, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	7008      	strb	r0, [r1, #0]
 8007f1c:	3101      	adds	r1, #1
 8007f1e:	e7e7      	b.n	8007ef0 <__exponent+0x52>
 8007f20:	2330      	movs	r3, #48	; 0x30
 8007f22:	18e4      	adds	r4, r4, r3
 8007f24:	70ab      	strb	r3, [r5, #2]
 8007f26:	1d28      	adds	r0, r5, #4
 8007f28:	70ec      	strb	r4, [r5, #3]
 8007f2a:	e7f1      	b.n	8007f10 <__exponent+0x72>

08007f2c <_printf_float>:
 8007f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2e:	b095      	sub	sp, #84	; 0x54
 8007f30:	000c      	movs	r4, r1
 8007f32:	9208      	str	r2, [sp, #32]
 8007f34:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	0007      	movs	r7, r0
 8007f3a:	f001 fa91 	bl	8009460 <_localeconv_r>
 8007f3e:	6803      	ldr	r3, [r0, #0]
 8007f40:	0018      	movs	r0, r3
 8007f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f44:	f7f8 f8de 	bl	8000104 <strlen>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f4c:	7e23      	ldrb	r3, [r4, #24]
 8007f4e:	2207      	movs	r2, #7
 8007f50:	001e      	movs	r6, r3
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	900d      	str	r0, [sp, #52]	; 0x34
 8007f56:	930c      	str	r3, [sp, #48]	; 0x30
 8007f58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	05c9      	lsls	r1, r1, #23
 8007f5e:	d547      	bpl.n	8007ff0 <_printf_float+0xc4>
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	4393      	bics	r3, r2
 8007f64:	001a      	movs	r2, r3
 8007f66:	3208      	adds	r2, #8
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	64a2      	str	r2, [r4, #72]	; 0x48
 8007f70:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007f72:	2201      	movs	r2, #1
 8007f74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f76:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007f78:	930a      	str	r3, [sp, #40]	; 0x28
 8007f7a:	006b      	lsls	r3, r5, #1
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f82:	4ba8      	ldr	r3, [pc, #672]	; (8008224 <_printf_float+0x2f8>)
 8007f84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007f86:	4252      	negs	r2, r2
 8007f88:	f7fa fb24 	bl	80025d4 <__aeabi_dcmpun>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d131      	bne.n	8007ff4 <_printf_float+0xc8>
 8007f90:	2201      	movs	r2, #1
 8007f92:	4ba4      	ldr	r3, [pc, #656]	; (8008224 <_printf_float+0x2f8>)
 8007f94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007f98:	4252      	negs	r2, r2
 8007f9a:	f7f8 fa65 	bl	8000468 <__aeabi_dcmple>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d128      	bne.n	8007ff4 <_printf_float+0xc8>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	0029      	movs	r1, r5
 8007fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007faa:	f7f8 fa53 	bl	8000454 <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d003      	beq.n	8007fba <_printf_float+0x8e>
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	222d      	movs	r2, #45	; 0x2d
 8007fb6:	3343      	adds	r3, #67	; 0x43
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	4d9b      	ldr	r5, [pc, #620]	; (8008228 <_printf_float+0x2fc>)
 8007fbc:	2e47      	cmp	r6, #71	; 0x47
 8007fbe:	d900      	bls.n	8007fc2 <_printf_float+0x96>
 8007fc0:	4d9a      	ldr	r5, [pc, #616]	; (800822c <_printf_float+0x300>)
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	439a      	bics	r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6022      	str	r2, [r4, #0]
 8007fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd4:	0021      	movs	r1, r4
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	0038      	movs	r0, r7
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	aa13      	add	r2, sp, #76	; 0x4c
 8007fde:	f000 f9f3 	bl	80083c8 <_printf_common>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d000      	beq.n	8007fe8 <_printf_float+0xbc>
 8007fe6:	e09e      	b.n	8008126 <_printf_float+0x1fa>
 8007fe8:	2001      	movs	r0, #1
 8007fea:	4240      	negs	r0, r0
 8007fec:	b015      	add	sp, #84	; 0x54
 8007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	e7b6      	b.n	8007f62 <_printf_float+0x36>
 8007ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff6:	002b      	movs	r3, r5
 8007ff8:	0010      	movs	r0, r2
 8007ffa:	0029      	movs	r1, r5
 8007ffc:	f7fa faea 	bl	80025d4 <__aeabi_dcmpun>
 8008000:	2800      	cmp	r0, #0
 8008002:	d00a      	beq.n	800801a <_printf_float+0xee>
 8008004:	2d00      	cmp	r5, #0
 8008006:	da03      	bge.n	8008010 <_printf_float+0xe4>
 8008008:	0023      	movs	r3, r4
 800800a:	222d      	movs	r2, #45	; 0x2d
 800800c:	3343      	adds	r3, #67	; 0x43
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	4d87      	ldr	r5, [pc, #540]	; (8008230 <_printf_float+0x304>)
 8008012:	2e47      	cmp	r6, #71	; 0x47
 8008014:	d9d5      	bls.n	8007fc2 <_printf_float+0x96>
 8008016:	4d87      	ldr	r5, [pc, #540]	; (8008234 <_printf_float+0x308>)
 8008018:	e7d3      	b.n	8007fc2 <_printf_float+0x96>
 800801a:	2220      	movs	r2, #32
 800801c:	0031      	movs	r1, r6
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	4391      	bics	r1, r2
 8008022:	910e      	str	r1, [sp, #56]	; 0x38
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	d147      	bne.n	80080b8 <_printf_float+0x18c>
 8008028:	3307      	adds	r3, #7
 800802a:	6063      	str	r3, [r4, #4]
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4313      	orrs	r3, r2
 8008034:	2200      	movs	r2, #0
 8008036:	9206      	str	r2, [sp, #24]
 8008038:	aa12      	add	r2, sp, #72	; 0x48
 800803a:	9205      	str	r2, [sp, #20]
 800803c:	aa11      	add	r2, sp, #68	; 0x44
 800803e:	9203      	str	r2, [sp, #12]
 8008040:	2223      	movs	r2, #35	; 0x23
 8008042:	a908      	add	r1, sp, #32
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	1852      	adds	r2, r2, r1
 800804c:	9202      	str	r2, [sp, #8]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	0038      	movs	r0, r7
 8008052:	002b      	movs	r3, r5
 8008054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008056:	9604      	str	r6, [sp, #16]
 8008058:	f7ff febe 	bl	8007dd8 <__cvt>
 800805c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805e:	0005      	movs	r5, r0
 8008060:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008062:	2b47      	cmp	r3, #71	; 0x47
 8008064:	d108      	bne.n	8008078 <_printf_float+0x14c>
 8008066:	1ccb      	adds	r3, r1, #3
 8008068:	db02      	blt.n	8008070 <_printf_float+0x144>
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	4299      	cmp	r1, r3
 800806e:	dd46      	ble.n	80080fe <_printf_float+0x1d2>
 8008070:	0033      	movs	r3, r6
 8008072:	3b02      	subs	r3, #2
 8008074:	b2db      	uxtb	r3, r3
 8008076:	001e      	movs	r6, r3
 8008078:	2e65      	cmp	r6, #101	; 0x65
 800807a:	d824      	bhi.n	80080c6 <_printf_float+0x19a>
 800807c:	0020      	movs	r0, r4
 800807e:	0032      	movs	r2, r6
 8008080:	3901      	subs	r1, #1
 8008082:	3050      	adds	r0, #80	; 0x50
 8008084:	9111      	str	r1, [sp, #68]	; 0x44
 8008086:	f7ff ff0a 	bl	8007e9e <__exponent>
 800808a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800808c:	900a      	str	r0, [sp, #40]	; 0x28
 800808e:	1813      	adds	r3, r2, r0
 8008090:	6123      	str	r3, [r4, #16]
 8008092:	2a01      	cmp	r2, #1
 8008094:	dc02      	bgt.n	800809c <_printf_float+0x170>
 8008096:	6822      	ldr	r2, [r4, #0]
 8008098:	07d2      	lsls	r2, r2, #31
 800809a:	d501      	bpl.n	80080a0 <_printf_float+0x174>
 800809c:	3301      	adds	r3, #1
 800809e:	6123      	str	r3, [r4, #16]
 80080a0:	2323      	movs	r3, #35	; 0x23
 80080a2:	aa08      	add	r2, sp, #32
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d100      	bne.n	80080ae <_printf_float+0x182>
 80080ac:	e791      	b.n	8007fd2 <_printf_float+0xa6>
 80080ae:	0023      	movs	r3, r4
 80080b0:	222d      	movs	r2, #45	; 0x2d
 80080b2:	3343      	adds	r3, #67	; 0x43
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e78c      	b.n	8007fd2 <_printf_float+0xa6>
 80080b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ba:	2a47      	cmp	r2, #71	; 0x47
 80080bc:	d1b6      	bne.n	800802c <_printf_float+0x100>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1b4      	bne.n	800802c <_printf_float+0x100>
 80080c2:	3301      	adds	r3, #1
 80080c4:	e7b1      	b.n	800802a <_printf_float+0xfe>
 80080c6:	2e66      	cmp	r6, #102	; 0x66
 80080c8:	d11b      	bne.n	8008102 <_printf_float+0x1d6>
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	2900      	cmp	r1, #0
 80080ce:	dd0d      	ble.n	80080ec <_printf_float+0x1c0>
 80080d0:	6121      	str	r1, [r4, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <_printf_float+0x1b0>
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	07d2      	lsls	r2, r2, #31
 80080da:	d502      	bpl.n	80080e2 <_printf_float+0x1b6>
 80080dc:	3301      	adds	r3, #1
 80080de:	1859      	adds	r1, r3, r1
 80080e0:	6121      	str	r1, [r4, #16]
 80080e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80080e6:	2300      	movs	r3, #0
 80080e8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ea:	e7d9      	b.n	80080a0 <_printf_float+0x174>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <_printf_float+0x1cc>
 80080f0:	2201      	movs	r2, #1
 80080f2:	6821      	ldr	r1, [r4, #0]
 80080f4:	4211      	tst	r1, r2
 80080f6:	d000      	beq.n	80080fa <_printf_float+0x1ce>
 80080f8:	1c9a      	adds	r2, r3, #2
 80080fa:	6122      	str	r2, [r4, #16]
 80080fc:	e7f1      	b.n	80080e2 <_printf_float+0x1b6>
 80080fe:	2367      	movs	r3, #103	; 0x67
 8008100:	001e      	movs	r6, r3
 8008102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008106:	4293      	cmp	r3, r2
 8008108:	db06      	blt.n	8008118 <_printf_float+0x1ec>
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	07d2      	lsls	r2, r2, #31
 8008110:	d5e7      	bpl.n	80080e2 <_printf_float+0x1b6>
 8008112:	3301      	adds	r3, #1
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	e7e4      	b.n	80080e2 <_printf_float+0x1b6>
 8008118:	2101      	movs	r1, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc01      	bgt.n	8008122 <_printf_float+0x1f6>
 800811e:	1849      	adds	r1, r1, r1
 8008120:	1ac9      	subs	r1, r1, r3
 8008122:	1852      	adds	r2, r2, r1
 8008124:	e7e9      	b.n	80080fa <_printf_float+0x1ce>
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	0553      	lsls	r3, r2, #21
 800812a:	d408      	bmi.n	800813e <_printf_float+0x212>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	002a      	movs	r2, r5
 8008130:	0038      	movs	r0, r7
 8008132:	9908      	ldr	r1, [sp, #32]
 8008134:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008136:	47a8      	blx	r5
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d129      	bne.n	8008190 <_printf_float+0x264>
 800813c:	e754      	b.n	8007fe8 <_printf_float+0xbc>
 800813e:	2e65      	cmp	r6, #101	; 0x65
 8008140:	d800      	bhi.n	8008144 <_printf_float+0x218>
 8008142:	e0ec      	b.n	800831e <_printf_float+0x3f2>
 8008144:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008146:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008148:	2200      	movs	r2, #0
 800814a:	2300      	movs	r3, #0
 800814c:	f7f8 f97c 	bl	8000448 <__aeabi_dcmpeq>
 8008150:	2800      	cmp	r0, #0
 8008152:	d034      	beq.n	80081be <_printf_float+0x292>
 8008154:	2301      	movs	r3, #1
 8008156:	0038      	movs	r0, r7
 8008158:	4a37      	ldr	r2, [pc, #220]	; (8008238 <_printf_float+0x30c>)
 800815a:	9908      	ldr	r1, [sp, #32]
 800815c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800815e:	47a8      	blx	r5
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d100      	bne.n	8008166 <_printf_float+0x23a>
 8008164:	e740      	b.n	8007fe8 <_printf_float+0xbc>
 8008166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008168:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800816a:	4293      	cmp	r3, r2
 800816c:	db02      	blt.n	8008174 <_printf_float+0x248>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d50d      	bpl.n	8008190 <_printf_float+0x264>
 8008174:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008176:	0038      	movs	r0, r7
 8008178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800817a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800817c:	9908      	ldr	r1, [sp, #32]
 800817e:	47a8      	blx	r5
 8008180:	2500      	movs	r5, #0
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d100      	bne.n	8008188 <_printf_float+0x25c>
 8008186:	e72f      	b.n	8007fe8 <_printf_float+0xbc>
 8008188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818a:	3b01      	subs	r3, #1
 800818c:	42ab      	cmp	r3, r5
 800818e:	dc0a      	bgt.n	80081a6 <_printf_float+0x27a>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	079b      	lsls	r3, r3, #30
 8008194:	d500      	bpl.n	8008198 <_printf_float+0x26c>
 8008196:	e114      	b.n	80083c2 <_printf_float+0x496>
 8008198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800819a:	68e0      	ldr	r0, [r4, #12]
 800819c:	4298      	cmp	r0, r3
 800819e:	db00      	blt.n	80081a2 <_printf_float+0x276>
 80081a0:	e724      	b.n	8007fec <_printf_float+0xc0>
 80081a2:	0018      	movs	r0, r3
 80081a4:	e722      	b.n	8007fec <_printf_float+0xc0>
 80081a6:	0022      	movs	r2, r4
 80081a8:	2301      	movs	r3, #1
 80081aa:	0038      	movs	r0, r7
 80081ac:	9908      	ldr	r1, [sp, #32]
 80081ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081b0:	321a      	adds	r2, #26
 80081b2:	47b0      	blx	r6
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d100      	bne.n	80081ba <_printf_float+0x28e>
 80081b8:	e716      	b.n	8007fe8 <_printf_float+0xbc>
 80081ba:	3501      	adds	r5, #1
 80081bc:	e7e4      	b.n	8008188 <_printf_float+0x25c>
 80081be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc3b      	bgt.n	800823c <_printf_float+0x310>
 80081c4:	2301      	movs	r3, #1
 80081c6:	0038      	movs	r0, r7
 80081c8:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <_printf_float+0x30c>)
 80081ca:	9908      	ldr	r1, [sp, #32]
 80081cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081ce:	47b0      	blx	r6
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d100      	bne.n	80081d6 <_printf_float+0x2aa>
 80081d4:	e708      	b.n	8007fe8 <_printf_float+0xbc>
 80081d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081da:	4313      	orrs	r3, r2
 80081dc:	d102      	bne.n	80081e4 <_printf_float+0x2b8>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	07db      	lsls	r3, r3, #31
 80081e2:	d5d5      	bpl.n	8008190 <_printf_float+0x264>
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	0038      	movs	r0, r7
 80081e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081ea:	9908      	ldr	r1, [sp, #32]
 80081ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081ee:	47b0      	blx	r6
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d100      	bne.n	80081f6 <_printf_float+0x2ca>
 80081f4:	e6f8      	b.n	8007fe8 <_printf_float+0xbc>
 80081f6:	2300      	movs	r3, #0
 80081f8:	930a      	str	r3, [sp, #40]	; 0x28
 80081fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	425b      	negs	r3, r3
 8008200:	4293      	cmp	r3, r2
 8008202:	dc01      	bgt.n	8008208 <_printf_float+0x2dc>
 8008204:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008206:	e792      	b.n	800812e <_printf_float+0x202>
 8008208:	0022      	movs	r2, r4
 800820a:	2301      	movs	r3, #1
 800820c:	0038      	movs	r0, r7
 800820e:	9908      	ldr	r1, [sp, #32]
 8008210:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008212:	321a      	adds	r2, #26
 8008214:	47b0      	blx	r6
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d100      	bne.n	800821c <_printf_float+0x2f0>
 800821a:	e6e5      	b.n	8007fe8 <_printf_float+0xbc>
 800821c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821e:	3301      	adds	r3, #1
 8008220:	e7ea      	b.n	80081f8 <_printf_float+0x2cc>
 8008222:	46c0      	nop			; (mov r8, r8)
 8008224:	7fefffff 	.word	0x7fefffff
 8008228:	0800b550 	.word	0x0800b550
 800822c:	0800b554 	.word	0x0800b554
 8008230:	0800b558 	.word	0x0800b558
 8008234:	0800b55c 	.word	0x0800b55c
 8008238:	0800b560 	.word	0x0800b560
 800823c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800823e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008240:	920a      	str	r2, [sp, #40]	; 0x28
 8008242:	429a      	cmp	r2, r3
 8008244:	dd00      	ble.n	8008248 <_printf_float+0x31c>
 8008246:	930a      	str	r3, [sp, #40]	; 0x28
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	dc3d      	bgt.n	80082ca <_printf_float+0x39e>
 800824e:	2300      	movs	r3, #0
 8008250:	930e      	str	r3, [sp, #56]	; 0x38
 8008252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008254:	43db      	mvns	r3, r3
 8008256:	17db      	asrs	r3, r3, #31
 8008258:	930f      	str	r3, [sp, #60]	; 0x3c
 800825a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800825c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800825e:	930c      	str	r3, [sp, #48]	; 0x30
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	4013      	ands	r3, r2
 8008264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826a:	4293      	cmp	r3, r2
 800826c:	dc36      	bgt.n	80082dc <_printf_float+0x3b0>
 800826e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008272:	4293      	cmp	r3, r2
 8008274:	db40      	blt.n	80082f8 <_printf_float+0x3cc>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	07db      	lsls	r3, r3, #31
 800827a:	d43d      	bmi.n	80082f8 <_printf_float+0x3cc>
 800827c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800827e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008280:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	1a52      	subs	r2, r2, r1
 8008286:	920a      	str	r2, [sp, #40]	; 0x28
 8008288:	429a      	cmp	r2, r3
 800828a:	dd00      	ble.n	800828e <_printf_float+0x362>
 800828c:	930a      	str	r3, [sp, #40]	; 0x28
 800828e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc3a      	bgt.n	800830a <_printf_float+0x3de>
 8008294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008296:	2500      	movs	r5, #0
 8008298:	43db      	mvns	r3, r3
 800829a:	17db      	asrs	r3, r3, #31
 800829c:	930b      	str	r3, [sp, #44]	; 0x2c
 800829e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a8:	400a      	ands	r2, r1
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	42ab      	cmp	r3, r5
 80082ae:	dc00      	bgt.n	80082b2 <_printf_float+0x386>
 80082b0:	e76e      	b.n	8008190 <_printf_float+0x264>
 80082b2:	0022      	movs	r2, r4
 80082b4:	2301      	movs	r3, #1
 80082b6:	0038      	movs	r0, r7
 80082b8:	9908      	ldr	r1, [sp, #32]
 80082ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082bc:	321a      	adds	r2, #26
 80082be:	47b0      	blx	r6
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d100      	bne.n	80082c6 <_printf_float+0x39a>
 80082c4:	e690      	b.n	8007fe8 <_printf_float+0xbc>
 80082c6:	3501      	adds	r5, #1
 80082c8:	e7e9      	b.n	800829e <_printf_float+0x372>
 80082ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082cc:	002a      	movs	r2, r5
 80082ce:	0038      	movs	r0, r7
 80082d0:	9908      	ldr	r1, [sp, #32]
 80082d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d1b9      	bne.n	800824e <_printf_float+0x322>
 80082da:	e685      	b.n	8007fe8 <_printf_float+0xbc>
 80082dc:	0022      	movs	r2, r4
 80082de:	2301      	movs	r3, #1
 80082e0:	0038      	movs	r0, r7
 80082e2:	9908      	ldr	r1, [sp, #32]
 80082e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082e6:	321a      	adds	r2, #26
 80082e8:	47b0      	blx	r6
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d100      	bne.n	80082f0 <_printf_float+0x3c4>
 80082ee:	e67b      	b.n	8007fe8 <_printf_float+0xbc>
 80082f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f2:	3301      	adds	r3, #1
 80082f4:	930e      	str	r3, [sp, #56]	; 0x38
 80082f6:	e7b0      	b.n	800825a <_printf_float+0x32e>
 80082f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fa:	0038      	movs	r0, r7
 80082fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082fe:	9908      	ldr	r1, [sp, #32]
 8008300:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008302:	47b0      	blx	r6
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d1b9      	bne.n	800827c <_printf_float+0x350>
 8008308:	e66e      	b.n	8007fe8 <_printf_float+0xbc>
 800830a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800830c:	0038      	movs	r0, r7
 800830e:	18ea      	adds	r2, r5, r3
 8008310:	9908      	ldr	r1, [sp, #32]
 8008312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008314:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008316:	47a8      	blx	r5
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d1bb      	bne.n	8008294 <_printf_float+0x368>
 800831c:	e664      	b.n	8007fe8 <_printf_float+0xbc>
 800831e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008320:	2b01      	cmp	r3, #1
 8008322:	dc02      	bgt.n	800832a <_printf_float+0x3fe>
 8008324:	2301      	movs	r3, #1
 8008326:	421a      	tst	r2, r3
 8008328:	d038      	beq.n	800839c <_printf_float+0x470>
 800832a:	2301      	movs	r3, #1
 800832c:	002a      	movs	r2, r5
 800832e:	0038      	movs	r0, r7
 8008330:	9908      	ldr	r1, [sp, #32]
 8008332:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008334:	47b0      	blx	r6
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d100      	bne.n	800833c <_printf_float+0x410>
 800833a:	e655      	b.n	8007fe8 <_printf_float+0xbc>
 800833c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833e:	0038      	movs	r0, r7
 8008340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008342:	9908      	ldr	r1, [sp, #32]
 8008344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008346:	47b0      	blx	r6
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d100      	bne.n	800834e <_printf_float+0x422>
 800834c:	e64c      	b.n	8007fe8 <_printf_float+0xbc>
 800834e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008350:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	f7f8 f877 	bl	8000448 <__aeabi_dcmpeq>
 800835a:	2800      	cmp	r0, #0
 800835c:	d11c      	bne.n	8008398 <_printf_float+0x46c>
 800835e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008360:	1c6a      	adds	r2, r5, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	0038      	movs	r0, r7
 8008366:	9908      	ldr	r1, [sp, #32]
 8008368:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800836a:	47a8      	blx	r5
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d10f      	bne.n	8008390 <_printf_float+0x464>
 8008370:	e63a      	b.n	8007fe8 <_printf_float+0xbc>
 8008372:	0022      	movs	r2, r4
 8008374:	2301      	movs	r3, #1
 8008376:	0038      	movs	r0, r7
 8008378:	9908      	ldr	r1, [sp, #32]
 800837a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800837c:	321a      	adds	r2, #26
 800837e:	47b0      	blx	r6
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d100      	bne.n	8008386 <_printf_float+0x45a>
 8008384:	e630      	b.n	8007fe8 <_printf_float+0xbc>
 8008386:	3501      	adds	r5, #1
 8008388:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800838a:	3b01      	subs	r3, #1
 800838c:	42ab      	cmp	r3, r5
 800838e:	dcf0      	bgt.n	8008372 <_printf_float+0x446>
 8008390:	0022      	movs	r2, r4
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	3250      	adds	r2, #80	; 0x50
 8008396:	e6cb      	b.n	8008130 <_printf_float+0x204>
 8008398:	2500      	movs	r5, #0
 800839a:	e7f5      	b.n	8008388 <_printf_float+0x45c>
 800839c:	002a      	movs	r2, r5
 800839e:	e7e1      	b.n	8008364 <_printf_float+0x438>
 80083a0:	0022      	movs	r2, r4
 80083a2:	2301      	movs	r3, #1
 80083a4:	0038      	movs	r0, r7
 80083a6:	9908      	ldr	r1, [sp, #32]
 80083a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083aa:	3219      	adds	r2, #25
 80083ac:	47b0      	blx	r6
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d100      	bne.n	80083b4 <_printf_float+0x488>
 80083b2:	e619      	b.n	8007fe8 <_printf_float+0xbc>
 80083b4:	3501      	adds	r5, #1
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dcef      	bgt.n	80083a0 <_printf_float+0x474>
 80083c0:	e6ea      	b.n	8008198 <_printf_float+0x26c>
 80083c2:	2500      	movs	r5, #0
 80083c4:	e7f7      	b.n	80083b6 <_printf_float+0x48a>
 80083c6:	46c0      	nop			; (mov r8, r8)

080083c8 <_printf_common>:
 80083c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ca:	0015      	movs	r5, r2
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	688a      	ldr	r2, [r1, #8]
 80083d0:	690b      	ldr	r3, [r1, #16]
 80083d2:	000c      	movs	r4, r1
 80083d4:	9000      	str	r0, [sp, #0]
 80083d6:	4293      	cmp	r3, r2
 80083d8:	da00      	bge.n	80083dc <_printf_common+0x14>
 80083da:	0013      	movs	r3, r2
 80083dc:	0022      	movs	r2, r4
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	3243      	adds	r2, #67	; 0x43
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d001      	beq.n	80083ec <_printf_common+0x24>
 80083e8:	3301      	adds	r3, #1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	069b      	lsls	r3, r3, #26
 80083f0:	d502      	bpl.n	80083f8 <_printf_common+0x30>
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	3302      	adds	r3, #2
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	2306      	movs	r3, #6
 80083fc:	0017      	movs	r7, r2
 80083fe:	401f      	ands	r7, r3
 8008400:	421a      	tst	r2, r3
 8008402:	d027      	beq.n	8008454 <_printf_common+0x8c>
 8008404:	0023      	movs	r3, r4
 8008406:	3343      	adds	r3, #67	; 0x43
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	1e5a      	subs	r2, r3, #1
 800840c:	4193      	sbcs	r3, r2
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	0692      	lsls	r2, r2, #26
 8008412:	d430      	bmi.n	8008476 <_printf_common+0xae>
 8008414:	0022      	movs	r2, r4
 8008416:	9901      	ldr	r1, [sp, #4]
 8008418:	9800      	ldr	r0, [sp, #0]
 800841a:	9e08      	ldr	r6, [sp, #32]
 800841c:	3243      	adds	r2, #67	; 0x43
 800841e:	47b0      	blx	r6
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d025      	beq.n	8008470 <_printf_common+0xa8>
 8008424:	2306      	movs	r3, #6
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	682a      	ldr	r2, [r5, #0]
 800842a:	68e1      	ldr	r1, [r4, #12]
 800842c:	2500      	movs	r5, #0
 800842e:	4003      	ands	r3, r0
 8008430:	2b04      	cmp	r3, #4
 8008432:	d103      	bne.n	800843c <_printf_common+0x74>
 8008434:	1a8d      	subs	r5, r1, r2
 8008436:	43eb      	mvns	r3, r5
 8008438:	17db      	asrs	r3, r3, #31
 800843a:	401d      	ands	r5, r3
 800843c:	68a3      	ldr	r3, [r4, #8]
 800843e:	6922      	ldr	r2, [r4, #16]
 8008440:	4293      	cmp	r3, r2
 8008442:	dd01      	ble.n	8008448 <_printf_common+0x80>
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	18ed      	adds	r5, r5, r3
 8008448:	2700      	movs	r7, #0
 800844a:	42bd      	cmp	r5, r7
 800844c:	d120      	bne.n	8008490 <_printf_common+0xc8>
 800844e:	2000      	movs	r0, #0
 8008450:	e010      	b.n	8008474 <_printf_common+0xac>
 8008452:	3701      	adds	r7, #1
 8008454:	68e3      	ldr	r3, [r4, #12]
 8008456:	682a      	ldr	r2, [r5, #0]
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	42bb      	cmp	r3, r7
 800845c:	ddd2      	ble.n	8008404 <_printf_common+0x3c>
 800845e:	0022      	movs	r2, r4
 8008460:	2301      	movs	r3, #1
 8008462:	9901      	ldr	r1, [sp, #4]
 8008464:	9800      	ldr	r0, [sp, #0]
 8008466:	9e08      	ldr	r6, [sp, #32]
 8008468:	3219      	adds	r2, #25
 800846a:	47b0      	blx	r6
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d1f0      	bne.n	8008452 <_printf_common+0x8a>
 8008470:	2001      	movs	r0, #1
 8008472:	4240      	negs	r0, r0
 8008474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008476:	2030      	movs	r0, #48	; 0x30
 8008478:	18e1      	adds	r1, r4, r3
 800847a:	3143      	adds	r1, #67	; 0x43
 800847c:	7008      	strb	r0, [r1, #0]
 800847e:	0021      	movs	r1, r4
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	3145      	adds	r1, #69	; 0x45
 8008484:	7809      	ldrb	r1, [r1, #0]
 8008486:	18a2      	adds	r2, r4, r2
 8008488:	3243      	adds	r2, #67	; 0x43
 800848a:	3302      	adds	r3, #2
 800848c:	7011      	strb	r1, [r2, #0]
 800848e:	e7c1      	b.n	8008414 <_printf_common+0x4c>
 8008490:	0022      	movs	r2, r4
 8008492:	2301      	movs	r3, #1
 8008494:	9901      	ldr	r1, [sp, #4]
 8008496:	9800      	ldr	r0, [sp, #0]
 8008498:	9e08      	ldr	r6, [sp, #32]
 800849a:	321a      	adds	r2, #26
 800849c:	47b0      	blx	r6
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d0e6      	beq.n	8008470 <_printf_common+0xa8>
 80084a2:	3701      	adds	r7, #1
 80084a4:	e7d1      	b.n	800844a <_printf_common+0x82>
	...

080084a8 <_printf_i>:
 80084a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084aa:	b08b      	sub	sp, #44	; 0x2c
 80084ac:	9206      	str	r2, [sp, #24]
 80084ae:	000a      	movs	r2, r1
 80084b0:	3243      	adds	r2, #67	; 0x43
 80084b2:	9307      	str	r3, [sp, #28]
 80084b4:	9005      	str	r0, [sp, #20]
 80084b6:	9204      	str	r2, [sp, #16]
 80084b8:	7e0a      	ldrb	r2, [r1, #24]
 80084ba:	000c      	movs	r4, r1
 80084bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084be:	2a78      	cmp	r2, #120	; 0x78
 80084c0:	d806      	bhi.n	80084d0 <_printf_i+0x28>
 80084c2:	2a62      	cmp	r2, #98	; 0x62
 80084c4:	d808      	bhi.n	80084d8 <_printf_i+0x30>
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	d100      	bne.n	80084cc <_printf_i+0x24>
 80084ca:	e0c0      	b.n	800864e <_printf_i+0x1a6>
 80084cc:	2a58      	cmp	r2, #88	; 0x58
 80084ce:	d052      	beq.n	8008576 <_printf_i+0xce>
 80084d0:	0026      	movs	r6, r4
 80084d2:	3642      	adds	r6, #66	; 0x42
 80084d4:	7032      	strb	r2, [r6, #0]
 80084d6:	e022      	b.n	800851e <_printf_i+0x76>
 80084d8:	0010      	movs	r0, r2
 80084da:	3863      	subs	r0, #99	; 0x63
 80084dc:	2815      	cmp	r0, #21
 80084de:	d8f7      	bhi.n	80084d0 <_printf_i+0x28>
 80084e0:	f7f7 fe22 	bl	8000128 <__gnu_thumb1_case_shi>
 80084e4:	001f0016 	.word	0x001f0016
 80084e8:	fff6fff6 	.word	0xfff6fff6
 80084ec:	fff6fff6 	.word	0xfff6fff6
 80084f0:	fff6001f 	.word	0xfff6001f
 80084f4:	fff6fff6 	.word	0xfff6fff6
 80084f8:	00a8fff6 	.word	0x00a8fff6
 80084fc:	009a0036 	.word	0x009a0036
 8008500:	fff6fff6 	.word	0xfff6fff6
 8008504:	fff600b9 	.word	0xfff600b9
 8008508:	fff60036 	.word	0xfff60036
 800850c:	009efff6 	.word	0x009efff6
 8008510:	0026      	movs	r6, r4
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	3642      	adds	r6, #66	; 0x42
 8008516:	1d11      	adds	r1, r2, #4
 8008518:	6019      	str	r1, [r3, #0]
 800851a:	6813      	ldr	r3, [r2, #0]
 800851c:	7033      	strb	r3, [r6, #0]
 800851e:	2301      	movs	r3, #1
 8008520:	e0a7      	b.n	8008672 <_printf_i+0x1ca>
 8008522:	6808      	ldr	r0, [r1, #0]
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	1d0a      	adds	r2, r1, #4
 8008528:	0605      	lsls	r5, r0, #24
 800852a:	d50b      	bpl.n	8008544 <_printf_i+0x9c>
 800852c:	680d      	ldr	r5, [r1, #0]
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	2d00      	cmp	r5, #0
 8008532:	da03      	bge.n	800853c <_printf_i+0x94>
 8008534:	232d      	movs	r3, #45	; 0x2d
 8008536:	9a04      	ldr	r2, [sp, #16]
 8008538:	426d      	negs	r5, r5
 800853a:	7013      	strb	r3, [r2, #0]
 800853c:	4b61      	ldr	r3, [pc, #388]	; (80086c4 <_printf_i+0x21c>)
 800853e:	270a      	movs	r7, #10
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	e032      	b.n	80085aa <_printf_i+0x102>
 8008544:	680d      	ldr	r5, [r1, #0]
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	0641      	lsls	r1, r0, #25
 800854a:	d5f1      	bpl.n	8008530 <_printf_i+0x88>
 800854c:	b22d      	sxth	r5, r5
 800854e:	e7ef      	b.n	8008530 <_printf_i+0x88>
 8008550:	680d      	ldr	r5, [r1, #0]
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	1d08      	adds	r0, r1, #4
 8008556:	6018      	str	r0, [r3, #0]
 8008558:	062e      	lsls	r6, r5, #24
 800855a:	d501      	bpl.n	8008560 <_printf_i+0xb8>
 800855c:	680d      	ldr	r5, [r1, #0]
 800855e:	e003      	b.n	8008568 <_printf_i+0xc0>
 8008560:	066d      	lsls	r5, r5, #25
 8008562:	d5fb      	bpl.n	800855c <_printf_i+0xb4>
 8008564:	680d      	ldr	r5, [r1, #0]
 8008566:	b2ad      	uxth	r5, r5
 8008568:	4b56      	ldr	r3, [pc, #344]	; (80086c4 <_printf_i+0x21c>)
 800856a:	270a      	movs	r7, #10
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	2a6f      	cmp	r2, #111	; 0x6f
 8008570:	d117      	bne.n	80085a2 <_printf_i+0xfa>
 8008572:	2708      	movs	r7, #8
 8008574:	e015      	b.n	80085a2 <_printf_i+0xfa>
 8008576:	3145      	adds	r1, #69	; 0x45
 8008578:	700a      	strb	r2, [r1, #0]
 800857a:	4a52      	ldr	r2, [pc, #328]	; (80086c4 <_printf_i+0x21c>)
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	6821      	ldr	r1, [r4, #0]
 8008582:	ca20      	ldmia	r2!, {r5}
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	0608      	lsls	r0, r1, #24
 8008588:	d550      	bpl.n	800862c <_printf_i+0x184>
 800858a:	07cb      	lsls	r3, r1, #31
 800858c:	d502      	bpl.n	8008594 <_printf_i+0xec>
 800858e:	2320      	movs	r3, #32
 8008590:	4319      	orrs	r1, r3
 8008592:	6021      	str	r1, [r4, #0]
 8008594:	2710      	movs	r7, #16
 8008596:	2d00      	cmp	r5, #0
 8008598:	d103      	bne.n	80085a2 <_printf_i+0xfa>
 800859a:	2320      	movs	r3, #32
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	439a      	bics	r2, r3
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	0023      	movs	r3, r4
 80085a4:	2200      	movs	r2, #0
 80085a6:	3343      	adds	r3, #67	; 0x43
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	6863      	ldr	r3, [r4, #4]
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	db03      	blt.n	80085ba <_printf_i+0x112>
 80085b2:	2204      	movs	r2, #4
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	4391      	bics	r1, r2
 80085b8:	6021      	str	r1, [r4, #0]
 80085ba:	2d00      	cmp	r5, #0
 80085bc:	d102      	bne.n	80085c4 <_printf_i+0x11c>
 80085be:	9e04      	ldr	r6, [sp, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00c      	beq.n	80085de <_printf_i+0x136>
 80085c4:	9e04      	ldr	r6, [sp, #16]
 80085c6:	0028      	movs	r0, r5
 80085c8:	0039      	movs	r1, r7
 80085ca:	f7f7 fe3d 	bl	8000248 <__aeabi_uidivmod>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	3e01      	subs	r6, #1
 80085d2:	5c5b      	ldrb	r3, [r3, r1]
 80085d4:	7033      	strb	r3, [r6, #0]
 80085d6:	002b      	movs	r3, r5
 80085d8:	0005      	movs	r5, r0
 80085da:	429f      	cmp	r7, r3
 80085dc:	d9f3      	bls.n	80085c6 <_printf_i+0x11e>
 80085de:	2f08      	cmp	r7, #8
 80085e0:	d109      	bne.n	80085f6 <_printf_i+0x14e>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	07db      	lsls	r3, r3, #31
 80085e6:	d506      	bpl.n	80085f6 <_printf_i+0x14e>
 80085e8:	6863      	ldr	r3, [r4, #4]
 80085ea:	6922      	ldr	r2, [r4, #16]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	dc02      	bgt.n	80085f6 <_printf_i+0x14e>
 80085f0:	2330      	movs	r3, #48	; 0x30
 80085f2:	3e01      	subs	r6, #1
 80085f4:	7033      	strb	r3, [r6, #0]
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	1b9b      	subs	r3, r3, r6
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	0021      	movs	r1, r4
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	9805      	ldr	r0, [sp, #20]
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	aa09      	add	r2, sp, #36	; 0x24
 8008608:	f7ff fede 	bl	80083c8 <_printf_common>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d135      	bne.n	800867c <_printf_i+0x1d4>
 8008610:	2001      	movs	r0, #1
 8008612:	4240      	negs	r0, r0
 8008614:	b00b      	add	sp, #44	; 0x2c
 8008616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008618:	2220      	movs	r2, #32
 800861a:	6809      	ldr	r1, [r1, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	0022      	movs	r2, r4
 8008622:	2178      	movs	r1, #120	; 0x78
 8008624:	3245      	adds	r2, #69	; 0x45
 8008626:	7011      	strb	r1, [r2, #0]
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <_printf_i+0x220>)
 800862a:	e7a7      	b.n	800857c <_printf_i+0xd4>
 800862c:	0648      	lsls	r0, r1, #25
 800862e:	d5ac      	bpl.n	800858a <_printf_i+0xe2>
 8008630:	b2ad      	uxth	r5, r5
 8008632:	e7aa      	b.n	800858a <_printf_i+0xe2>
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	680d      	ldr	r5, [r1, #0]
 8008638:	1d10      	adds	r0, r2, #4
 800863a:	6949      	ldr	r1, [r1, #20]
 800863c:	6018      	str	r0, [r3, #0]
 800863e:	6813      	ldr	r3, [r2, #0]
 8008640:	062e      	lsls	r6, r5, #24
 8008642:	d501      	bpl.n	8008648 <_printf_i+0x1a0>
 8008644:	6019      	str	r1, [r3, #0]
 8008646:	e002      	b.n	800864e <_printf_i+0x1a6>
 8008648:	066d      	lsls	r5, r5, #25
 800864a:	d5fb      	bpl.n	8008644 <_printf_i+0x19c>
 800864c:	8019      	strh	r1, [r3, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	9e04      	ldr	r6, [sp, #16]
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	e7d2      	b.n	80085fc <_printf_i+0x154>
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	1d11      	adds	r1, r2, #4
 800865a:	6019      	str	r1, [r3, #0]
 800865c:	6816      	ldr	r6, [r2, #0]
 800865e:	2100      	movs	r1, #0
 8008660:	0030      	movs	r0, r6
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	f000 ff0a 	bl	800947c <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d001      	beq.n	8008670 <_printf_i+0x1c8>
 800866c:	1b80      	subs	r0, r0, r6
 800866e:	6060      	str	r0, [r4, #4]
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	2300      	movs	r3, #0
 8008676:	9a04      	ldr	r2, [sp, #16]
 8008678:	7013      	strb	r3, [r2, #0]
 800867a:	e7bf      	b.n	80085fc <_printf_i+0x154>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	0032      	movs	r2, r6
 8008680:	9906      	ldr	r1, [sp, #24]
 8008682:	9805      	ldr	r0, [sp, #20]
 8008684:	9d07      	ldr	r5, [sp, #28]
 8008686:	47a8      	blx	r5
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d0c1      	beq.n	8008610 <_printf_i+0x168>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	d415      	bmi.n	80086be <_printf_i+0x216>
 8008692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008694:	68e0      	ldr	r0, [r4, #12]
 8008696:	4298      	cmp	r0, r3
 8008698:	dabc      	bge.n	8008614 <_printf_i+0x16c>
 800869a:	0018      	movs	r0, r3
 800869c:	e7ba      	b.n	8008614 <_printf_i+0x16c>
 800869e:	0022      	movs	r2, r4
 80086a0:	2301      	movs	r3, #1
 80086a2:	9906      	ldr	r1, [sp, #24]
 80086a4:	9805      	ldr	r0, [sp, #20]
 80086a6:	9e07      	ldr	r6, [sp, #28]
 80086a8:	3219      	adds	r2, #25
 80086aa:	47b0      	blx	r6
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d0af      	beq.n	8008610 <_printf_i+0x168>
 80086b0:	3501      	adds	r5, #1
 80086b2:	68e3      	ldr	r3, [r4, #12]
 80086b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	dcf0      	bgt.n	800869e <_printf_i+0x1f6>
 80086bc:	e7e9      	b.n	8008692 <_printf_i+0x1ea>
 80086be:	2500      	movs	r5, #0
 80086c0:	e7f7      	b.n	80086b2 <_printf_i+0x20a>
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	0800b562 	.word	0x0800b562
 80086c8:	0800b573 	.word	0x0800b573

080086cc <siprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b500      	push	{lr}
 80086d0:	490b      	ldr	r1, [pc, #44]	; (8008700 <siprintf+0x34>)
 80086d2:	b09c      	sub	sp, #112	; 0x70
 80086d4:	ab1d      	add	r3, sp, #116	; 0x74
 80086d6:	9002      	str	r0, [sp, #8]
 80086d8:	9006      	str	r0, [sp, #24]
 80086da:	9107      	str	r1, [sp, #28]
 80086dc:	9104      	str	r1, [sp, #16]
 80086de:	4809      	ldr	r0, [pc, #36]	; (8008704 <siprintf+0x38>)
 80086e0:	4909      	ldr	r1, [pc, #36]	; (8008708 <siprintf+0x3c>)
 80086e2:	cb04      	ldmia	r3!, {r2}
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	a902      	add	r1, sp, #8
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	f001 fb90 	bl	8009e10 <_svfiprintf_r>
 80086f0:	2300      	movs	r3, #0
 80086f2:	9a02      	ldr	r2, [sp, #8]
 80086f4:	7013      	strb	r3, [r2, #0]
 80086f6:	b01c      	add	sp, #112	; 0x70
 80086f8:	bc08      	pop	{r3}
 80086fa:	b003      	add	sp, #12
 80086fc:	4718      	bx	r3
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	7fffffff 	.word	0x7fffffff
 8008704:	20000014 	.word	0x20000014
 8008708:	ffff0208 	.word	0xffff0208

0800870c <quorem>:
 800870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870e:	0006      	movs	r6, r0
 8008710:	690d      	ldr	r5, [r1, #16]
 8008712:	6933      	ldr	r3, [r6, #16]
 8008714:	b087      	sub	sp, #28
 8008716:	2000      	movs	r0, #0
 8008718:	9102      	str	r1, [sp, #8]
 800871a:	42ab      	cmp	r3, r5
 800871c:	db6b      	blt.n	80087f6 <quorem+0xea>
 800871e:	000b      	movs	r3, r1
 8008720:	3d01      	subs	r5, #1
 8008722:	00ac      	lsls	r4, r5, #2
 8008724:	3314      	adds	r3, #20
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	191b      	adds	r3, r3, r4
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	0033      	movs	r3, r6
 800872e:	3314      	adds	r3, #20
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	191c      	adds	r4, r3, r4
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	6827      	ldr	r7, [r4, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	0038      	movs	r0, r7
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	0019      	movs	r1, r3
 8008742:	9304      	str	r3, [sp, #16]
 8008744:	f7f7 fcfa 	bl	800013c <__udivsi3>
 8008748:	9b04      	ldr	r3, [sp, #16]
 800874a:	9000      	str	r0, [sp, #0]
 800874c:	429f      	cmp	r7, r3
 800874e:	d329      	bcc.n	80087a4 <quorem+0x98>
 8008750:	2300      	movs	r3, #0
 8008752:	469c      	mov	ip, r3
 8008754:	9801      	ldr	r0, [sp, #4]
 8008756:	9f05      	ldr	r7, [sp, #20]
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	cf08      	ldmia	r7!, {r3}
 800875c:	9a00      	ldr	r2, [sp, #0]
 800875e:	b299      	uxth	r1, r3
 8008760:	4351      	muls	r1, r2
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	4353      	muls	r3, r2
 8008766:	4461      	add	r1, ip
 8008768:	0c0a      	lsrs	r2, r1, #16
 800876a:	189b      	adds	r3, r3, r2
 800876c:	0c1a      	lsrs	r2, r3, #16
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	6803      	ldr	r3, [r0, #0]
 8008772:	4694      	mov	ip, r2
 8008774:	b29a      	uxth	r2, r3
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	b289      	uxth	r1, r1
 800877a:	18d2      	adds	r2, r2, r3
 800877c:	6803      	ldr	r3, [r0, #0]
 800877e:	1a52      	subs	r2, r2, r1
 8008780:	0c19      	lsrs	r1, r3, #16
 8008782:	466b      	mov	r3, sp
 8008784:	8a9b      	ldrh	r3, [r3, #20]
 8008786:	1acb      	subs	r3, r1, r3
 8008788:	1411      	asrs	r1, r2, #16
 800878a:	185b      	adds	r3, r3, r1
 800878c:	1419      	asrs	r1, r3, #16
 800878e:	b292      	uxth	r2, r2
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	9104      	str	r1, [sp, #16]
 8008798:	c004      	stmia	r0!, {r2}
 800879a:	42bb      	cmp	r3, r7
 800879c:	d2dd      	bcs.n	800875a <quorem+0x4e>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02e      	beq.n	8008802 <quorem+0xf6>
 80087a4:	0030      	movs	r0, r6
 80087a6:	9902      	ldr	r1, [sp, #8]
 80087a8:	f001 f902 	bl	80099b0 <__mcmp>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	db21      	blt.n	80087f4 <quorem+0xe8>
 80087b0:	0030      	movs	r0, r6
 80087b2:	2400      	movs	r4, #0
 80087b4:	9b00      	ldr	r3, [sp, #0]
 80087b6:	9902      	ldr	r1, [sp, #8]
 80087b8:	3301      	adds	r3, #1
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	3014      	adds	r0, #20
 80087be:	3114      	adds	r1, #20
 80087c0:	6802      	ldr	r2, [r0, #0]
 80087c2:	c908      	ldmia	r1!, {r3}
 80087c4:	b292      	uxth	r2, r2
 80087c6:	1914      	adds	r4, r2, r4
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	1aa2      	subs	r2, r4, r2
 80087cc:	6804      	ldr	r4, [r0, #0]
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	0c24      	lsrs	r4, r4, #16
 80087d2:	1ae3      	subs	r3, r4, r3
 80087d4:	1414      	asrs	r4, r2, #16
 80087d6:	191b      	adds	r3, r3, r4
 80087d8:	141c      	asrs	r4, r3, #16
 80087da:	b292      	uxth	r2, r2
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	4313      	orrs	r3, r2
 80087e0:	c008      	stmia	r0!, {r3}
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	428b      	cmp	r3, r1
 80087e6:	d2eb      	bcs.n	80087c0 <quorem+0xb4>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	00ab      	lsls	r3, r5, #2
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d010      	beq.n	8008816 <quorem+0x10a>
 80087f4:	9800      	ldr	r0, [sp, #0]
 80087f6:	b007      	add	sp, #28
 80087f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <quorem+0xfe>
 8008800:	3d01      	subs	r5, #1
 8008802:	9b01      	ldr	r3, [sp, #4]
 8008804:	3c04      	subs	r4, #4
 8008806:	42a3      	cmp	r3, r4
 8008808:	d3f7      	bcc.n	80087fa <quorem+0xee>
 800880a:	6135      	str	r5, [r6, #16]
 800880c:	e7ca      	b.n	80087a4 <quorem+0x98>
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	2a00      	cmp	r2, #0
 8008812:	d104      	bne.n	800881e <quorem+0x112>
 8008814:	3d01      	subs	r5, #1
 8008816:	9a01      	ldr	r2, [sp, #4]
 8008818:	3b04      	subs	r3, #4
 800881a:	429a      	cmp	r2, r3
 800881c:	d3f7      	bcc.n	800880e <quorem+0x102>
 800881e:	6135      	str	r5, [r6, #16]
 8008820:	e7e8      	b.n	80087f4 <quorem+0xe8>
	...

08008824 <_dtoa_r>:
 8008824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008826:	b09d      	sub	sp, #116	; 0x74
 8008828:	9202      	str	r2, [sp, #8]
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	9c03      	ldr	r4, [sp, #12]
 8008830:	930a      	str	r3, [sp, #40]	; 0x28
 8008832:	940b      	str	r4, [sp, #44]	; 0x2c
 8008834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008836:	0007      	movs	r7, r0
 8008838:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800883a:	2c00      	cmp	r4, #0
 800883c:	d10e      	bne.n	800885c <_dtoa_r+0x38>
 800883e:	2010      	movs	r0, #16
 8008840:	f000 fe12 	bl	8009468 <malloc>
 8008844:	1e02      	subs	r2, r0, #0
 8008846:	6278      	str	r0, [r7, #36]	; 0x24
 8008848:	d104      	bne.n	8008854 <_dtoa_r+0x30>
 800884a:	21ea      	movs	r1, #234	; 0xea
 800884c:	4bc0      	ldr	r3, [pc, #768]	; (8008b50 <_dtoa_r+0x32c>)
 800884e:	48c1      	ldr	r0, [pc, #772]	; (8008b54 <_dtoa_r+0x330>)
 8008850:	f001 fbf0 	bl	800a034 <__assert_func>
 8008854:	6044      	str	r4, [r0, #4]
 8008856:	6084      	str	r4, [r0, #8]
 8008858:	6004      	str	r4, [r0, #0]
 800885a:	60c4      	str	r4, [r0, #12]
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	2900      	cmp	r1, #0
 8008862:	d00a      	beq.n	800887a <_dtoa_r+0x56>
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	2301      	movs	r3, #1
 8008868:	4093      	lsls	r3, r2
 800886a:	604a      	str	r2, [r1, #4]
 800886c:	608b      	str	r3, [r1, #8]
 800886e:	0038      	movs	r0, r7
 8008870:	f000 fe5c 	bl	800952c <_Bfree>
 8008874:	2200      	movs	r2, #0
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da21      	bge.n	80088c4 <_dtoa_r+0xa0>
 8008880:	2301      	movs	r3, #1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	085b      	lsrs	r3, r3, #1
 800888a:	930b      	str	r3, [sp, #44]	; 0x2c
 800888c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800888e:	4bb2      	ldr	r3, [pc, #712]	; (8008b58 <_dtoa_r+0x334>)
 8008890:	002a      	movs	r2, r5
 8008892:	9318      	str	r3, [sp, #96]	; 0x60
 8008894:	401a      	ands	r2, r3
 8008896:	429a      	cmp	r2, r3
 8008898:	d117      	bne.n	80088ca <_dtoa_r+0xa6>
 800889a:	4bb0      	ldr	r3, [pc, #704]	; (8008b5c <_dtoa_r+0x338>)
 800889c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800889e:	0328      	lsls	r0, r5, #12
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	9b02      	ldr	r3, [sp, #8]
 80088a4:	0b00      	lsrs	r0, r0, #12
 80088a6:	4318      	orrs	r0, r3
 80088a8:	d101      	bne.n	80088ae <_dtoa_r+0x8a>
 80088aa:	f000 fdc3 	bl	8009434 <_dtoa_r+0xc10>
 80088ae:	48ac      	ldr	r0, [pc, #688]	; (8008b60 <_dtoa_r+0x33c>)
 80088b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088b2:	9005      	str	r0, [sp, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <_dtoa_r+0x9a>
 80088b8:	4baa      	ldr	r3, [pc, #680]	; (8008b64 <_dtoa_r+0x340>)
 80088ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	b01d      	add	sp, #116	; 0x74
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c4:	2300      	movs	r3, #0
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	e7e0      	b.n	800888c <_dtoa_r+0x68>
 80088ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80088ce:	9312      	str	r3, [sp, #72]	; 0x48
 80088d0:	9413      	str	r4, [sp, #76]	; 0x4c
 80088d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088d6:	2200      	movs	r2, #0
 80088d8:	2300      	movs	r3, #0
 80088da:	f7f7 fdb5 	bl	8000448 <__aeabi_dcmpeq>
 80088de:	1e04      	subs	r4, r0, #0
 80088e0:	d00b      	beq.n	80088fa <_dtoa_r+0xd6>
 80088e2:	2301      	movs	r3, #1
 80088e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	4b9f      	ldr	r3, [pc, #636]	; (8008b68 <_dtoa_r+0x344>)
 80088ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088ec:	9305      	str	r3, [sp, #20]
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d0e5      	beq.n	80088be <_dtoa_r+0x9a>
 80088f2:	4a9e      	ldr	r2, [pc, #632]	; (8008b6c <_dtoa_r+0x348>)
 80088f4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80088f6:	600a      	str	r2, [r1, #0]
 80088f8:	e7e1      	b.n	80088be <_dtoa_r+0x9a>
 80088fa:	ab1a      	add	r3, sp, #104	; 0x68
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	0038      	movs	r0, r7
 8008904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008906:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008908:	f001 f906 	bl	8009b18 <__d2b>
 800890c:	006e      	lsls	r6, r5, #1
 800890e:	9004      	str	r0, [sp, #16]
 8008910:	0d76      	lsrs	r6, r6, #21
 8008912:	d100      	bne.n	8008916 <_dtoa_r+0xf2>
 8008914:	e07c      	b.n	8008a10 <_dtoa_r+0x1ec>
 8008916:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008918:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800891a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800891c:	4a94      	ldr	r2, [pc, #592]	; (8008b70 <_dtoa_r+0x34c>)
 800891e:	031b      	lsls	r3, r3, #12
 8008920:	0b1b      	lsrs	r3, r3, #12
 8008922:	431a      	orrs	r2, r3
 8008924:	0011      	movs	r1, r2
 8008926:	4b93      	ldr	r3, [pc, #588]	; (8008b74 <_dtoa_r+0x350>)
 8008928:	9416      	str	r4, [sp, #88]	; 0x58
 800892a:	18f6      	adds	r6, r6, r3
 800892c:	2200      	movs	r2, #0
 800892e:	4b92      	ldr	r3, [pc, #584]	; (8008b78 <_dtoa_r+0x354>)
 8008930:	f7f9 fabe 	bl	8001eb0 <__aeabi_dsub>
 8008934:	4a91      	ldr	r2, [pc, #580]	; (8008b7c <_dtoa_r+0x358>)
 8008936:	4b92      	ldr	r3, [pc, #584]	; (8008b80 <_dtoa_r+0x35c>)
 8008938:	f7f9 f84e 	bl	80019d8 <__aeabi_dmul>
 800893c:	4a91      	ldr	r2, [pc, #580]	; (8008b84 <_dtoa_r+0x360>)
 800893e:	4b92      	ldr	r3, [pc, #584]	; (8008b88 <_dtoa_r+0x364>)
 8008940:	f7f8 f8da 	bl	8000af8 <__aeabi_dadd>
 8008944:	0004      	movs	r4, r0
 8008946:	0030      	movs	r0, r6
 8008948:	000d      	movs	r5, r1
 800894a:	f7f9 fe97 	bl	800267c <__aeabi_i2d>
 800894e:	4a8f      	ldr	r2, [pc, #572]	; (8008b8c <_dtoa_r+0x368>)
 8008950:	4b8f      	ldr	r3, [pc, #572]	; (8008b90 <_dtoa_r+0x36c>)
 8008952:	f7f9 f841 	bl	80019d8 <__aeabi_dmul>
 8008956:	0002      	movs	r2, r0
 8008958:	000b      	movs	r3, r1
 800895a:	0020      	movs	r0, r4
 800895c:	0029      	movs	r1, r5
 800895e:	f7f8 f8cb 	bl	8000af8 <__aeabi_dadd>
 8008962:	0004      	movs	r4, r0
 8008964:	000d      	movs	r5, r1
 8008966:	f7f9 fe53 	bl	8002610 <__aeabi_d2iz>
 800896a:	2200      	movs	r2, #0
 800896c:	9002      	str	r0, [sp, #8]
 800896e:	2300      	movs	r3, #0
 8008970:	0020      	movs	r0, r4
 8008972:	0029      	movs	r1, r5
 8008974:	f7f7 fd6e 	bl	8000454 <__aeabi_dcmplt>
 8008978:	2800      	cmp	r0, #0
 800897a:	d00b      	beq.n	8008994 <_dtoa_r+0x170>
 800897c:	9802      	ldr	r0, [sp, #8]
 800897e:	f7f9 fe7d 	bl	800267c <__aeabi_i2d>
 8008982:	002b      	movs	r3, r5
 8008984:	0022      	movs	r2, r4
 8008986:	f7f7 fd5f 	bl	8000448 <__aeabi_dcmpeq>
 800898a:	4243      	negs	r3, r0
 800898c:	4158      	adcs	r0, r3
 800898e:	9b02      	ldr	r3, [sp, #8]
 8008990:	1a1b      	subs	r3, r3, r0
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	2301      	movs	r3, #1
 8008996:	9315      	str	r3, [sp, #84]	; 0x54
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2b16      	cmp	r3, #22
 800899c:	d80f      	bhi.n	80089be <_dtoa_r+0x19a>
 800899e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089a2:	00da      	lsls	r2, r3, #3
 80089a4:	4b7b      	ldr	r3, [pc, #492]	; (8008b94 <_dtoa_r+0x370>)
 80089a6:	189b      	adds	r3, r3, r2
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f7f7 fd52 	bl	8000454 <__aeabi_dcmplt>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d049      	beq.n	8008a48 <_dtoa_r+0x224>
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	9302      	str	r3, [sp, #8]
 80089ba:	2300      	movs	r3, #0
 80089bc:	9315      	str	r3, [sp, #84]	; 0x54
 80089be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089c0:	1b9e      	subs	r6, r3, r6
 80089c2:	2300      	movs	r3, #0
 80089c4:	9308      	str	r3, [sp, #32]
 80089c6:	0033      	movs	r3, r6
 80089c8:	3b01      	subs	r3, #1
 80089ca:	930d      	str	r3, [sp, #52]	; 0x34
 80089cc:	d504      	bpl.n	80089d8 <_dtoa_r+0x1b4>
 80089ce:	2301      	movs	r3, #1
 80089d0:	1b9b      	subs	r3, r3, r6
 80089d2:	9308      	str	r3, [sp, #32]
 80089d4:	2300      	movs	r3, #0
 80089d6:	930d      	str	r3, [sp, #52]	; 0x34
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	db36      	blt.n	8008a4c <_dtoa_r+0x228>
 80089de:	9a02      	ldr	r2, [sp, #8]
 80089e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e2:	4694      	mov	ip, r2
 80089e4:	4463      	add	r3, ip
 80089e6:	930d      	str	r3, [sp, #52]	; 0x34
 80089e8:	2300      	movs	r3, #0
 80089ea:	9214      	str	r2, [sp, #80]	; 0x50
 80089ec:	930e      	str	r3, [sp, #56]	; 0x38
 80089ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089f0:	2401      	movs	r4, #1
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d862      	bhi.n	8008abc <_dtoa_r+0x298>
 80089f6:	2b05      	cmp	r3, #5
 80089f8:	dd02      	ble.n	8008a00 <_dtoa_r+0x1dc>
 80089fa:	2400      	movs	r4, #0
 80089fc:	3b04      	subs	r3, #4
 80089fe:	9322      	str	r3, [sp, #136]	; 0x88
 8008a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a02:	1e98      	subs	r0, r3, #2
 8008a04:	2803      	cmp	r0, #3
 8008a06:	d862      	bhi.n	8008ace <_dtoa_r+0x2aa>
 8008a08:	f7f7 fb84 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008a0c:	56343629 	.word	0x56343629
 8008a10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a14:	189e      	adds	r6, r3, r2
 8008a16:	4b60      	ldr	r3, [pc, #384]	; (8008b98 <_dtoa_r+0x374>)
 8008a18:	18f2      	adds	r2, r6, r3
 8008a1a:	2a20      	cmp	r2, #32
 8008a1c:	dd0f      	ble.n	8008a3e <_dtoa_r+0x21a>
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	409d      	lsls	r5, r3
 8008a24:	4b5d      	ldr	r3, [pc, #372]	; (8008b9c <_dtoa_r+0x378>)
 8008a26:	9802      	ldr	r0, [sp, #8]
 8008a28:	18f3      	adds	r3, r6, r3
 8008a2a:	40d8      	lsrs	r0, r3
 8008a2c:	4328      	orrs	r0, r5
 8008a2e:	f7f9 fe55 	bl	80026dc <__aeabi_ui2d>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4c5a      	ldr	r4, [pc, #360]	; (8008ba0 <_dtoa_r+0x37c>)
 8008a36:	3e01      	subs	r6, #1
 8008a38:	1909      	adds	r1, r1, r4
 8008a3a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a3c:	e776      	b.n	800892c <_dtoa_r+0x108>
 8008a3e:	2320      	movs	r3, #32
 8008a40:	9802      	ldr	r0, [sp, #8]
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	4098      	lsls	r0, r3
 8008a46:	e7f2      	b.n	8008a2e <_dtoa_r+0x20a>
 8008a48:	9015      	str	r0, [sp, #84]	; 0x54
 8008a4a:	e7b8      	b.n	80089be <_dtoa_r+0x19a>
 8008a4c:	9b08      	ldr	r3, [sp, #32]
 8008a4e:	9a02      	ldr	r2, [sp, #8]
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	9308      	str	r3, [sp, #32]
 8008a54:	4253      	negs	r3, r2
 8008a56:	930e      	str	r3, [sp, #56]	; 0x38
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9314      	str	r3, [sp, #80]	; 0x50
 8008a5c:	e7c7      	b.n	80089ee <_dtoa_r+0x1ca>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc36      	bgt.n	8008ad6 <_dtoa_r+0x2b2>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a6e:	9306      	str	r3, [sp, #24]
 8008a70:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a72:	e00d      	b.n	8008a90 <_dtoa_r+0x26c>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7f3      	b.n	8008a60 <_dtoa_r+0x23c>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a7e:	4694      	mov	ip, r2
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	4463      	add	r3, ip
 8008a84:	930c      	str	r3, [sp, #48]	; 0x30
 8008a86:	3301      	adds	r3, #1
 8008a88:	9306      	str	r3, [sp, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	dc00      	bgt.n	8008a90 <_dtoa_r+0x26c>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	2200      	movs	r2, #0
 8008a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a94:	6042      	str	r2, [r0, #4]
 8008a96:	3204      	adds	r2, #4
 8008a98:	0015      	movs	r5, r2
 8008a9a:	3514      	adds	r5, #20
 8008a9c:	6841      	ldr	r1, [r0, #4]
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	d91d      	bls.n	8008ade <_dtoa_r+0x2ba>
 8008aa2:	0038      	movs	r0, r7
 8008aa4:	f000 fcfe 	bl	80094a4 <_Balloc>
 8008aa8:	9005      	str	r0, [sp, #20]
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d11b      	bne.n	8008ae6 <_dtoa_r+0x2c2>
 8008aae:	21d5      	movs	r1, #213	; 0xd5
 8008ab0:	0002      	movs	r2, r0
 8008ab2:	4b3c      	ldr	r3, [pc, #240]	; (8008ba4 <_dtoa_r+0x380>)
 8008ab4:	0049      	lsls	r1, r1, #1
 8008ab6:	e6ca      	b.n	800884e <_dtoa_r+0x2a>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7de      	b.n	8008a7a <_dtoa_r+0x256>
 8008abc:	2300      	movs	r3, #0
 8008abe:	940f      	str	r4, [sp, #60]	; 0x3c
 8008ac0:	9322      	str	r3, [sp, #136]	; 0x88
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac6:	9306      	str	r3, [sp, #24]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	3313      	adds	r3, #19
 8008acc:	e7d0      	b.n	8008a70 <_dtoa_r+0x24c>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ad2:	3b02      	subs	r3, #2
 8008ad4:	e7f6      	b.n	8008ac4 <_dtoa_r+0x2a0>
 8008ad6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8008ada:	9306      	str	r3, [sp, #24]
 8008adc:	e7d8      	b.n	8008a90 <_dtoa_r+0x26c>
 8008ade:	3101      	adds	r1, #1
 8008ae0:	6041      	str	r1, [r0, #4]
 8008ae2:	0052      	lsls	r2, r2, #1
 8008ae4:	e7d8      	b.n	8008a98 <_dtoa_r+0x274>
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	9a05      	ldr	r2, [sp, #20]
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b0e      	cmp	r3, #14
 8008af0:	d900      	bls.n	8008af4 <_dtoa_r+0x2d0>
 8008af2:	e0eb      	b.n	8008ccc <_dtoa_r+0x4a8>
 8008af4:	2c00      	cmp	r4, #0
 8008af6:	d100      	bne.n	8008afa <_dtoa_r+0x2d6>
 8008af8:	e0e8      	b.n	8008ccc <_dtoa_r+0x4a8>
 8008afa:	9b02      	ldr	r3, [sp, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dd68      	ble.n	8008bd2 <_dtoa_r+0x3ae>
 8008b00:	001a      	movs	r2, r3
 8008b02:	210f      	movs	r1, #15
 8008b04:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <_dtoa_r+0x370>)
 8008b06:	400a      	ands	r2, r1
 8008b08:	00d2      	lsls	r2, r2, #3
 8008b0a:	189b      	adds	r3, r3, r2
 8008b0c:	681d      	ldr	r5, [r3, #0]
 8008b0e:	685e      	ldr	r6, [r3, #4]
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	111c      	asrs	r4, r3, #4
 8008b14:	2302      	movs	r3, #2
 8008b16:	9310      	str	r3, [sp, #64]	; 0x40
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	05db      	lsls	r3, r3, #23
 8008b1c:	d50b      	bpl.n	8008b36 <_dtoa_r+0x312>
 8008b1e:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <_dtoa_r+0x384>)
 8008b20:	400c      	ands	r4, r1
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b2a:	f7f8 fb4f 	bl	80011cc <__aeabi_ddiv>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	900a      	str	r0, [sp, #40]	; 0x28
 8008b32:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b34:	9310      	str	r3, [sp, #64]	; 0x40
 8008b36:	4b1c      	ldr	r3, [pc, #112]	; (8008ba8 <_dtoa_r+0x384>)
 8008b38:	9307      	str	r3, [sp, #28]
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d136      	bne.n	8008bac <_dtoa_r+0x388>
 8008b3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b42:	002a      	movs	r2, r5
 8008b44:	0033      	movs	r3, r6
 8008b46:	f7f8 fb41 	bl	80011cc <__aeabi_ddiv>
 8008b4a:	900a      	str	r0, [sp, #40]	; 0x28
 8008b4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b4e:	e05c      	b.n	8008c0a <_dtoa_r+0x3e6>
 8008b50:	0800b591 	.word	0x0800b591
 8008b54:	0800b5a8 	.word	0x0800b5a8
 8008b58:	7ff00000 	.word	0x7ff00000
 8008b5c:	0000270f 	.word	0x0000270f
 8008b60:	0800b58d 	.word	0x0800b58d
 8008b64:	0800b590 	.word	0x0800b590
 8008b68:	0800b560 	.word	0x0800b560
 8008b6c:	0800b561 	.word	0x0800b561
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	fffffc01 	.word	0xfffffc01
 8008b78:	3ff80000 	.word	0x3ff80000
 8008b7c:	636f4361 	.word	0x636f4361
 8008b80:	3fd287a7 	.word	0x3fd287a7
 8008b84:	8b60c8b3 	.word	0x8b60c8b3
 8008b88:	3fc68a28 	.word	0x3fc68a28
 8008b8c:	509f79fb 	.word	0x509f79fb
 8008b90:	3fd34413 	.word	0x3fd34413
 8008b94:	0800b6a0 	.word	0x0800b6a0
 8008b98:	00000432 	.word	0x00000432
 8008b9c:	00000412 	.word	0x00000412
 8008ba0:	fe100000 	.word	0xfe100000
 8008ba4:	0800b607 	.word	0x0800b607
 8008ba8:	0800b678 	.word	0x0800b678
 8008bac:	2301      	movs	r3, #1
 8008bae:	421c      	tst	r4, r3
 8008bb0:	d00b      	beq.n	8008bca <_dtoa_r+0x3a6>
 8008bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bb4:	0028      	movs	r0, r5
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8008bba:	9b07      	ldr	r3, [sp, #28]
 8008bbc:	0031      	movs	r1, r6
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f7f8 ff09 	bl	80019d8 <__aeabi_dmul>
 8008bc6:	0005      	movs	r5, r0
 8008bc8:	000e      	movs	r6, r1
 8008bca:	9b07      	ldr	r3, [sp, #28]
 8008bcc:	1064      	asrs	r4, r4, #1
 8008bce:	3308      	adds	r3, #8
 8008bd0:	e7b2      	b.n	8008b38 <_dtoa_r+0x314>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d016      	beq.n	8008c0a <_dtoa_r+0x3e6>
 8008bdc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008be0:	425c      	negs	r4, r3
 8008be2:	230f      	movs	r3, #15
 8008be4:	4ab5      	ldr	r2, [pc, #724]	; (8008ebc <_dtoa_r+0x698>)
 8008be6:	4023      	ands	r3, r4
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	18d3      	adds	r3, r2, r3
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f7f8 fef2 	bl	80019d8 <__aeabi_dmul>
 8008bf4:	2601      	movs	r6, #1
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	900a      	str	r0, [sp, #40]	; 0x28
 8008bfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8008bfc:	4db0      	ldr	r5, [pc, #704]	; (8008ec0 <_dtoa_r+0x69c>)
 8008bfe:	1124      	asrs	r4, r4, #4
 8008c00:	2c00      	cmp	r4, #0
 8008c02:	d000      	beq.n	8008c06 <_dtoa_r+0x3e2>
 8008c04:	e094      	b.n	8008d30 <_dtoa_r+0x50c>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d19f      	bne.n	8008b4a <_dtoa_r+0x326>
 8008c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d100      	bne.n	8008c12 <_dtoa_r+0x3ee>
 8008c10:	e09b      	b.n	8008d4a <_dtoa_r+0x526>
 8008c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c16:	2200      	movs	r2, #0
 8008c18:	0020      	movs	r0, r4
 8008c1a:	0029      	movs	r1, r5
 8008c1c:	4ba9      	ldr	r3, [pc, #676]	; (8008ec4 <_dtoa_r+0x6a0>)
 8008c1e:	f7f7 fc19 	bl	8000454 <__aeabi_dcmplt>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d100      	bne.n	8008c28 <_dtoa_r+0x404>
 8008c26:	e090      	b.n	8008d4a <_dtoa_r+0x526>
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d100      	bne.n	8008c30 <_dtoa_r+0x40c>
 8008c2e:	e08c      	b.n	8008d4a <_dtoa_r+0x526>
 8008c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dd46      	ble.n	8008cc4 <_dtoa_r+0x4a0>
 8008c36:	9b02      	ldr	r3, [sp, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	0020      	movs	r0, r4
 8008c3c:	0029      	movs	r1, r5
 8008c3e:	1e5e      	subs	r6, r3, #1
 8008c40:	4ba1      	ldr	r3, [pc, #644]	; (8008ec8 <_dtoa_r+0x6a4>)
 8008c42:	f7f8 fec9 	bl	80019d8 <__aeabi_dmul>
 8008c46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c48:	900a      	str	r0, [sp, #40]	; 0x28
 8008c4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c58:	9307      	str	r3, [sp, #28]
 8008c5a:	f7f9 fd0f 	bl	800267c <__aeabi_i2d>
 8008c5e:	0022      	movs	r2, r4
 8008c60:	002b      	movs	r3, r5
 8008c62:	f7f8 feb9 	bl	80019d8 <__aeabi_dmul>
 8008c66:	2200      	movs	r2, #0
 8008c68:	4b98      	ldr	r3, [pc, #608]	; (8008ecc <_dtoa_r+0x6a8>)
 8008c6a:	f7f7 ff45 	bl	8000af8 <__aeabi_dadd>
 8008c6e:	9010      	str	r0, [sp, #64]	; 0x40
 8008c70:	9111      	str	r1, [sp, #68]	; 0x44
 8008c72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c76:	920a      	str	r2, [sp, #40]	; 0x28
 8008c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c7a:	4a95      	ldr	r2, [pc, #596]	; (8008ed0 <_dtoa_r+0x6ac>)
 8008c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c7e:	4694      	mov	ip, r2
 8008c80:	4463      	add	r3, ip
 8008c82:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c86:	9b07      	ldr	r3, [sp, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d161      	bne.n	8008d50 <_dtoa_r+0x52c>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	0020      	movs	r0, r4
 8008c90:	0029      	movs	r1, r5
 8008c92:	4b90      	ldr	r3, [pc, #576]	; (8008ed4 <_dtoa_r+0x6b0>)
 8008c94:	f7f9 f90c 	bl	8001eb0 <__aeabi_dsub>
 8008c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c9c:	0004      	movs	r4, r0
 8008c9e:	000d      	movs	r5, r1
 8008ca0:	f7f7 fbec 	bl	800047c <__aeabi_dcmpgt>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d000      	beq.n	8008caa <_dtoa_r+0x486>
 8008ca8:	e2b5      	b.n	8009216 <_dtoa_r+0x9f2>
 8008caa:	488b      	ldr	r0, [pc, #556]	; (8008ed8 <_dtoa_r+0x6b4>)
 8008cac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cae:	4684      	mov	ip, r0
 8008cb0:	4461      	add	r1, ip
 8008cb2:	000b      	movs	r3, r1
 8008cb4:	0020      	movs	r0, r4
 8008cb6:	0029      	movs	r1, r5
 8008cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cba:	f7f7 fbcb 	bl	8000454 <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d000      	beq.n	8008cc4 <_dtoa_r+0x4a0>
 8008cc2:	e2a5      	b.n	8009210 <_dtoa_r+0x9ec>
 8008cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cc6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cca:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	da00      	bge.n	8008cd4 <_dtoa_r+0x4b0>
 8008cd2:	e171      	b.n	8008fb8 <_dtoa_r+0x794>
 8008cd4:	9a02      	ldr	r2, [sp, #8]
 8008cd6:	2a0e      	cmp	r2, #14
 8008cd8:	dd00      	ble.n	8008cdc <_dtoa_r+0x4b8>
 8008cda:	e16d      	b.n	8008fb8 <_dtoa_r+0x794>
 8008cdc:	4b77      	ldr	r3, [pc, #476]	; (8008ebc <_dtoa_r+0x698>)
 8008cde:	00d2      	lsls	r2, r2, #3
 8008ce0:	189b      	adds	r3, r3, r2
 8008ce2:	685c      	ldr	r4, [r3, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9308      	str	r3, [sp, #32]
 8008ce8:	9409      	str	r4, [sp, #36]	; 0x24
 8008cea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	db00      	blt.n	8008cf2 <_dtoa_r+0x4ce>
 8008cf0:	e0f6      	b.n	8008ee0 <_dtoa_r+0x6bc>
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dd00      	ble.n	8008cfa <_dtoa_r+0x4d6>
 8008cf8:	e0f2      	b.n	8008ee0 <_dtoa_r+0x6bc>
 8008cfa:	d000      	beq.n	8008cfe <_dtoa_r+0x4da>
 8008cfc:	e288      	b.n	8009210 <_dtoa_r+0x9ec>
 8008cfe:	9808      	ldr	r0, [sp, #32]
 8008d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d02:	2200      	movs	r2, #0
 8008d04:	4b73      	ldr	r3, [pc, #460]	; (8008ed4 <_dtoa_r+0x6b0>)
 8008d06:	f7f8 fe67 	bl	80019d8 <__aeabi_dmul>
 8008d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0e:	f7f7 fbbf 	bl	8000490 <__aeabi_dcmpge>
 8008d12:	9e06      	ldr	r6, [sp, #24]
 8008d14:	0035      	movs	r5, r6
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d000      	beq.n	8008d1c <_dtoa_r+0x4f8>
 8008d1a:	e25f      	b.n	80091dc <_dtoa_r+0x9b8>
 8008d1c:	9b05      	ldr	r3, [sp, #20]
 8008d1e:	9a05      	ldr	r2, [sp, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	9307      	str	r3, [sp, #28]
 8008d24:	2331      	movs	r3, #49	; 0x31
 8008d26:	7013      	strb	r3, [r2, #0]
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	9302      	str	r3, [sp, #8]
 8008d2e:	e25a      	b.n	80091e6 <_dtoa_r+0x9c2>
 8008d30:	4234      	tst	r4, r6
 8008d32:	d007      	beq.n	8008d44 <_dtoa_r+0x520>
 8008d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d36:	3301      	adds	r3, #1
 8008d38:	9310      	str	r3, [sp, #64]	; 0x40
 8008d3a:	682a      	ldr	r2, [r5, #0]
 8008d3c:	686b      	ldr	r3, [r5, #4]
 8008d3e:	f7f8 fe4b 	bl	80019d8 <__aeabi_dmul>
 8008d42:	0033      	movs	r3, r6
 8008d44:	1064      	asrs	r4, r4, #1
 8008d46:	3508      	adds	r5, #8
 8008d48:	e75a      	b.n	8008c00 <_dtoa_r+0x3dc>
 8008d4a:	9e02      	ldr	r6, [sp, #8]
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	e780      	b.n	8008c52 <_dtoa_r+0x42e>
 8008d50:	9b07      	ldr	r3, [sp, #28]
 8008d52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d54:	1e5a      	subs	r2, r3, #1
 8008d56:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <_dtoa_r+0x698>)
 8008d58:	00d2      	lsls	r2, r2, #3
 8008d5a:	189b      	adds	r3, r3, r2
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2900      	cmp	r1, #0
 8008d62:	d051      	beq.n	8008e08 <_dtoa_r+0x5e4>
 8008d64:	2000      	movs	r0, #0
 8008d66:	495d      	ldr	r1, [pc, #372]	; (8008edc <_dtoa_r+0x6b8>)
 8008d68:	f7f8 fa30 	bl	80011cc <__aeabi_ddiv>
 8008d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d70:	f7f9 f89e 	bl	8001eb0 <__aeabi_dsub>
 8008d74:	9a05      	ldr	r2, [sp, #20]
 8008d76:	9b05      	ldr	r3, [sp, #20]
 8008d78:	4694      	mov	ip, r2
 8008d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	900a      	str	r0, [sp, #40]	; 0x28
 8008d80:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d82:	4463      	add	r3, ip
 8008d84:	9319      	str	r3, [sp, #100]	; 0x64
 8008d86:	0029      	movs	r1, r5
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f7f9 fc41 	bl	8002610 <__aeabi_d2iz>
 8008d8e:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d90:	f7f9 fc74 	bl	800267c <__aeabi_i2d>
 8008d94:	0002      	movs	r2, r0
 8008d96:	000b      	movs	r3, r1
 8008d98:	0020      	movs	r0, r4
 8008d9a:	0029      	movs	r1, r5
 8008d9c:	f7f9 f888 	bl	8001eb0 <__aeabi_dsub>
 8008da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008da2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008da4:	3301      	adds	r3, #1
 8008da6:	9307      	str	r3, [sp, #28]
 8008da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008daa:	0004      	movs	r4, r0
 8008dac:	3330      	adds	r3, #48	; 0x30
 8008dae:	7013      	strb	r3, [r2, #0]
 8008db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db4:	000d      	movs	r5, r1
 8008db6:	f7f7 fb4d 	bl	8000454 <__aeabi_dcmplt>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d175      	bne.n	8008eaa <_dtoa_r+0x686>
 8008dbe:	0022      	movs	r2, r4
 8008dc0:	002b      	movs	r3, r5
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	493f      	ldr	r1, [pc, #252]	; (8008ec4 <_dtoa_r+0x6a0>)
 8008dc6:	f7f9 f873 	bl	8001eb0 <__aeabi_dsub>
 8008dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dce:	f7f7 fb41 	bl	8000454 <__aeabi_dcmplt>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d000      	beq.n	8008dd8 <_dtoa_r+0x5b4>
 8008dd6:	e0d1      	b.n	8008f7c <_dtoa_r+0x758>
 8008dd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dda:	9a07      	ldr	r2, [sp, #28]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d100      	bne.n	8008de2 <_dtoa_r+0x5be>
 8008de0:	e770      	b.n	8008cc4 <_dtoa_r+0x4a0>
 8008de2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008de6:	2200      	movs	r2, #0
 8008de8:	4b37      	ldr	r3, [pc, #220]	; (8008ec8 <_dtoa_r+0x6a4>)
 8008dea:	f7f8 fdf5 	bl	80019d8 <__aeabi_dmul>
 8008dee:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <_dtoa_r+0x6a4>)
 8008df0:	900a      	str	r0, [sp, #40]	; 0x28
 8008df2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008df4:	2200      	movs	r2, #0
 8008df6:	0020      	movs	r0, r4
 8008df8:	0029      	movs	r1, r5
 8008dfa:	f7f8 fded 	bl	80019d8 <__aeabi_dmul>
 8008dfe:	9b07      	ldr	r3, [sp, #28]
 8008e00:	0004      	movs	r4, r0
 8008e02:	000d      	movs	r5, r1
 8008e04:	9310      	str	r3, [sp, #64]	; 0x40
 8008e06:	e7be      	b.n	8008d86 <_dtoa_r+0x562>
 8008e08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e0c:	f7f8 fde4 	bl	80019d8 <__aeabi_dmul>
 8008e10:	9a05      	ldr	r2, [sp, #20]
 8008e12:	9b05      	ldr	r3, [sp, #20]
 8008e14:	4694      	mov	ip, r2
 8008e16:	930a      	str	r3, [sp, #40]	; 0x28
 8008e18:	9b07      	ldr	r3, [sp, #28]
 8008e1a:	9010      	str	r0, [sp, #64]	; 0x40
 8008e1c:	9111      	str	r1, [sp, #68]	; 0x44
 8008e1e:	4463      	add	r3, ip
 8008e20:	9319      	str	r3, [sp, #100]	; 0x64
 8008e22:	0029      	movs	r1, r5
 8008e24:	0020      	movs	r0, r4
 8008e26:	f7f9 fbf3 	bl	8002610 <__aeabi_d2iz>
 8008e2a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e2c:	f7f9 fc26 	bl	800267c <__aeabi_i2d>
 8008e30:	0002      	movs	r2, r0
 8008e32:	000b      	movs	r3, r1
 8008e34:	0020      	movs	r0, r4
 8008e36:	0029      	movs	r1, r5
 8008e38:	f7f9 f83a 	bl	8001eb0 <__aeabi_dsub>
 8008e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e40:	3330      	adds	r3, #48	; 0x30
 8008e42:	7013      	strb	r3, [r2, #0]
 8008e44:	0013      	movs	r3, r2
 8008e46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e48:	3301      	adds	r3, #1
 8008e4a:	0004      	movs	r4, r0
 8008e4c:	000d      	movs	r5, r1
 8008e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d12c      	bne.n	8008eae <_dtoa_r+0x68a>
 8008e54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e58:	9a05      	ldr	r2, [sp, #20]
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	4694      	mov	ip, r2
 8008e5e:	4463      	add	r3, ip
 8008e60:	2200      	movs	r2, #0
 8008e62:	9307      	str	r3, [sp, #28]
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <_dtoa_r+0x6b8>)
 8008e66:	f7f7 fe47 	bl	8000af8 <__aeabi_dadd>
 8008e6a:	0002      	movs	r2, r0
 8008e6c:	000b      	movs	r3, r1
 8008e6e:	0020      	movs	r0, r4
 8008e70:	0029      	movs	r1, r5
 8008e72:	f7f7 fb03 	bl	800047c <__aeabi_dcmpgt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d000      	beq.n	8008e7c <_dtoa_r+0x658>
 8008e7a:	e07f      	b.n	8008f7c <_dtoa_r+0x758>
 8008e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e80:	2000      	movs	r0, #0
 8008e82:	4916      	ldr	r1, [pc, #88]	; (8008edc <_dtoa_r+0x6b8>)
 8008e84:	f7f9 f814 	bl	8001eb0 <__aeabi_dsub>
 8008e88:	0002      	movs	r2, r0
 8008e8a:	000b      	movs	r3, r1
 8008e8c:	0020      	movs	r0, r4
 8008e8e:	0029      	movs	r1, r5
 8008e90:	f7f7 fae0 	bl	8000454 <__aeabi_dcmplt>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d100      	bne.n	8008e9a <_dtoa_r+0x676>
 8008e98:	e714      	b.n	8008cc4 <_dtoa_r+0x4a0>
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	001a      	movs	r2, r3
 8008e9e:	3a01      	subs	r2, #1
 8008ea0:	9207      	str	r2, [sp, #28]
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	2a30      	cmp	r2, #48	; 0x30
 8008ea6:	d0f8      	beq.n	8008e9a <_dtoa_r+0x676>
 8008ea8:	9307      	str	r3, [sp, #28]
 8008eaa:	9602      	str	r6, [sp, #8]
 8008eac:	e054      	b.n	8008f58 <_dtoa_r+0x734>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <_dtoa_r+0x6a4>)
 8008eb2:	f7f8 fd91 	bl	80019d8 <__aeabi_dmul>
 8008eb6:	0004      	movs	r4, r0
 8008eb8:	000d      	movs	r5, r1
 8008eba:	e7b2      	b.n	8008e22 <_dtoa_r+0x5fe>
 8008ebc:	0800b6a0 	.word	0x0800b6a0
 8008ec0:	0800b678 	.word	0x0800b678
 8008ec4:	3ff00000 	.word	0x3ff00000
 8008ec8:	40240000 	.word	0x40240000
 8008ecc:	401c0000 	.word	0x401c0000
 8008ed0:	fcc00000 	.word	0xfcc00000
 8008ed4:	40140000 	.word	0x40140000
 8008ed8:	7cc00000 	.word	0x7cc00000
 8008edc:	3fe00000 	.word	0x3fe00000
 8008ee0:	9b06      	ldr	r3, [sp, #24]
 8008ee2:	9e05      	ldr	r6, [sp, #20]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	199b      	adds	r3, r3, r6
 8008ee8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008eec:	930a      	str	r3, [sp, #40]	; 0x28
 8008eee:	9a08      	ldr	r2, [sp, #32]
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	0020      	movs	r0, r4
 8008ef4:	0029      	movs	r1, r5
 8008ef6:	f7f8 f969 	bl	80011cc <__aeabi_ddiv>
 8008efa:	f7f9 fb89 	bl	8002610 <__aeabi_d2iz>
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	f7f9 fbbc 	bl	800267c <__aeabi_i2d>
 8008f04:	9a08      	ldr	r2, [sp, #32]
 8008f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f08:	f7f8 fd66 	bl	80019d8 <__aeabi_dmul>
 8008f0c:	0002      	movs	r2, r0
 8008f0e:	000b      	movs	r3, r1
 8008f10:	0020      	movs	r0, r4
 8008f12:	0029      	movs	r1, r5
 8008f14:	f7f8 ffcc 	bl	8001eb0 <__aeabi_dsub>
 8008f18:	0033      	movs	r3, r6
 8008f1a:	9a06      	ldr	r2, [sp, #24]
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	3230      	adds	r2, #48	; 0x30
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f24:	9607      	str	r6, [sp, #28]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d139      	bne.n	8008f9e <_dtoa_r+0x77a>
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	000b      	movs	r3, r1
 8008f2e:	f7f7 fde3 	bl	8000af8 <__aeabi_dadd>
 8008f32:	9a08      	ldr	r2, [sp, #32]
 8008f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f36:	0004      	movs	r4, r0
 8008f38:	000d      	movs	r5, r1
 8008f3a:	f7f7 fa9f 	bl	800047c <__aeabi_dcmpgt>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d11b      	bne.n	8008f7a <_dtoa_r+0x756>
 8008f42:	9a08      	ldr	r2, [sp, #32]
 8008f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f46:	0020      	movs	r0, r4
 8008f48:	0029      	movs	r1, r5
 8008f4a:	f7f7 fa7d 	bl	8000448 <__aeabi_dcmpeq>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d002      	beq.n	8008f58 <_dtoa_r+0x734>
 8008f52:	9b06      	ldr	r3, [sp, #24]
 8008f54:	07db      	lsls	r3, r3, #31
 8008f56:	d410      	bmi.n	8008f7a <_dtoa_r+0x756>
 8008f58:	0038      	movs	r0, r7
 8008f5a:	9904      	ldr	r1, [sp, #16]
 8008f5c:	f000 fae6 	bl	800952c <_Bfree>
 8008f60:	2300      	movs	r3, #0
 8008f62:	9a07      	ldr	r2, [sp, #28]
 8008f64:	9802      	ldr	r0, [sp, #8]
 8008f66:	7013      	strb	r3, [r2, #0]
 8008f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	6018      	str	r0, [r3, #0]
 8008f6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d100      	bne.n	8008f76 <_dtoa_r+0x752>
 8008f74:	e4a3      	b.n	80088be <_dtoa_r+0x9a>
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e4a1      	b.n	80088be <_dtoa_r+0x9a>
 8008f7a:	9e02      	ldr	r6, [sp, #8]
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	2a39      	cmp	r2, #57	; 0x39
 8008f86:	d106      	bne.n	8008f96 <_dtoa_r+0x772>
 8008f88:	9a05      	ldr	r2, [sp, #20]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d1f7      	bne.n	8008f7e <_dtoa_r+0x75a>
 8008f8e:	2230      	movs	r2, #48	; 0x30
 8008f90:	9905      	ldr	r1, [sp, #20]
 8008f92:	3601      	adds	r6, #1
 8008f94:	700a      	strb	r2, [r1, #0]
 8008f96:	781a      	ldrb	r2, [r3, #0]
 8008f98:	3201      	adds	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	e785      	b.n	8008eaa <_dtoa_r+0x686>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4bad      	ldr	r3, [pc, #692]	; (8009258 <_dtoa_r+0xa34>)
 8008fa2:	f7f8 fd19 	bl	80019d8 <__aeabi_dmul>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	0004      	movs	r4, r0
 8008fac:	000d      	movs	r5, r1
 8008fae:	f7f7 fa4b 	bl	8000448 <__aeabi_dcmpeq>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d09b      	beq.n	8008eee <_dtoa_r+0x6ca>
 8008fb6:	e7cf      	b.n	8008f58 <_dtoa_r+0x734>
 8008fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	d100      	bne.n	8008fc0 <_dtoa_r+0x79c>
 8008fbe:	e082      	b.n	80090c6 <_dtoa_r+0x8a2>
 8008fc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fc2:	2a01      	cmp	r2, #1
 8008fc4:	dc66      	bgt.n	8009094 <_dtoa_r+0x870>
 8008fc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	d05f      	beq.n	800908c <_dtoa_r+0x868>
 8008fcc:	4aa3      	ldr	r2, [pc, #652]	; (800925c <_dtoa_r+0xa38>)
 8008fce:	189b      	adds	r3, r3, r2
 8008fd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008fd2:	9c08      	ldr	r4, [sp, #32]
 8008fd4:	9a08      	ldr	r2, [sp, #32]
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	18d2      	adds	r2, r2, r3
 8008fda:	9208      	str	r2, [sp, #32]
 8008fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fde:	0038      	movs	r0, r7
 8008fe0:	18d3      	adds	r3, r2, r3
 8008fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fe4:	f000 fb52 	bl	800968c <__i2b>
 8008fe8:	0005      	movs	r5, r0
 8008fea:	2c00      	cmp	r4, #0
 8008fec:	dd0e      	ble.n	800900c <_dtoa_r+0x7e8>
 8008fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dd0b      	ble.n	800900c <_dtoa_r+0x7e8>
 8008ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ff6:	0023      	movs	r3, r4
 8008ff8:	4294      	cmp	r4, r2
 8008ffa:	dd00      	ble.n	8008ffe <_dtoa_r+0x7da>
 8008ffc:	0013      	movs	r3, r2
 8008ffe:	9a08      	ldr	r2, [sp, #32]
 8009000:	1ae4      	subs	r4, r4, r3
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	9208      	str	r2, [sp, #32]
 8009006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	930d      	str	r3, [sp, #52]	; 0x34
 800900c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01f      	beq.n	8009052 <_dtoa_r+0x82e>
 8009012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d05a      	beq.n	80090ce <_dtoa_r+0x8aa>
 8009018:	2e00      	cmp	r6, #0
 800901a:	dd11      	ble.n	8009040 <_dtoa_r+0x81c>
 800901c:	0029      	movs	r1, r5
 800901e:	0032      	movs	r2, r6
 8009020:	0038      	movs	r0, r7
 8009022:	f000 fbf9 	bl	8009818 <__pow5mult>
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	0001      	movs	r1, r0
 800902a:	0005      	movs	r5, r0
 800902c:	0038      	movs	r0, r7
 800902e:	f000 fb43 	bl	80096b8 <__multiply>
 8009032:	9904      	ldr	r1, [sp, #16]
 8009034:	9007      	str	r0, [sp, #28]
 8009036:	0038      	movs	r0, r7
 8009038:	f000 fa78 	bl	800952c <_Bfree>
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009042:	1b9a      	subs	r2, r3, r6
 8009044:	42b3      	cmp	r3, r6
 8009046:	d004      	beq.n	8009052 <_dtoa_r+0x82e>
 8009048:	0038      	movs	r0, r7
 800904a:	9904      	ldr	r1, [sp, #16]
 800904c:	f000 fbe4 	bl	8009818 <__pow5mult>
 8009050:	9004      	str	r0, [sp, #16]
 8009052:	2101      	movs	r1, #1
 8009054:	0038      	movs	r0, r7
 8009056:	f000 fb19 	bl	800968c <__i2b>
 800905a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800905c:	0006      	movs	r6, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	dd37      	ble.n	80090d2 <_dtoa_r+0x8ae>
 8009062:	001a      	movs	r2, r3
 8009064:	0001      	movs	r1, r0
 8009066:	0038      	movs	r0, r7
 8009068:	f000 fbd6 	bl	8009818 <__pow5mult>
 800906c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800906e:	0006      	movs	r6, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	dd33      	ble.n	80090dc <_dtoa_r+0x8b8>
 8009074:	2300      	movs	r3, #0
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	6933      	ldr	r3, [r6, #16]
 800907a:	3303      	adds	r3, #3
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	18f3      	adds	r3, r6, r3
 8009080:	6858      	ldr	r0, [r3, #4]
 8009082:	f000 fabb 	bl	80095fc <__hi0bits>
 8009086:	2320      	movs	r3, #32
 8009088:	1a18      	subs	r0, r3, r0
 800908a:	e03f      	b.n	800910c <_dtoa_r+0x8e8>
 800908c:	2336      	movs	r3, #54	; 0x36
 800908e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	e79d      	b.n	8008fd0 <_dtoa_r+0x7ac>
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	1e5e      	subs	r6, r3, #1
 8009098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800909a:	42b3      	cmp	r3, r6
 800909c:	db08      	blt.n	80090b0 <_dtoa_r+0x88c>
 800909e:	1b9e      	subs	r6, r3, r6
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da0c      	bge.n	80090c0 <_dtoa_r+0x89c>
 80090a6:	9b08      	ldr	r3, [sp, #32]
 80090a8:	9a06      	ldr	r2, [sp, #24]
 80090aa:	1a9c      	subs	r4, r3, r2
 80090ac:	2300      	movs	r3, #0
 80090ae:	e791      	b.n	8008fd4 <_dtoa_r+0x7b0>
 80090b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090b4:	1af3      	subs	r3, r6, r3
 80090b6:	18d3      	adds	r3, r2, r3
 80090b8:	960e      	str	r6, [sp, #56]	; 0x38
 80090ba:	9314      	str	r3, [sp, #80]	; 0x50
 80090bc:	2600      	movs	r6, #0
 80090be:	e7ef      	b.n	80090a0 <_dtoa_r+0x87c>
 80090c0:	9c08      	ldr	r4, [sp, #32]
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	e786      	b.n	8008fd4 <_dtoa_r+0x7b0>
 80090c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80090c8:	9c08      	ldr	r4, [sp, #32]
 80090ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090cc:	e78d      	b.n	8008fea <_dtoa_r+0x7c6>
 80090ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d0:	e7ba      	b.n	8009048 <_dtoa_r+0x824>
 80090d2:	2300      	movs	r3, #0
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090d8:	2b01      	cmp	r3, #1
 80090da:	dc13      	bgt.n	8009104 <_dtoa_r+0x8e0>
 80090dc:	2300      	movs	r3, #0
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10e      	bne.n	8009104 <_dtoa_r+0x8e0>
 80090e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e8:	031b      	lsls	r3, r3, #12
 80090ea:	d10b      	bne.n	8009104 <_dtoa_r+0x8e0>
 80090ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80090ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f0:	4213      	tst	r3, r2
 80090f2:	d007      	beq.n	8009104 <_dtoa_r+0x8e0>
 80090f4:	9b08      	ldr	r3, [sp, #32]
 80090f6:	3301      	adds	r3, #1
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fc:	3301      	adds	r3, #1
 80090fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009100:	2301      	movs	r3, #1
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009106:	2001      	movs	r0, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1b5      	bne.n	8009078 <_dtoa_r+0x854>
 800910c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800910e:	221f      	movs	r2, #31
 8009110:	1818      	adds	r0, r3, r0
 8009112:	0003      	movs	r3, r0
 8009114:	4013      	ands	r3, r2
 8009116:	4210      	tst	r0, r2
 8009118:	d046      	beq.n	80091a8 <_dtoa_r+0x984>
 800911a:	3201      	adds	r2, #1
 800911c:	1ad2      	subs	r2, r2, r3
 800911e:	2a04      	cmp	r2, #4
 8009120:	dd3f      	ble.n	80091a2 <_dtoa_r+0x97e>
 8009122:	221c      	movs	r2, #28
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	9a08      	ldr	r2, [sp, #32]
 8009128:	18e4      	adds	r4, r4, r3
 800912a:	18d2      	adds	r2, r2, r3
 800912c:	9208      	str	r2, [sp, #32]
 800912e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	930d      	str	r3, [sp, #52]	; 0x34
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd05      	ble.n	8009146 <_dtoa_r+0x922>
 800913a:	001a      	movs	r2, r3
 800913c:	0038      	movs	r0, r7
 800913e:	9904      	ldr	r1, [sp, #16]
 8009140:	f000 fbc6 	bl	80098d0 <__lshift>
 8009144:	9004      	str	r0, [sp, #16]
 8009146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	dd05      	ble.n	8009158 <_dtoa_r+0x934>
 800914c:	0031      	movs	r1, r6
 800914e:	001a      	movs	r2, r3
 8009150:	0038      	movs	r0, r7
 8009152:	f000 fbbd 	bl	80098d0 <__lshift>
 8009156:	0006      	movs	r6, r0
 8009158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800915a:	2b00      	cmp	r3, #0
 800915c:	d026      	beq.n	80091ac <_dtoa_r+0x988>
 800915e:	0031      	movs	r1, r6
 8009160:	9804      	ldr	r0, [sp, #16]
 8009162:	f000 fc25 	bl	80099b0 <__mcmp>
 8009166:	2800      	cmp	r0, #0
 8009168:	da20      	bge.n	80091ac <_dtoa_r+0x988>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	220a      	movs	r2, #10
 800916e:	3b01      	subs	r3, #1
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	0038      	movs	r0, r7
 8009174:	2300      	movs	r3, #0
 8009176:	9904      	ldr	r1, [sp, #16]
 8009178:	f000 f9fc 	bl	8009574 <__multadd>
 800917c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800917e:	9004      	str	r0, [sp, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d100      	bne.n	8009186 <_dtoa_r+0x962>
 8009184:	e160      	b.n	8009448 <_dtoa_r+0xc24>
 8009186:	2300      	movs	r3, #0
 8009188:	0029      	movs	r1, r5
 800918a:	220a      	movs	r2, #10
 800918c:	0038      	movs	r0, r7
 800918e:	f000 f9f1 	bl	8009574 <__multadd>
 8009192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009194:	0005      	movs	r5, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	dc47      	bgt.n	800922a <_dtoa_r+0xa06>
 800919a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800919c:	2b02      	cmp	r3, #2
 800919e:	dc0d      	bgt.n	80091bc <_dtoa_r+0x998>
 80091a0:	e043      	b.n	800922a <_dtoa_r+0xa06>
 80091a2:	2a04      	cmp	r2, #4
 80091a4:	d0c6      	beq.n	8009134 <_dtoa_r+0x910>
 80091a6:	0013      	movs	r3, r2
 80091a8:	331c      	adds	r3, #28
 80091aa:	e7bc      	b.n	8009126 <_dtoa_r+0x902>
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dc35      	bgt.n	800921e <_dtoa_r+0x9fa>
 80091b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	dd32      	ble.n	800921e <_dtoa_r+0x9fa>
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	930c      	str	r3, [sp, #48]	; 0x30
 80091bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <_dtoa_r+0x9b8>
 80091c2:	0031      	movs	r1, r6
 80091c4:	2205      	movs	r2, #5
 80091c6:	0038      	movs	r0, r7
 80091c8:	f000 f9d4 	bl	8009574 <__multadd>
 80091cc:	0006      	movs	r6, r0
 80091ce:	0001      	movs	r1, r0
 80091d0:	9804      	ldr	r0, [sp, #16]
 80091d2:	f000 fbed 	bl	80099b0 <__mcmp>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	dd00      	ble.n	80091dc <_dtoa_r+0x9b8>
 80091da:	e59f      	b.n	8008d1c <_dtoa_r+0x4f8>
 80091dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091de:	43db      	mvns	r3, r3
 80091e0:	9302      	str	r3, [sp, #8]
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	9307      	str	r3, [sp, #28]
 80091e6:	2400      	movs	r4, #0
 80091e8:	0031      	movs	r1, r6
 80091ea:	0038      	movs	r0, r7
 80091ec:	f000 f99e 	bl	800952c <_Bfree>
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	d100      	bne.n	80091f6 <_dtoa_r+0x9d2>
 80091f4:	e6b0      	b.n	8008f58 <_dtoa_r+0x734>
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d005      	beq.n	8009206 <_dtoa_r+0x9e2>
 80091fa:	42ac      	cmp	r4, r5
 80091fc:	d003      	beq.n	8009206 <_dtoa_r+0x9e2>
 80091fe:	0021      	movs	r1, r4
 8009200:	0038      	movs	r0, r7
 8009202:	f000 f993 	bl	800952c <_Bfree>
 8009206:	0029      	movs	r1, r5
 8009208:	0038      	movs	r0, r7
 800920a:	f000 f98f 	bl	800952c <_Bfree>
 800920e:	e6a3      	b.n	8008f58 <_dtoa_r+0x734>
 8009210:	2600      	movs	r6, #0
 8009212:	0035      	movs	r5, r6
 8009214:	e7e2      	b.n	80091dc <_dtoa_r+0x9b8>
 8009216:	9602      	str	r6, [sp, #8]
 8009218:	9e07      	ldr	r6, [sp, #28]
 800921a:	0035      	movs	r5, r6
 800921c:	e57e      	b.n	8008d1c <_dtoa_r+0x4f8>
 800921e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d100      	bne.n	8009226 <_dtoa_r+0xa02>
 8009224:	e0c8      	b.n	80093b8 <_dtoa_r+0xb94>
 8009226:	9b06      	ldr	r3, [sp, #24]
 8009228:	930c      	str	r3, [sp, #48]	; 0x30
 800922a:	2c00      	cmp	r4, #0
 800922c:	dd05      	ble.n	800923a <_dtoa_r+0xa16>
 800922e:	0029      	movs	r1, r5
 8009230:	0022      	movs	r2, r4
 8009232:	0038      	movs	r0, r7
 8009234:	f000 fb4c 	bl	80098d0 <__lshift>
 8009238:	0005      	movs	r5, r0
 800923a:	9b07      	ldr	r3, [sp, #28]
 800923c:	0028      	movs	r0, r5
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01f      	beq.n	8009282 <_dtoa_r+0xa5e>
 8009242:	0038      	movs	r0, r7
 8009244:	6869      	ldr	r1, [r5, #4]
 8009246:	f000 f92d 	bl	80094a4 <_Balloc>
 800924a:	1e04      	subs	r4, r0, #0
 800924c:	d10c      	bne.n	8009268 <_dtoa_r+0xa44>
 800924e:	0002      	movs	r2, r0
 8009250:	4b03      	ldr	r3, [pc, #12]	; (8009260 <_dtoa_r+0xa3c>)
 8009252:	4904      	ldr	r1, [pc, #16]	; (8009264 <_dtoa_r+0xa40>)
 8009254:	f7ff fafb 	bl	800884e <_dtoa_r+0x2a>
 8009258:	40240000 	.word	0x40240000
 800925c:	00000433 	.word	0x00000433
 8009260:	0800b607 	.word	0x0800b607
 8009264:	000002ea 	.word	0x000002ea
 8009268:	0029      	movs	r1, r5
 800926a:	692b      	ldr	r3, [r5, #16]
 800926c:	310c      	adds	r1, #12
 800926e:	1c9a      	adds	r2, r3, #2
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	300c      	adds	r0, #12
 8009274:	f000 f90d 	bl	8009492 <memcpy>
 8009278:	2201      	movs	r2, #1
 800927a:	0021      	movs	r1, r4
 800927c:	0038      	movs	r0, r7
 800927e:	f000 fb27 	bl	80098d0 <__lshift>
 8009282:	002c      	movs	r4, r5
 8009284:	0005      	movs	r5, r0
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	0031      	movs	r1, r6
 800928c:	9804      	ldr	r0, [sp, #16]
 800928e:	f7ff fa3d 	bl	800870c <quorem>
 8009292:	0003      	movs	r3, r0
 8009294:	0021      	movs	r1, r4
 8009296:	3330      	adds	r3, #48	; 0x30
 8009298:	900e      	str	r0, [sp, #56]	; 0x38
 800929a:	9804      	ldr	r0, [sp, #16]
 800929c:	9306      	str	r3, [sp, #24]
 800929e:	f000 fb87 	bl	80099b0 <__mcmp>
 80092a2:	002a      	movs	r2, r5
 80092a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80092a6:	0031      	movs	r1, r6
 80092a8:	0038      	movs	r0, r7
 80092aa:	f000 fb9d 	bl	80099e8 <__mdiff>
 80092ae:	68c3      	ldr	r3, [r0, #12]
 80092b0:	9007      	str	r0, [sp, #28]
 80092b2:	9310      	str	r3, [sp, #64]	; 0x40
 80092b4:	2301      	movs	r3, #1
 80092b6:	930d      	str	r3, [sp, #52]	; 0x34
 80092b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d104      	bne.n	80092c8 <_dtoa_r+0xaa4>
 80092be:	0001      	movs	r1, r0
 80092c0:	9804      	ldr	r0, [sp, #16]
 80092c2:	f000 fb75 	bl	80099b0 <__mcmp>
 80092c6:	900d      	str	r0, [sp, #52]	; 0x34
 80092c8:	0038      	movs	r0, r7
 80092ca:	9907      	ldr	r1, [sp, #28]
 80092cc:	f000 f92e 	bl	800952c <_Bfree>
 80092d0:	2301      	movs	r3, #1
 80092d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092d6:	4018      	ands	r0, r3
 80092d8:	9b08      	ldr	r3, [sp, #32]
 80092da:	3301      	adds	r3, #1
 80092dc:	9307      	str	r3, [sp, #28]
 80092de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092e0:	4313      	orrs	r3, r2
 80092e2:	4303      	orrs	r3, r0
 80092e4:	d10c      	bne.n	8009300 <_dtoa_r+0xadc>
 80092e6:	9b06      	ldr	r3, [sp, #24]
 80092e8:	2b39      	cmp	r3, #57	; 0x39
 80092ea:	d025      	beq.n	8009338 <_dtoa_r+0xb14>
 80092ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd02      	ble.n	80092f8 <_dtoa_r+0xad4>
 80092f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f4:	3331      	adds	r3, #49	; 0x31
 80092f6:	9306      	str	r3, [sp, #24]
 80092f8:	9b08      	ldr	r3, [sp, #32]
 80092fa:	9a06      	ldr	r2, [sp, #24]
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	e773      	b.n	80091e8 <_dtoa_r+0x9c4>
 8009300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	db03      	blt.n	800930e <_dtoa_r+0xaea>
 8009306:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009308:	4313      	orrs	r3, r2
 800930a:	4303      	orrs	r3, r0
 800930c:	d11f      	bne.n	800934e <_dtoa_r+0xb2a>
 800930e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	ddf1      	ble.n	80092f8 <_dtoa_r+0xad4>
 8009314:	9904      	ldr	r1, [sp, #16]
 8009316:	2201      	movs	r2, #1
 8009318:	0038      	movs	r0, r7
 800931a:	f000 fad9 	bl	80098d0 <__lshift>
 800931e:	0031      	movs	r1, r6
 8009320:	9004      	str	r0, [sp, #16]
 8009322:	f000 fb45 	bl	80099b0 <__mcmp>
 8009326:	2800      	cmp	r0, #0
 8009328:	dc03      	bgt.n	8009332 <_dtoa_r+0xb0e>
 800932a:	d1e5      	bne.n	80092f8 <_dtoa_r+0xad4>
 800932c:	9b06      	ldr	r3, [sp, #24]
 800932e:	07db      	lsls	r3, r3, #31
 8009330:	d5e2      	bpl.n	80092f8 <_dtoa_r+0xad4>
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	2b39      	cmp	r3, #57	; 0x39
 8009336:	d1dc      	bne.n	80092f2 <_dtoa_r+0xace>
 8009338:	2339      	movs	r3, #57	; 0x39
 800933a:	9a08      	ldr	r2, [sp, #32]
 800933c:	7013      	strb	r3, [r2, #0]
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	3b01      	subs	r3, #1
 8009344:	781a      	ldrb	r2, [r3, #0]
 8009346:	2a39      	cmp	r2, #57	; 0x39
 8009348:	d06c      	beq.n	8009424 <_dtoa_r+0xc00>
 800934a:	3201      	adds	r2, #1
 800934c:	e7d6      	b.n	80092fc <_dtoa_r+0xad8>
 800934e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009350:	2b00      	cmp	r3, #0
 8009352:	dd07      	ble.n	8009364 <_dtoa_r+0xb40>
 8009354:	9b06      	ldr	r3, [sp, #24]
 8009356:	2b39      	cmp	r3, #57	; 0x39
 8009358:	d0ee      	beq.n	8009338 <_dtoa_r+0xb14>
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	9a08      	ldr	r2, [sp, #32]
 800935e:	3301      	adds	r3, #1
 8009360:	7013      	strb	r3, [r2, #0]
 8009362:	e741      	b.n	80091e8 <_dtoa_r+0x9c4>
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	9a06      	ldr	r2, [sp, #24]
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	2301      	movs	r3, #1
 800936c:	9a05      	ldr	r2, [sp, #20]
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	9a08      	ldr	r2, [sp, #32]
 8009372:	189b      	adds	r3, r3, r2
 8009374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009376:	429a      	cmp	r2, r3
 8009378:	d03e      	beq.n	80093f8 <_dtoa_r+0xbd4>
 800937a:	2300      	movs	r3, #0
 800937c:	220a      	movs	r2, #10
 800937e:	9904      	ldr	r1, [sp, #16]
 8009380:	0038      	movs	r0, r7
 8009382:	f000 f8f7 	bl	8009574 <__multadd>
 8009386:	2300      	movs	r3, #0
 8009388:	9004      	str	r0, [sp, #16]
 800938a:	220a      	movs	r2, #10
 800938c:	0021      	movs	r1, r4
 800938e:	0038      	movs	r0, r7
 8009390:	42ac      	cmp	r4, r5
 8009392:	d106      	bne.n	80093a2 <_dtoa_r+0xb7e>
 8009394:	f000 f8ee 	bl	8009574 <__multadd>
 8009398:	0004      	movs	r4, r0
 800939a:	0005      	movs	r5, r0
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	9308      	str	r3, [sp, #32]
 80093a0:	e773      	b.n	800928a <_dtoa_r+0xa66>
 80093a2:	f000 f8e7 	bl	8009574 <__multadd>
 80093a6:	0029      	movs	r1, r5
 80093a8:	0004      	movs	r4, r0
 80093aa:	2300      	movs	r3, #0
 80093ac:	220a      	movs	r2, #10
 80093ae:	0038      	movs	r0, r7
 80093b0:	f000 f8e0 	bl	8009574 <__multadd>
 80093b4:	0005      	movs	r5, r0
 80093b6:	e7f1      	b.n	800939c <_dtoa_r+0xb78>
 80093b8:	9b06      	ldr	r3, [sp, #24]
 80093ba:	930c      	str	r3, [sp, #48]	; 0x30
 80093bc:	2400      	movs	r4, #0
 80093be:	0031      	movs	r1, r6
 80093c0:	9804      	ldr	r0, [sp, #16]
 80093c2:	f7ff f9a3 	bl	800870c <quorem>
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	3030      	adds	r0, #48	; 0x30
 80093ca:	5518      	strb	r0, [r3, r4]
 80093cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ce:	3401      	adds	r4, #1
 80093d0:	9006      	str	r0, [sp, #24]
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	dd07      	ble.n	80093e6 <_dtoa_r+0xbc2>
 80093d6:	2300      	movs	r3, #0
 80093d8:	220a      	movs	r2, #10
 80093da:	0038      	movs	r0, r7
 80093dc:	9904      	ldr	r1, [sp, #16]
 80093de:	f000 f8c9 	bl	8009574 <__multadd>
 80093e2:	9004      	str	r0, [sp, #16]
 80093e4:	e7eb      	b.n	80093be <_dtoa_r+0xb9a>
 80093e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093e8:	2001      	movs	r0, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dd00      	ble.n	80093f0 <_dtoa_r+0xbcc>
 80093ee:	0018      	movs	r0, r3
 80093f0:	2400      	movs	r4, #0
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	181b      	adds	r3, r3, r0
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	9904      	ldr	r1, [sp, #16]
 80093fa:	2201      	movs	r2, #1
 80093fc:	0038      	movs	r0, r7
 80093fe:	f000 fa67 	bl	80098d0 <__lshift>
 8009402:	0031      	movs	r1, r6
 8009404:	9004      	str	r0, [sp, #16]
 8009406:	f000 fad3 	bl	80099b0 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	dc97      	bgt.n	800933e <_dtoa_r+0xb1a>
 800940e:	d102      	bne.n	8009416 <_dtoa_r+0xbf2>
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	07db      	lsls	r3, r3, #31
 8009414:	d493      	bmi.n	800933e <_dtoa_r+0xb1a>
 8009416:	9b07      	ldr	r3, [sp, #28]
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	3b01      	subs	r3, #1
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	2a30      	cmp	r2, #48	; 0x30
 8009420:	d0fa      	beq.n	8009418 <_dtoa_r+0xbf4>
 8009422:	e6e1      	b.n	80091e8 <_dtoa_r+0x9c4>
 8009424:	9a05      	ldr	r2, [sp, #20]
 8009426:	429a      	cmp	r2, r3
 8009428:	d18a      	bne.n	8009340 <_dtoa_r+0xb1c>
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	3301      	adds	r3, #1
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	2331      	movs	r3, #49	; 0x31
 8009432:	e795      	b.n	8009360 <_dtoa_r+0xb3c>
 8009434:	4b08      	ldr	r3, [pc, #32]	; (8009458 <_dtoa_r+0xc34>)
 8009436:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	4b08      	ldr	r3, [pc, #32]	; (800945c <_dtoa_r+0xc38>)
 800943c:	2a00      	cmp	r2, #0
 800943e:	d001      	beq.n	8009444 <_dtoa_r+0xc20>
 8009440:	f7ff fa3b 	bl	80088ba <_dtoa_r+0x96>
 8009444:	f7ff fa3b 	bl	80088be <_dtoa_r+0x9a>
 8009448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800944a:	2b00      	cmp	r3, #0
 800944c:	dcb6      	bgt.n	80093bc <_dtoa_r+0xb98>
 800944e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009450:	2b02      	cmp	r3, #2
 8009452:	dd00      	ble.n	8009456 <_dtoa_r+0xc32>
 8009454:	e6b2      	b.n	80091bc <_dtoa_r+0x998>
 8009456:	e7b1      	b.n	80093bc <_dtoa_r+0xb98>
 8009458:	0800b584 	.word	0x0800b584
 800945c:	0800b58c 	.word	0x0800b58c

08009460 <_localeconv_r>:
 8009460:	4800      	ldr	r0, [pc, #0]	; (8009464 <_localeconv_r+0x4>)
 8009462:	4770      	bx	lr
 8009464:	20000168 	.word	0x20000168

08009468 <malloc>:
 8009468:	b510      	push	{r4, lr}
 800946a:	4b03      	ldr	r3, [pc, #12]	; (8009478 <malloc+0x10>)
 800946c:	0001      	movs	r1, r0
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	f000 fc0e 	bl	8009c90 <_malloc_r>
 8009474:	bd10      	pop	{r4, pc}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	20000014 	.word	0x20000014

0800947c <memchr>:
 800947c:	b2c9      	uxtb	r1, r1
 800947e:	1882      	adds	r2, r0, r2
 8009480:	4290      	cmp	r0, r2
 8009482:	d101      	bne.n	8009488 <memchr+0xc>
 8009484:	2000      	movs	r0, #0
 8009486:	4770      	bx	lr
 8009488:	7803      	ldrb	r3, [r0, #0]
 800948a:	428b      	cmp	r3, r1
 800948c:	d0fb      	beq.n	8009486 <memchr+0xa>
 800948e:	3001      	adds	r0, #1
 8009490:	e7f6      	b.n	8009480 <memchr+0x4>

08009492 <memcpy>:
 8009492:	2300      	movs	r3, #0
 8009494:	b510      	push	{r4, lr}
 8009496:	429a      	cmp	r2, r3
 8009498:	d100      	bne.n	800949c <memcpy+0xa>
 800949a:	bd10      	pop	{r4, pc}
 800949c:	5ccc      	ldrb	r4, [r1, r3]
 800949e:	54c4      	strb	r4, [r0, r3]
 80094a0:	3301      	adds	r3, #1
 80094a2:	e7f8      	b.n	8009496 <memcpy+0x4>

080094a4 <_Balloc>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094a8:	0006      	movs	r6, r0
 80094aa:	000c      	movs	r4, r1
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d10e      	bne.n	80094ce <_Balloc+0x2a>
 80094b0:	2010      	movs	r0, #16
 80094b2:	f7ff ffd9 	bl	8009468 <malloc>
 80094b6:	1e02      	subs	r2, r0, #0
 80094b8:	6270      	str	r0, [r6, #36]	; 0x24
 80094ba:	d104      	bne.n	80094c6 <_Balloc+0x22>
 80094bc:	2166      	movs	r1, #102	; 0x66
 80094be:	4b19      	ldr	r3, [pc, #100]	; (8009524 <_Balloc+0x80>)
 80094c0:	4819      	ldr	r0, [pc, #100]	; (8009528 <_Balloc+0x84>)
 80094c2:	f000 fdb7 	bl	800a034 <__assert_func>
 80094c6:	6045      	str	r5, [r0, #4]
 80094c8:	6085      	str	r5, [r0, #8]
 80094ca:	6005      	str	r5, [r0, #0]
 80094cc:	60c5      	str	r5, [r0, #12]
 80094ce:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80094d0:	68eb      	ldr	r3, [r5, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <_Balloc+0x5a>
 80094d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094d8:	00a2      	lsls	r2, r4, #2
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	189b      	adds	r3, r3, r2
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d118      	bne.n	8009516 <_Balloc+0x72>
 80094e4:	2101      	movs	r1, #1
 80094e6:	000d      	movs	r5, r1
 80094e8:	40a5      	lsls	r5, r4
 80094ea:	1d6a      	adds	r2, r5, #5
 80094ec:	0030      	movs	r0, r6
 80094ee:	0092      	lsls	r2, r2, #2
 80094f0:	f000 fb76 	bl	8009be0 <_calloc_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d00c      	beq.n	8009512 <_Balloc+0x6e>
 80094f8:	6044      	str	r4, [r0, #4]
 80094fa:	6085      	str	r5, [r0, #8]
 80094fc:	e00d      	b.n	800951a <_Balloc+0x76>
 80094fe:	2221      	movs	r2, #33	; 0x21
 8009500:	2104      	movs	r1, #4
 8009502:	0030      	movs	r0, r6
 8009504:	f000 fb6c 	bl	8009be0 <_calloc_r>
 8009508:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800950a:	60e8      	str	r0, [r5, #12]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e1      	bne.n	80094d6 <_Balloc+0x32>
 8009512:	2000      	movs	r0, #0
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	6802      	ldr	r2, [r0, #0]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	2300      	movs	r3, #0
 800951c:	6103      	str	r3, [r0, #16]
 800951e:	60c3      	str	r3, [r0, #12]
 8009520:	e7f8      	b.n	8009514 <_Balloc+0x70>
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	0800b591 	.word	0x0800b591
 8009528:	0800b618 	.word	0x0800b618

0800952c <_Bfree>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009530:	0005      	movs	r5, r0
 8009532:	000c      	movs	r4, r1
 8009534:	2e00      	cmp	r6, #0
 8009536:	d10e      	bne.n	8009556 <_Bfree+0x2a>
 8009538:	2010      	movs	r0, #16
 800953a:	f7ff ff95 	bl	8009468 <malloc>
 800953e:	1e02      	subs	r2, r0, #0
 8009540:	6268      	str	r0, [r5, #36]	; 0x24
 8009542:	d104      	bne.n	800954e <_Bfree+0x22>
 8009544:	218a      	movs	r1, #138	; 0x8a
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <_Bfree+0x40>)
 8009548:	4809      	ldr	r0, [pc, #36]	; (8009570 <_Bfree+0x44>)
 800954a:	f000 fd73 	bl	800a034 <__assert_func>
 800954e:	6046      	str	r6, [r0, #4]
 8009550:	6086      	str	r6, [r0, #8]
 8009552:	6006      	str	r6, [r0, #0]
 8009554:	60c6      	str	r6, [r0, #12]
 8009556:	2c00      	cmp	r4, #0
 8009558:	d007      	beq.n	800956a <_Bfree+0x3e>
 800955a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800955c:	6862      	ldr	r2, [r4, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	189b      	adds	r3, r3, r2
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	6022      	str	r2, [r4, #0]
 8009568:	601c      	str	r4, [r3, #0]
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	0800b591 	.word	0x0800b591
 8009570:	0800b618 	.word	0x0800b618

08009574 <__multadd>:
 8009574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009576:	000e      	movs	r6, r1
 8009578:	9001      	str	r0, [sp, #4]
 800957a:	000c      	movs	r4, r1
 800957c:	001d      	movs	r5, r3
 800957e:	2000      	movs	r0, #0
 8009580:	690f      	ldr	r7, [r1, #16]
 8009582:	3614      	adds	r6, #20
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	3001      	adds	r0, #1
 8009588:	b299      	uxth	r1, r3
 800958a:	4351      	muls	r1, r2
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	4353      	muls	r3, r2
 8009590:	1949      	adds	r1, r1, r5
 8009592:	0c0d      	lsrs	r5, r1, #16
 8009594:	195b      	adds	r3, r3, r5
 8009596:	0c1d      	lsrs	r5, r3, #16
 8009598:	b289      	uxth	r1, r1
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	185b      	adds	r3, r3, r1
 800959e:	c608      	stmia	r6!, {r3}
 80095a0:	4287      	cmp	r7, r0
 80095a2:	dcef      	bgt.n	8009584 <__multadd+0x10>
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	d022      	beq.n	80095ee <__multadd+0x7a>
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	42bb      	cmp	r3, r7
 80095ac:	dc19      	bgt.n	80095e2 <__multadd+0x6e>
 80095ae:	6863      	ldr	r3, [r4, #4]
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	1c59      	adds	r1, r3, #1
 80095b4:	f7ff ff76 	bl	80094a4 <_Balloc>
 80095b8:	1e06      	subs	r6, r0, #0
 80095ba:	d105      	bne.n	80095c8 <__multadd+0x54>
 80095bc:	0002      	movs	r2, r0
 80095be:	21b5      	movs	r1, #181	; 0xb5
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <__multadd+0x80>)
 80095c2:	480d      	ldr	r0, [pc, #52]	; (80095f8 <__multadd+0x84>)
 80095c4:	f000 fd36 	bl	800a034 <__assert_func>
 80095c8:	0021      	movs	r1, r4
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	310c      	adds	r1, #12
 80095ce:	1c9a      	adds	r2, r3, #2
 80095d0:	0092      	lsls	r2, r2, #2
 80095d2:	300c      	adds	r0, #12
 80095d4:	f7ff ff5d 	bl	8009492 <memcpy>
 80095d8:	0021      	movs	r1, r4
 80095da:	9801      	ldr	r0, [sp, #4]
 80095dc:	f7ff ffa6 	bl	800952c <_Bfree>
 80095e0:	0034      	movs	r4, r6
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	18e3      	adds	r3, r4, r3
 80095e8:	605d      	str	r5, [r3, #4]
 80095ea:	1c7b      	adds	r3, r7, #1
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	0020      	movs	r0, r4
 80095f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	0800b607 	.word	0x0800b607
 80095f8:	0800b618 	.word	0x0800b618

080095fc <__hi0bits>:
 80095fc:	0003      	movs	r3, r0
 80095fe:	0c02      	lsrs	r2, r0, #16
 8009600:	2000      	movs	r0, #0
 8009602:	4282      	cmp	r2, r0
 8009604:	d101      	bne.n	800960a <__hi0bits+0xe>
 8009606:	041b      	lsls	r3, r3, #16
 8009608:	3010      	adds	r0, #16
 800960a:	0e1a      	lsrs	r2, r3, #24
 800960c:	d101      	bne.n	8009612 <__hi0bits+0x16>
 800960e:	3008      	adds	r0, #8
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	0f1a      	lsrs	r2, r3, #28
 8009614:	d101      	bne.n	800961a <__hi0bits+0x1e>
 8009616:	3004      	adds	r0, #4
 8009618:	011b      	lsls	r3, r3, #4
 800961a:	0f9a      	lsrs	r2, r3, #30
 800961c:	d101      	bne.n	8009622 <__hi0bits+0x26>
 800961e:	3002      	adds	r0, #2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	db03      	blt.n	800962e <__hi0bits+0x32>
 8009626:	3001      	adds	r0, #1
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	d400      	bmi.n	800962e <__hi0bits+0x32>
 800962c:	2020      	movs	r0, #32
 800962e:	4770      	bx	lr

08009630 <__lo0bits>:
 8009630:	6803      	ldr	r3, [r0, #0]
 8009632:	0002      	movs	r2, r0
 8009634:	2107      	movs	r1, #7
 8009636:	0018      	movs	r0, r3
 8009638:	4008      	ands	r0, r1
 800963a:	420b      	tst	r3, r1
 800963c:	d00d      	beq.n	800965a <__lo0bits+0x2a>
 800963e:	3906      	subs	r1, #6
 8009640:	2000      	movs	r0, #0
 8009642:	420b      	tst	r3, r1
 8009644:	d105      	bne.n	8009652 <__lo0bits+0x22>
 8009646:	3002      	adds	r0, #2
 8009648:	4203      	tst	r3, r0
 800964a:	d003      	beq.n	8009654 <__lo0bits+0x24>
 800964c:	40cb      	lsrs	r3, r1
 800964e:	0008      	movs	r0, r1
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	4770      	bx	lr
 8009654:	089b      	lsrs	r3, r3, #2
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e7fb      	b.n	8009652 <__lo0bits+0x22>
 800965a:	b299      	uxth	r1, r3
 800965c:	2900      	cmp	r1, #0
 800965e:	d101      	bne.n	8009664 <__lo0bits+0x34>
 8009660:	2010      	movs	r0, #16
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	b2d9      	uxtb	r1, r3
 8009666:	2900      	cmp	r1, #0
 8009668:	d101      	bne.n	800966e <__lo0bits+0x3e>
 800966a:	3008      	adds	r0, #8
 800966c:	0a1b      	lsrs	r3, r3, #8
 800966e:	0719      	lsls	r1, r3, #28
 8009670:	d101      	bne.n	8009676 <__lo0bits+0x46>
 8009672:	3004      	adds	r0, #4
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	0799      	lsls	r1, r3, #30
 8009678:	d101      	bne.n	800967e <__lo0bits+0x4e>
 800967a:	3002      	adds	r0, #2
 800967c:	089b      	lsrs	r3, r3, #2
 800967e:	07d9      	lsls	r1, r3, #31
 8009680:	d4e9      	bmi.n	8009656 <__lo0bits+0x26>
 8009682:	3001      	adds	r0, #1
 8009684:	085b      	lsrs	r3, r3, #1
 8009686:	d1e6      	bne.n	8009656 <__lo0bits+0x26>
 8009688:	2020      	movs	r0, #32
 800968a:	e7e2      	b.n	8009652 <__lo0bits+0x22>

0800968c <__i2b>:
 800968c:	b510      	push	{r4, lr}
 800968e:	000c      	movs	r4, r1
 8009690:	2101      	movs	r1, #1
 8009692:	f7ff ff07 	bl	80094a4 <_Balloc>
 8009696:	2800      	cmp	r0, #0
 8009698:	d106      	bne.n	80096a8 <__i2b+0x1c>
 800969a:	21a0      	movs	r1, #160	; 0xa0
 800969c:	0002      	movs	r2, r0
 800969e:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <__i2b+0x24>)
 80096a0:	4804      	ldr	r0, [pc, #16]	; (80096b4 <__i2b+0x28>)
 80096a2:	0049      	lsls	r1, r1, #1
 80096a4:	f000 fcc6 	bl	800a034 <__assert_func>
 80096a8:	2301      	movs	r3, #1
 80096aa:	6144      	str	r4, [r0, #20]
 80096ac:	6103      	str	r3, [r0, #16]
 80096ae:	bd10      	pop	{r4, pc}
 80096b0:	0800b607 	.word	0x0800b607
 80096b4:	0800b618 	.word	0x0800b618

080096b8 <__multiply>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	690b      	ldr	r3, [r1, #16]
 80096bc:	0014      	movs	r4, r2
 80096be:	6912      	ldr	r2, [r2, #16]
 80096c0:	000d      	movs	r5, r1
 80096c2:	b089      	sub	sp, #36	; 0x24
 80096c4:	4293      	cmp	r3, r2
 80096c6:	da01      	bge.n	80096cc <__multiply+0x14>
 80096c8:	0025      	movs	r5, r4
 80096ca:	000c      	movs	r4, r1
 80096cc:	692f      	ldr	r7, [r5, #16]
 80096ce:	6926      	ldr	r6, [r4, #16]
 80096d0:	6869      	ldr	r1, [r5, #4]
 80096d2:	19bb      	adds	r3, r7, r6
 80096d4:	9302      	str	r3, [sp, #8]
 80096d6:	68ab      	ldr	r3, [r5, #8]
 80096d8:	19ba      	adds	r2, r7, r6
 80096da:	4293      	cmp	r3, r2
 80096dc:	da00      	bge.n	80096e0 <__multiply+0x28>
 80096de:	3101      	adds	r1, #1
 80096e0:	f7ff fee0 	bl	80094a4 <_Balloc>
 80096e4:	9001      	str	r0, [sp, #4]
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d106      	bne.n	80096f8 <__multiply+0x40>
 80096ea:	215e      	movs	r1, #94	; 0x5e
 80096ec:	0002      	movs	r2, r0
 80096ee:	4b48      	ldr	r3, [pc, #288]	; (8009810 <__multiply+0x158>)
 80096f0:	4848      	ldr	r0, [pc, #288]	; (8009814 <__multiply+0x15c>)
 80096f2:	31ff      	adds	r1, #255	; 0xff
 80096f4:	f000 fc9e 	bl	800a034 <__assert_func>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	3314      	adds	r3, #20
 80096fe:	469c      	mov	ip, r3
 8009700:	19bb      	adds	r3, r7, r6
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4463      	add	r3, ip
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	4663      	mov	r3, ip
 800970a:	9903      	ldr	r1, [sp, #12]
 800970c:	428b      	cmp	r3, r1
 800970e:	d32c      	bcc.n	800976a <__multiply+0xb2>
 8009710:	002b      	movs	r3, r5
 8009712:	0022      	movs	r2, r4
 8009714:	3314      	adds	r3, #20
 8009716:	00bf      	lsls	r7, r7, #2
 8009718:	3214      	adds	r2, #20
 800971a:	9306      	str	r3, [sp, #24]
 800971c:	00b6      	lsls	r6, r6, #2
 800971e:	19db      	adds	r3, r3, r7
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	1993      	adds	r3, r2, r6
 8009724:	9307      	str	r3, [sp, #28]
 8009726:	2304      	movs	r3, #4
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	002b      	movs	r3, r5
 800972c:	9904      	ldr	r1, [sp, #16]
 800972e:	3315      	adds	r3, #21
 8009730:	9200      	str	r2, [sp, #0]
 8009732:	4299      	cmp	r1, r3
 8009734:	d305      	bcc.n	8009742 <__multiply+0x8a>
 8009736:	1b4b      	subs	r3, r1, r5
 8009738:	3b15      	subs	r3, #21
 800973a:	089b      	lsrs	r3, r3, #2
 800973c:	3301      	adds	r3, #1
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	9a00      	ldr	r2, [sp, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d311      	bcc.n	800976e <__multiply+0xb6>
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	dd06      	ble.n	800975e <__multiply+0xa6>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	3b04      	subs	r3, #4
 8009754:	9303      	str	r3, [sp, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d054      	beq.n	8009808 <__multiply+0x150>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	9a02      	ldr	r2, [sp, #8]
 8009762:	0018      	movs	r0, r3
 8009764:	611a      	str	r2, [r3, #16]
 8009766:	b009      	add	sp, #36	; 0x24
 8009768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976a:	c304      	stmia	r3!, {r2}
 800976c:	e7cd      	b.n	800970a <__multiply+0x52>
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	b298      	uxth	r0, r3
 8009774:	2800      	cmp	r0, #0
 8009776:	d01c      	beq.n	80097b2 <__multiply+0xfa>
 8009778:	4667      	mov	r7, ip
 800977a:	2400      	movs	r4, #0
 800977c:	9e06      	ldr	r6, [sp, #24]
 800977e:	ce02      	ldmia	r6!, {r1}
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	b28b      	uxth	r3, r1
 8009784:	4343      	muls	r3, r0
 8009786:	0c09      	lsrs	r1, r1, #16
 8009788:	4341      	muls	r1, r0
 800978a:	b292      	uxth	r2, r2
 800978c:	189b      	adds	r3, r3, r2
 800978e:	191b      	adds	r3, r3, r4
 8009790:	000c      	movs	r4, r1
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	0c11      	lsrs	r1, r2, #16
 8009796:	1861      	adds	r1, r4, r1
 8009798:	0c1c      	lsrs	r4, r3, #16
 800979a:	1909      	adds	r1, r1, r4
 800979c:	0c0c      	lsrs	r4, r1, #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	0409      	lsls	r1, r1, #16
 80097a2:	430b      	orrs	r3, r1
 80097a4:	c708      	stmia	r7!, {r3}
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	42b3      	cmp	r3, r6
 80097aa:	d8e8      	bhi.n	800977e <__multiply+0xc6>
 80097ac:	4663      	mov	r3, ip
 80097ae:	9a05      	ldr	r2, [sp, #20]
 80097b0:	509c      	str	r4, [r3, r2]
 80097b2:	9b00      	ldr	r3, [sp, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	0c1e      	lsrs	r6, r3, #16
 80097b8:	d020      	beq.n	80097fc <__multiply+0x144>
 80097ba:	4663      	mov	r3, ip
 80097bc:	002c      	movs	r4, r5
 80097be:	4660      	mov	r0, ip
 80097c0:	2700      	movs	r7, #0
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3414      	adds	r4, #20
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	b291      	uxth	r1, r2
 80097cc:	4371      	muls	r1, r6
 80097ce:	6802      	ldr	r2, [r0, #0]
 80097d0:	0c12      	lsrs	r2, r2, #16
 80097d2:	1889      	adds	r1, r1, r2
 80097d4:	19cf      	adds	r7, r1, r7
 80097d6:	0439      	lsls	r1, r7, #16
 80097d8:	430b      	orrs	r3, r1
 80097da:	6003      	str	r3, [r0, #0]
 80097dc:	cc02      	ldmia	r4!, {r1}
 80097de:	6843      	ldr	r3, [r0, #4]
 80097e0:	0c09      	lsrs	r1, r1, #16
 80097e2:	4371      	muls	r1, r6
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	0c3f      	lsrs	r7, r7, #16
 80097e8:	18cb      	adds	r3, r1, r3
 80097ea:	9a04      	ldr	r2, [sp, #16]
 80097ec:	19db      	adds	r3, r3, r7
 80097ee:	0c1f      	lsrs	r7, r3, #16
 80097f0:	3004      	adds	r0, #4
 80097f2:	42a2      	cmp	r2, r4
 80097f4:	d8e7      	bhi.n	80097c6 <__multiply+0x10e>
 80097f6:	4662      	mov	r2, ip
 80097f8:	9905      	ldr	r1, [sp, #20]
 80097fa:	5053      	str	r3, [r2, r1]
 80097fc:	9b00      	ldr	r3, [sp, #0]
 80097fe:	3304      	adds	r3, #4
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	2304      	movs	r3, #4
 8009804:	449c      	add	ip, r3
 8009806:	e79c      	b.n	8009742 <__multiply+0x8a>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	3b01      	subs	r3, #1
 800980c:	9302      	str	r3, [sp, #8]
 800980e:	e79c      	b.n	800974a <__multiply+0x92>
 8009810:	0800b607 	.word	0x0800b607
 8009814:	0800b618 	.word	0x0800b618

08009818 <__pow5mult>:
 8009818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800981a:	2303      	movs	r3, #3
 800981c:	0015      	movs	r5, r2
 800981e:	0007      	movs	r7, r0
 8009820:	000e      	movs	r6, r1
 8009822:	401a      	ands	r2, r3
 8009824:	421d      	tst	r5, r3
 8009826:	d008      	beq.n	800983a <__pow5mult+0x22>
 8009828:	4925      	ldr	r1, [pc, #148]	; (80098c0 <__pow5mult+0xa8>)
 800982a:	3a01      	subs	r2, #1
 800982c:	0092      	lsls	r2, r2, #2
 800982e:	5852      	ldr	r2, [r2, r1]
 8009830:	2300      	movs	r3, #0
 8009832:	0031      	movs	r1, r6
 8009834:	f7ff fe9e 	bl	8009574 <__multadd>
 8009838:	0006      	movs	r6, r0
 800983a:	10ad      	asrs	r5, r5, #2
 800983c:	d03d      	beq.n	80098ba <__pow5mult+0xa2>
 800983e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009840:	2c00      	cmp	r4, #0
 8009842:	d10f      	bne.n	8009864 <__pow5mult+0x4c>
 8009844:	2010      	movs	r0, #16
 8009846:	f7ff fe0f 	bl	8009468 <malloc>
 800984a:	1e02      	subs	r2, r0, #0
 800984c:	6278      	str	r0, [r7, #36]	; 0x24
 800984e:	d105      	bne.n	800985c <__pow5mult+0x44>
 8009850:	21d7      	movs	r1, #215	; 0xd7
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <__pow5mult+0xac>)
 8009854:	481c      	ldr	r0, [pc, #112]	; (80098c8 <__pow5mult+0xb0>)
 8009856:	0049      	lsls	r1, r1, #1
 8009858:	f000 fbec 	bl	800a034 <__assert_func>
 800985c:	6044      	str	r4, [r0, #4]
 800985e:	6084      	str	r4, [r0, #8]
 8009860:	6004      	str	r4, [r0, #0]
 8009862:	60c4      	str	r4, [r0, #12]
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	689c      	ldr	r4, [r3, #8]
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	2c00      	cmp	r4, #0
 800986c:	d108      	bne.n	8009880 <__pow5mult+0x68>
 800986e:	0038      	movs	r0, r7
 8009870:	4916      	ldr	r1, [pc, #88]	; (80098cc <__pow5mult+0xb4>)
 8009872:	f7ff ff0b 	bl	800968c <__i2b>
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	0004      	movs	r4, r0
 800987a:	6098      	str	r0, [r3, #8]
 800987c:	2300      	movs	r3, #0
 800987e:	6003      	str	r3, [r0, #0]
 8009880:	2301      	movs	r3, #1
 8009882:	421d      	tst	r5, r3
 8009884:	d00a      	beq.n	800989c <__pow5mult+0x84>
 8009886:	0031      	movs	r1, r6
 8009888:	0022      	movs	r2, r4
 800988a:	0038      	movs	r0, r7
 800988c:	f7ff ff14 	bl	80096b8 <__multiply>
 8009890:	0031      	movs	r1, r6
 8009892:	9001      	str	r0, [sp, #4]
 8009894:	0038      	movs	r0, r7
 8009896:	f7ff fe49 	bl	800952c <_Bfree>
 800989a:	9e01      	ldr	r6, [sp, #4]
 800989c:	106d      	asrs	r5, r5, #1
 800989e:	d00c      	beq.n	80098ba <__pow5mult+0xa2>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d107      	bne.n	80098b6 <__pow5mult+0x9e>
 80098a6:	0022      	movs	r2, r4
 80098a8:	0021      	movs	r1, r4
 80098aa:	0038      	movs	r0, r7
 80098ac:	f7ff ff04 	bl	80096b8 <__multiply>
 80098b0:	2300      	movs	r3, #0
 80098b2:	6020      	str	r0, [r4, #0]
 80098b4:	6003      	str	r3, [r0, #0]
 80098b6:	0004      	movs	r4, r0
 80098b8:	e7e2      	b.n	8009880 <__pow5mult+0x68>
 80098ba:	0030      	movs	r0, r6
 80098bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	0800b768 	.word	0x0800b768
 80098c4:	0800b591 	.word	0x0800b591
 80098c8:	0800b618 	.word	0x0800b618
 80098cc:	00000271 	.word	0x00000271

080098d0 <__lshift>:
 80098d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d2:	000c      	movs	r4, r1
 80098d4:	0017      	movs	r7, r2
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	1155      	asrs	r5, r2, #5
 80098da:	b087      	sub	sp, #28
 80098dc:	18eb      	adds	r3, r5, r3
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	3301      	adds	r3, #1
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	6849      	ldr	r1, [r1, #4]
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	9004      	str	r0, [sp, #16]
 80098ea:	9a01      	ldr	r2, [sp, #4]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	db11      	blt.n	8009914 <__lshift+0x44>
 80098f0:	9804      	ldr	r0, [sp, #16]
 80098f2:	f7ff fdd7 	bl	80094a4 <_Balloc>
 80098f6:	0002      	movs	r2, r0
 80098f8:	2300      	movs	r3, #0
 80098fa:	3214      	adds	r2, #20
 80098fc:	0006      	movs	r6, r0
 80098fe:	0011      	movs	r1, r2
 8009900:	9203      	str	r2, [sp, #12]
 8009902:	4298      	cmp	r0, r3
 8009904:	d10d      	bne.n	8009922 <__lshift+0x52>
 8009906:	21da      	movs	r1, #218	; 0xda
 8009908:	0002      	movs	r2, r0
 800990a:	4b27      	ldr	r3, [pc, #156]	; (80099a8 <__lshift+0xd8>)
 800990c:	4827      	ldr	r0, [pc, #156]	; (80099ac <__lshift+0xdc>)
 800990e:	31ff      	adds	r1, #255	; 0xff
 8009910:	f000 fb90 	bl	800a034 <__assert_func>
 8009914:	3101      	adds	r1, #1
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	e7e7      	b.n	80098ea <__lshift+0x1a>
 800991a:	2200      	movs	r2, #0
 800991c:	0098      	lsls	r0, r3, #2
 800991e:	500a      	str	r2, [r1, r0]
 8009920:	3301      	adds	r3, #1
 8009922:	42ab      	cmp	r3, r5
 8009924:	dbf9      	blt.n	800991a <__lshift+0x4a>
 8009926:	43eb      	mvns	r3, r5
 8009928:	17db      	asrs	r3, r3, #31
 800992a:	401d      	ands	r5, r3
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	00ad      	lsls	r5, r5, #2
 8009930:	211f      	movs	r1, #31
 8009932:	0038      	movs	r0, r7
 8009934:	195d      	adds	r5, r3, r5
 8009936:	0023      	movs	r3, r4
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	3314      	adds	r3, #20
 800993c:	0092      	lsls	r2, r2, #2
 800993e:	4008      	ands	r0, r1
 8009940:	4684      	mov	ip, r0
 8009942:	189a      	adds	r2, r3, r2
 8009944:	420f      	tst	r7, r1
 8009946:	d02a      	beq.n	800999e <__lshift+0xce>
 8009948:	3101      	adds	r1, #1
 800994a:	1a09      	subs	r1, r1, r0
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	2100      	movs	r1, #0
 8009950:	9503      	str	r5, [sp, #12]
 8009952:	4667      	mov	r7, ip
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	40b8      	lsls	r0, r7
 8009958:	4301      	orrs	r1, r0
 800995a:	9803      	ldr	r0, [sp, #12]
 800995c:	c002      	stmia	r0!, {r1}
 800995e:	cb02      	ldmia	r3!, {r1}
 8009960:	9003      	str	r0, [sp, #12]
 8009962:	9805      	ldr	r0, [sp, #20]
 8009964:	40c1      	lsrs	r1, r0
 8009966:	429a      	cmp	r2, r3
 8009968:	d8f3      	bhi.n	8009952 <__lshift+0x82>
 800996a:	0020      	movs	r0, r4
 800996c:	3015      	adds	r0, #21
 800996e:	2304      	movs	r3, #4
 8009970:	4282      	cmp	r2, r0
 8009972:	d304      	bcc.n	800997e <__lshift+0xae>
 8009974:	1b13      	subs	r3, r2, r4
 8009976:	3b15      	subs	r3, #21
 8009978:	089b      	lsrs	r3, r3, #2
 800997a:	3301      	adds	r3, #1
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	50e9      	str	r1, [r5, r3]
 8009980:	2900      	cmp	r1, #0
 8009982:	d002      	beq.n	800998a <__lshift+0xba>
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	3302      	adds	r3, #2
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	9804      	ldr	r0, [sp, #16]
 800998e:	3b01      	subs	r3, #1
 8009990:	0021      	movs	r1, r4
 8009992:	6133      	str	r3, [r6, #16]
 8009994:	f7ff fdca 	bl	800952c <_Bfree>
 8009998:	0030      	movs	r0, r6
 800999a:	b007      	add	sp, #28
 800999c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800999e:	cb02      	ldmia	r3!, {r1}
 80099a0:	c502      	stmia	r5!, {r1}
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d8fb      	bhi.n	800999e <__lshift+0xce>
 80099a6:	e7f0      	b.n	800998a <__lshift+0xba>
 80099a8:	0800b607 	.word	0x0800b607
 80099ac:	0800b618 	.word	0x0800b618

080099b0 <__mcmp>:
 80099b0:	6902      	ldr	r2, [r0, #16]
 80099b2:	690b      	ldr	r3, [r1, #16]
 80099b4:	b530      	push	{r4, r5, lr}
 80099b6:	0004      	movs	r4, r0
 80099b8:	1ad0      	subs	r0, r2, r3
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d10d      	bne.n	80099da <__mcmp+0x2a>
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	3414      	adds	r4, #20
 80099c2:	3114      	adds	r1, #20
 80099c4:	18e2      	adds	r2, r4, r3
 80099c6:	18c9      	adds	r1, r1, r3
 80099c8:	3a04      	subs	r2, #4
 80099ca:	3904      	subs	r1, #4
 80099cc:	6815      	ldr	r5, [r2, #0]
 80099ce:	680b      	ldr	r3, [r1, #0]
 80099d0:	429d      	cmp	r5, r3
 80099d2:	d003      	beq.n	80099dc <__mcmp+0x2c>
 80099d4:	2001      	movs	r0, #1
 80099d6:	429d      	cmp	r5, r3
 80099d8:	d303      	bcc.n	80099e2 <__mcmp+0x32>
 80099da:	bd30      	pop	{r4, r5, pc}
 80099dc:	4294      	cmp	r4, r2
 80099de:	d3f3      	bcc.n	80099c8 <__mcmp+0x18>
 80099e0:	e7fb      	b.n	80099da <__mcmp+0x2a>
 80099e2:	4240      	negs	r0, r0
 80099e4:	e7f9      	b.n	80099da <__mcmp+0x2a>
	...

080099e8 <__mdiff>:
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	000e      	movs	r6, r1
 80099ec:	0007      	movs	r7, r0
 80099ee:	0011      	movs	r1, r2
 80099f0:	0030      	movs	r0, r6
 80099f2:	b087      	sub	sp, #28
 80099f4:	0014      	movs	r4, r2
 80099f6:	f7ff ffdb 	bl	80099b0 <__mcmp>
 80099fa:	1e05      	subs	r5, r0, #0
 80099fc:	d110      	bne.n	8009a20 <__mdiff+0x38>
 80099fe:	0001      	movs	r1, r0
 8009a00:	0038      	movs	r0, r7
 8009a02:	f7ff fd4f 	bl	80094a4 <_Balloc>
 8009a06:	1e02      	subs	r2, r0, #0
 8009a08:	d104      	bne.n	8009a14 <__mdiff+0x2c>
 8009a0a:	4b40      	ldr	r3, [pc, #256]	; (8009b0c <__mdiff+0x124>)
 8009a0c:	4940      	ldr	r1, [pc, #256]	; (8009b10 <__mdiff+0x128>)
 8009a0e:	4841      	ldr	r0, [pc, #260]	; (8009b14 <__mdiff+0x12c>)
 8009a10:	f000 fb10 	bl	800a034 <__assert_func>
 8009a14:	2301      	movs	r3, #1
 8009a16:	6145      	str	r5, [r0, #20]
 8009a18:	6103      	str	r3, [r0, #16]
 8009a1a:	0010      	movs	r0, r2
 8009a1c:	b007      	add	sp, #28
 8009a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a20:	2301      	movs	r3, #1
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	2800      	cmp	r0, #0
 8009a26:	db04      	blt.n	8009a32 <__mdiff+0x4a>
 8009a28:	0023      	movs	r3, r4
 8009a2a:	0034      	movs	r4, r6
 8009a2c:	001e      	movs	r6, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	0038      	movs	r0, r7
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	f7ff fd35 	bl	80094a4 <_Balloc>
 8009a3a:	1e02      	subs	r2, r0, #0
 8009a3c:	d103      	bne.n	8009a46 <__mdiff+0x5e>
 8009a3e:	2190      	movs	r1, #144	; 0x90
 8009a40:	4b32      	ldr	r3, [pc, #200]	; (8009b0c <__mdiff+0x124>)
 8009a42:	0089      	lsls	r1, r1, #2
 8009a44:	e7e3      	b.n	8009a0e <__mdiff+0x26>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	2700      	movs	r7, #0
 8009a4a:	60c3      	str	r3, [r0, #12]
 8009a4c:	6920      	ldr	r0, [r4, #16]
 8009a4e:	3414      	adds	r4, #20
 8009a50:	9401      	str	r4, [sp, #4]
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	0084      	lsls	r4, r0, #2
 8009a56:	191b      	adds	r3, r3, r4
 8009a58:	0034      	movs	r4, r6
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	6933      	ldr	r3, [r6, #16]
 8009a5e:	3414      	adds	r4, #20
 8009a60:	0099      	lsls	r1, r3, #2
 8009a62:	1863      	adds	r3, r4, r1
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	0013      	movs	r3, r2
 8009a68:	3314      	adds	r3, #20
 8009a6a:	469c      	mov	ip, r3
 8009a6c:	9305      	str	r3, [sp, #20]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	cc02      	ldmia	r4!, {r1}
 8009a76:	cb20      	ldmia	r3!, {r5}
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	b2ab      	uxth	r3, r5
 8009a7c:	19df      	adds	r7, r3, r7
 8009a7e:	b28b      	uxth	r3, r1
 8009a80:	1afb      	subs	r3, r7, r3
 8009a82:	0c2d      	lsrs	r5, r5, #16
 8009a84:	0c09      	lsrs	r1, r1, #16
 8009a86:	1a69      	subs	r1, r5, r1
 8009a88:	141d      	asrs	r5, r3, #16
 8009a8a:	1949      	adds	r1, r1, r5
 8009a8c:	140f      	asrs	r7, r1, #16
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	0409      	lsls	r1, r1, #16
 8009a92:	430b      	orrs	r3, r1
 8009a94:	4661      	mov	r1, ip
 8009a96:	c108      	stmia	r1!, {r3}
 8009a98:	9b03      	ldr	r3, [sp, #12]
 8009a9a:	468c      	mov	ip, r1
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d8e8      	bhi.n	8009a72 <__mdiff+0x8a>
 8009aa0:	0031      	movs	r1, r6
 8009aa2:	9c03      	ldr	r4, [sp, #12]
 8009aa4:	3115      	adds	r1, #21
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	428c      	cmp	r4, r1
 8009aaa:	d304      	bcc.n	8009ab6 <__mdiff+0xce>
 8009aac:	1ba3      	subs	r3, r4, r6
 8009aae:	3b15      	subs	r3, #21
 8009ab0:	089b      	lsrs	r3, r3, #2
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	9901      	ldr	r1, [sp, #4]
 8009ab8:	18cc      	adds	r4, r1, r3
 8009aba:	9905      	ldr	r1, [sp, #20]
 8009abc:	0026      	movs	r6, r4
 8009abe:	18cb      	adds	r3, r1, r3
 8009ac0:	469c      	mov	ip, r3
 8009ac2:	9902      	ldr	r1, [sp, #8]
 8009ac4:	428e      	cmp	r6, r1
 8009ac6:	d310      	bcc.n	8009aea <__mdiff+0x102>
 8009ac8:	9e02      	ldr	r6, [sp, #8]
 8009aca:	1ee5      	subs	r5, r4, #3
 8009acc:	2100      	movs	r1, #0
 8009ace:	42ae      	cmp	r6, r5
 8009ad0:	d304      	bcc.n	8009adc <__mdiff+0xf4>
 8009ad2:	0031      	movs	r1, r6
 8009ad4:	3103      	adds	r1, #3
 8009ad6:	1b09      	subs	r1, r1, r4
 8009ad8:	0889      	lsrs	r1, r1, #2
 8009ada:	0089      	lsls	r1, r1, #2
 8009adc:	185b      	adds	r3, r3, r1
 8009ade:	3b04      	subs	r3, #4
 8009ae0:	6819      	ldr	r1, [r3, #0]
 8009ae2:	2900      	cmp	r1, #0
 8009ae4:	d00f      	beq.n	8009b06 <__mdiff+0x11e>
 8009ae6:	6110      	str	r0, [r2, #16]
 8009ae8:	e797      	b.n	8009a1a <__mdiff+0x32>
 8009aea:	ce02      	ldmia	r6!, {r1}
 8009aec:	b28d      	uxth	r5, r1
 8009aee:	19ed      	adds	r5, r5, r7
 8009af0:	0c0f      	lsrs	r7, r1, #16
 8009af2:	1429      	asrs	r1, r5, #16
 8009af4:	1879      	adds	r1, r7, r1
 8009af6:	140f      	asrs	r7, r1, #16
 8009af8:	b2ad      	uxth	r5, r5
 8009afa:	0409      	lsls	r1, r1, #16
 8009afc:	430d      	orrs	r5, r1
 8009afe:	4661      	mov	r1, ip
 8009b00:	c120      	stmia	r1!, {r5}
 8009b02:	468c      	mov	ip, r1
 8009b04:	e7dd      	b.n	8009ac2 <__mdiff+0xda>
 8009b06:	3801      	subs	r0, #1
 8009b08:	e7e9      	b.n	8009ade <__mdiff+0xf6>
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	0800b607 	.word	0x0800b607
 8009b10:	00000232 	.word	0x00000232
 8009b14:	0800b618 	.word	0x0800b618

08009b18 <__d2b>:
 8009b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	0014      	movs	r4, r2
 8009b1e:	001e      	movs	r6, r3
 8009b20:	9f08      	ldr	r7, [sp, #32]
 8009b22:	f7ff fcbf 	bl	80094a4 <_Balloc>
 8009b26:	1e05      	subs	r5, r0, #0
 8009b28:	d105      	bne.n	8009b36 <__d2b+0x1e>
 8009b2a:	0002      	movs	r2, r0
 8009b2c:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <__d2b+0xb0>)
 8009b2e:	4927      	ldr	r1, [pc, #156]	; (8009bcc <__d2b+0xb4>)
 8009b30:	4827      	ldr	r0, [pc, #156]	; (8009bd0 <__d2b+0xb8>)
 8009b32:	f000 fa7f 	bl	800a034 <__assert_func>
 8009b36:	0333      	lsls	r3, r6, #12
 8009b38:	0076      	lsls	r6, r6, #1
 8009b3a:	0b1b      	lsrs	r3, r3, #12
 8009b3c:	0d76      	lsrs	r6, r6, #21
 8009b3e:	d124      	bne.n	8009b8a <__d2b+0x72>
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	d027      	beq.n	8009b96 <__d2b+0x7e>
 8009b46:	4668      	mov	r0, sp
 8009b48:	9400      	str	r4, [sp, #0]
 8009b4a:	f7ff fd71 	bl	8009630 <__lo0bits>
 8009b4e:	9c00      	ldr	r4, [sp, #0]
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d01e      	beq.n	8009b92 <__d2b+0x7a>
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	2120      	movs	r1, #32
 8009b58:	001a      	movs	r2, r3
 8009b5a:	1a09      	subs	r1, r1, r0
 8009b5c:	408a      	lsls	r2, r1
 8009b5e:	40c3      	lsrs	r3, r0
 8009b60:	4322      	orrs	r2, r4
 8009b62:	616a      	str	r2, [r5, #20]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	9c01      	ldr	r4, [sp, #4]
 8009b68:	61ac      	str	r4, [r5, #24]
 8009b6a:	1e63      	subs	r3, r4, #1
 8009b6c:	419c      	sbcs	r4, r3
 8009b6e:	3401      	adds	r4, #1
 8009b70:	612c      	str	r4, [r5, #16]
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d018      	beq.n	8009ba8 <__d2b+0x90>
 8009b76:	4b17      	ldr	r3, [pc, #92]	; (8009bd4 <__d2b+0xbc>)
 8009b78:	18f6      	adds	r6, r6, r3
 8009b7a:	2335      	movs	r3, #53	; 0x35
 8009b7c:	1836      	adds	r6, r6, r0
 8009b7e:	1a18      	subs	r0, r3, r0
 8009b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b82:	603e      	str	r6, [r7, #0]
 8009b84:	6018      	str	r0, [r3, #0]
 8009b86:	0028      	movs	r0, r5
 8009b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b8a:	2280      	movs	r2, #128	; 0x80
 8009b8c:	0352      	lsls	r2, r2, #13
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	e7d6      	b.n	8009b40 <__d2b+0x28>
 8009b92:	616c      	str	r4, [r5, #20]
 8009b94:	e7e7      	b.n	8009b66 <__d2b+0x4e>
 8009b96:	a801      	add	r0, sp, #4
 8009b98:	f7ff fd4a 	bl	8009630 <__lo0bits>
 8009b9c:	2401      	movs	r4, #1
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	612c      	str	r4, [r5, #16]
 8009ba2:	616b      	str	r3, [r5, #20]
 8009ba4:	3020      	adds	r0, #32
 8009ba6:	e7e4      	b.n	8009b72 <__d2b+0x5a>
 8009ba8:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <__d2b+0xc0>)
 8009baa:	18c0      	adds	r0, r0, r3
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <__d2b+0xc4>)
 8009bae:	6038      	str	r0, [r7, #0]
 8009bb0:	18e3      	adds	r3, r4, r3
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	18eb      	adds	r3, r5, r3
 8009bb6:	6958      	ldr	r0, [r3, #20]
 8009bb8:	f7ff fd20 	bl	80095fc <__hi0bits>
 8009bbc:	0164      	lsls	r4, r4, #5
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	1a24      	subs	r4, r4, r0
 8009bc2:	601c      	str	r4, [r3, #0]
 8009bc4:	e7df      	b.n	8009b86 <__d2b+0x6e>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	0800b607 	.word	0x0800b607
 8009bcc:	0000030a 	.word	0x0000030a
 8009bd0:	0800b618 	.word	0x0800b618
 8009bd4:	fffffbcd 	.word	0xfffffbcd
 8009bd8:	fffffbce 	.word	0xfffffbce
 8009bdc:	3fffffff 	.word	0x3fffffff

08009be0 <_calloc_r>:
 8009be0:	434a      	muls	r2, r1
 8009be2:	b570      	push	{r4, r5, r6, lr}
 8009be4:	0011      	movs	r1, r2
 8009be6:	0015      	movs	r5, r2
 8009be8:	f000 f852 	bl	8009c90 <_malloc_r>
 8009bec:	1e04      	subs	r4, r0, #0
 8009bee:	d003      	beq.n	8009bf8 <_calloc_r+0x18>
 8009bf0:	002a      	movs	r2, r5
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	f7fe f8e8 	bl	8007dc8 <memset>
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}

08009bfc <_free_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	0005      	movs	r5, r0
 8009c00:	2900      	cmp	r1, #0
 8009c02:	d010      	beq.n	8009c26 <_free_r+0x2a>
 8009c04:	1f0c      	subs	r4, r1, #4
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da00      	bge.n	8009c0e <_free_r+0x12>
 8009c0c:	18e4      	adds	r4, r4, r3
 8009c0e:	0028      	movs	r0, r5
 8009c10:	f000 fa64 	bl	800a0dc <__malloc_lock>
 8009c14:	4a1d      	ldr	r2, [pc, #116]	; (8009c8c <_free_r+0x90>)
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d105      	bne.n	8009c28 <_free_r+0x2c>
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	6014      	str	r4, [r2, #0]
 8009c20:	0028      	movs	r0, r5
 8009c22:	f000 fa63 	bl	800a0ec <__malloc_unlock>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	d908      	bls.n	8009c3e <_free_r+0x42>
 8009c2c:	6821      	ldr	r1, [r4, #0]
 8009c2e:	1860      	adds	r0, r4, r1
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d1f3      	bne.n	8009c1c <_free_r+0x20>
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	1841      	adds	r1, r0, r1
 8009c3a:	6021      	str	r1, [r4, #0]
 8009c3c:	e7ee      	b.n	8009c1c <_free_r+0x20>
 8009c3e:	001a      	movs	r2, r3
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <_free_r+0x4e>
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	d9f9      	bls.n	8009c3e <_free_r+0x42>
 8009c4a:	6811      	ldr	r1, [r2, #0]
 8009c4c:	1850      	adds	r0, r2, r1
 8009c4e:	42a0      	cmp	r0, r4
 8009c50:	d10b      	bne.n	8009c6a <_free_r+0x6e>
 8009c52:	6820      	ldr	r0, [r4, #0]
 8009c54:	1809      	adds	r1, r1, r0
 8009c56:	1850      	adds	r0, r2, r1
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	d1e0      	bne.n	8009c20 <_free_r+0x24>
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	1841      	adds	r1, r0, r1
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	6053      	str	r3, [r2, #4]
 8009c68:	e7da      	b.n	8009c20 <_free_r+0x24>
 8009c6a:	42a0      	cmp	r0, r4
 8009c6c:	d902      	bls.n	8009c74 <_free_r+0x78>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	e7d5      	b.n	8009c20 <_free_r+0x24>
 8009c74:	6821      	ldr	r1, [r4, #0]
 8009c76:	1860      	adds	r0, r4, r1
 8009c78:	4283      	cmp	r3, r0
 8009c7a:	d103      	bne.n	8009c84 <_free_r+0x88>
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	1841      	adds	r1, r0, r1
 8009c82:	6021      	str	r1, [r4, #0]
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	6054      	str	r4, [r2, #4]
 8009c88:	e7ca      	b.n	8009c20 <_free_r+0x24>
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	2000060c 	.word	0x2000060c

08009c90 <_malloc_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	2303      	movs	r3, #3
 8009c94:	1ccd      	adds	r5, r1, #3
 8009c96:	439d      	bics	r5, r3
 8009c98:	3508      	adds	r5, #8
 8009c9a:	0006      	movs	r6, r0
 8009c9c:	2d0c      	cmp	r5, #12
 8009c9e:	d21f      	bcs.n	8009ce0 <_malloc_r+0x50>
 8009ca0:	250c      	movs	r5, #12
 8009ca2:	42a9      	cmp	r1, r5
 8009ca4:	d81e      	bhi.n	8009ce4 <_malloc_r+0x54>
 8009ca6:	0030      	movs	r0, r6
 8009ca8:	f000 fa18 	bl	800a0dc <__malloc_lock>
 8009cac:	4925      	ldr	r1, [pc, #148]	; (8009d44 <_malloc_r+0xb4>)
 8009cae:	680a      	ldr	r2, [r1, #0]
 8009cb0:	0014      	movs	r4, r2
 8009cb2:	2c00      	cmp	r4, #0
 8009cb4:	d11a      	bne.n	8009cec <_malloc_r+0x5c>
 8009cb6:	4f24      	ldr	r7, [pc, #144]	; (8009d48 <_malloc_r+0xb8>)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <_malloc_r+0x38>
 8009cbe:	0021      	movs	r1, r4
 8009cc0:	0030      	movs	r0, r6
 8009cc2:	f000 f9a5 	bl	800a010 <_sbrk_r>
 8009cc6:	6038      	str	r0, [r7, #0]
 8009cc8:	0029      	movs	r1, r5
 8009cca:	0030      	movs	r0, r6
 8009ccc:	f000 f9a0 	bl	800a010 <_sbrk_r>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d12b      	bne.n	8009d2c <_malloc_r+0x9c>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	0030      	movs	r0, r6
 8009cd8:	6033      	str	r3, [r6, #0]
 8009cda:	f000 fa07 	bl	800a0ec <__malloc_unlock>
 8009cde:	e003      	b.n	8009ce8 <_malloc_r+0x58>
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	dade      	bge.n	8009ca2 <_malloc_r+0x12>
 8009ce4:	230c      	movs	r3, #12
 8009ce6:	6033      	str	r3, [r6, #0]
 8009ce8:	2000      	movs	r0, #0
 8009cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	1b5b      	subs	r3, r3, r5
 8009cf0:	d419      	bmi.n	8009d26 <_malloc_r+0x96>
 8009cf2:	2b0b      	cmp	r3, #11
 8009cf4:	d903      	bls.n	8009cfe <_malloc_r+0x6e>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	18e4      	adds	r4, r4, r3
 8009cfa:	6025      	str	r5, [r4, #0]
 8009cfc:	e003      	b.n	8009d06 <_malloc_r+0x76>
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	42a2      	cmp	r2, r4
 8009d02:	d10e      	bne.n	8009d22 <_malloc_r+0x92>
 8009d04:	600b      	str	r3, [r1, #0]
 8009d06:	0030      	movs	r0, r6
 8009d08:	f000 f9f0 	bl	800a0ec <__malloc_unlock>
 8009d0c:	0020      	movs	r0, r4
 8009d0e:	2207      	movs	r2, #7
 8009d10:	300b      	adds	r0, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	4390      	bics	r0, r2
 8009d16:	1ac2      	subs	r2, r0, r3
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	d0e6      	beq.n	8009cea <_malloc_r+0x5a>
 8009d1c:	1a1b      	subs	r3, r3, r0
 8009d1e:	50a3      	str	r3, [r4, r2]
 8009d20:	e7e3      	b.n	8009cea <_malloc_r+0x5a>
 8009d22:	6053      	str	r3, [r2, #4]
 8009d24:	e7ef      	b.n	8009d06 <_malloc_r+0x76>
 8009d26:	0022      	movs	r2, r4
 8009d28:	6864      	ldr	r4, [r4, #4]
 8009d2a:	e7c2      	b.n	8009cb2 <_malloc_r+0x22>
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	1cc4      	adds	r4, r0, #3
 8009d30:	439c      	bics	r4, r3
 8009d32:	42a0      	cmp	r0, r4
 8009d34:	d0e1      	beq.n	8009cfa <_malloc_r+0x6a>
 8009d36:	1a21      	subs	r1, r4, r0
 8009d38:	0030      	movs	r0, r6
 8009d3a:	f000 f969 	bl	800a010 <_sbrk_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d1db      	bne.n	8009cfa <_malloc_r+0x6a>
 8009d42:	e7c7      	b.n	8009cd4 <_malloc_r+0x44>
 8009d44:	2000060c 	.word	0x2000060c
 8009d48:	20000610 	.word	0x20000610

08009d4c <__ssputs_r>:
 8009d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d4e:	688e      	ldr	r6, [r1, #8]
 8009d50:	b085      	sub	sp, #20
 8009d52:	0007      	movs	r7, r0
 8009d54:	000c      	movs	r4, r1
 8009d56:	9203      	str	r2, [sp, #12]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	429e      	cmp	r6, r3
 8009d5c:	d83c      	bhi.n	8009dd8 <__ssputs_r+0x8c>
 8009d5e:	2390      	movs	r3, #144	; 0x90
 8009d60:	898a      	ldrh	r2, [r1, #12]
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	421a      	tst	r2, r3
 8009d66:	d034      	beq.n	8009dd2 <__ssputs_r+0x86>
 8009d68:	2503      	movs	r5, #3
 8009d6a:	6909      	ldr	r1, [r1, #16]
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	1a5b      	subs	r3, r3, r1
 8009d70:	9302      	str	r3, [sp, #8]
 8009d72:	6963      	ldr	r3, [r4, #20]
 8009d74:	9802      	ldr	r0, [sp, #8]
 8009d76:	435d      	muls	r5, r3
 8009d78:	0feb      	lsrs	r3, r5, #31
 8009d7a:	195d      	adds	r5, r3, r5
 8009d7c:	9b01      	ldr	r3, [sp, #4]
 8009d7e:	106d      	asrs	r5, r5, #1
 8009d80:	3301      	adds	r3, #1
 8009d82:	181b      	adds	r3, r3, r0
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	d900      	bls.n	8009d8a <__ssputs_r+0x3e>
 8009d88:	001d      	movs	r5, r3
 8009d8a:	0553      	lsls	r3, r2, #21
 8009d8c:	d532      	bpl.n	8009df4 <__ssputs_r+0xa8>
 8009d8e:	0029      	movs	r1, r5
 8009d90:	0038      	movs	r0, r7
 8009d92:	f7ff ff7d 	bl	8009c90 <_malloc_r>
 8009d96:	1e06      	subs	r6, r0, #0
 8009d98:	d109      	bne.n	8009dae <__ssputs_r+0x62>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	603b      	str	r3, [r7, #0]
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	2001      	movs	r0, #1
 8009da2:	89a2      	ldrh	r2, [r4, #12]
 8009da4:	4240      	negs	r0, r0
 8009da6:	4313      	orrs	r3, r2
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	b005      	add	sp, #20
 8009dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dae:	9a02      	ldr	r2, [sp, #8]
 8009db0:	6921      	ldr	r1, [r4, #16]
 8009db2:	f7ff fb6e 	bl	8009492 <memcpy>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	4a14      	ldr	r2, [pc, #80]	; (8009e0c <__ssputs_r+0xc0>)
 8009dba:	401a      	ands	r2, r3
 8009dbc:	2380      	movs	r3, #128	; 0x80
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	6126      	str	r6, [r4, #16]
 8009dc6:	18f6      	adds	r6, r6, r3
 8009dc8:	6026      	str	r6, [r4, #0]
 8009dca:	6165      	str	r5, [r4, #20]
 8009dcc:	9e01      	ldr	r6, [sp, #4]
 8009dce:	1aed      	subs	r5, r5, r3
 8009dd0:	60a5      	str	r5, [r4, #8]
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	429e      	cmp	r6, r3
 8009dd6:	d900      	bls.n	8009dda <__ssputs_r+0x8e>
 8009dd8:	9e01      	ldr	r6, [sp, #4]
 8009dda:	0032      	movs	r2, r6
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	6820      	ldr	r0, [r4, #0]
 8009de0:	f000 f968 	bl	800a0b4 <memmove>
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	2000      	movs	r0, #0
 8009de8:	1b9b      	subs	r3, r3, r6
 8009dea:	60a3      	str	r3, [r4, #8]
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	199e      	adds	r6, r3, r6
 8009df0:	6026      	str	r6, [r4, #0]
 8009df2:	e7da      	b.n	8009daa <__ssputs_r+0x5e>
 8009df4:	002a      	movs	r2, r5
 8009df6:	0038      	movs	r0, r7
 8009df8:	f000 f980 	bl	800a0fc <_realloc_r>
 8009dfc:	1e06      	subs	r6, r0, #0
 8009dfe:	d1e0      	bne.n	8009dc2 <__ssputs_r+0x76>
 8009e00:	0038      	movs	r0, r7
 8009e02:	6921      	ldr	r1, [r4, #16]
 8009e04:	f7ff fefa 	bl	8009bfc <_free_r>
 8009e08:	e7c7      	b.n	8009d9a <__ssputs_r+0x4e>
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	fffffb7f 	.word	0xfffffb7f

08009e10 <_svfiprintf_r>:
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b0a1      	sub	sp, #132	; 0x84
 8009e14:	9003      	str	r0, [sp, #12]
 8009e16:	001d      	movs	r5, r3
 8009e18:	898b      	ldrh	r3, [r1, #12]
 8009e1a:	000f      	movs	r7, r1
 8009e1c:	0016      	movs	r6, r2
 8009e1e:	061b      	lsls	r3, r3, #24
 8009e20:	d511      	bpl.n	8009e46 <_svfiprintf_r+0x36>
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10e      	bne.n	8009e46 <_svfiprintf_r+0x36>
 8009e28:	2140      	movs	r1, #64	; 0x40
 8009e2a:	f7ff ff31 	bl	8009c90 <_malloc_r>
 8009e2e:	6038      	str	r0, [r7, #0]
 8009e30:	6138      	str	r0, [r7, #16]
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d105      	bne.n	8009e42 <_svfiprintf_r+0x32>
 8009e36:	230c      	movs	r3, #12
 8009e38:	9a03      	ldr	r2, [sp, #12]
 8009e3a:	3801      	subs	r0, #1
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	b021      	add	sp, #132	; 0x84
 8009e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e42:	2340      	movs	r3, #64	; 0x40
 8009e44:	617b      	str	r3, [r7, #20]
 8009e46:	2300      	movs	r3, #0
 8009e48:	ac08      	add	r4, sp, #32
 8009e4a:	6163      	str	r3, [r4, #20]
 8009e4c:	3320      	adds	r3, #32
 8009e4e:	7663      	strb	r3, [r4, #25]
 8009e50:	3310      	adds	r3, #16
 8009e52:	76a3      	strb	r3, [r4, #26]
 8009e54:	9507      	str	r5, [sp, #28]
 8009e56:	0035      	movs	r5, r6
 8009e58:	782b      	ldrb	r3, [r5, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <_svfiprintf_r+0x52>
 8009e5e:	2b25      	cmp	r3, #37	; 0x25
 8009e60:	d147      	bne.n	8009ef2 <_svfiprintf_r+0xe2>
 8009e62:	1bab      	subs	r3, r5, r6
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d00c      	beq.n	8009e84 <_svfiprintf_r+0x74>
 8009e6a:	0032      	movs	r2, r6
 8009e6c:	0039      	movs	r1, r7
 8009e6e:	9803      	ldr	r0, [sp, #12]
 8009e70:	f7ff ff6c 	bl	8009d4c <__ssputs_r>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d100      	bne.n	8009e7a <_svfiprintf_r+0x6a>
 8009e78:	e0ae      	b.n	8009fd8 <_svfiprintf_r+0x1c8>
 8009e7a:	6962      	ldr	r2, [r4, #20]
 8009e7c:	9b05      	ldr	r3, [sp, #20]
 8009e7e:	4694      	mov	ip, r2
 8009e80:	4463      	add	r3, ip
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	782b      	ldrb	r3, [r5, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d100      	bne.n	8009e8c <_svfiprintf_r+0x7c>
 8009e8a:	e0a5      	b.n	8009fd8 <_svfiprintf_r+0x1c8>
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4252      	negs	r2, r2
 8009e92:	6062      	str	r2, [r4, #4]
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	3254      	adds	r2, #84	; 0x54
 8009e98:	1852      	adds	r2, r2, r1
 8009e9a:	1c6e      	adds	r6, r5, #1
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	60e3      	str	r3, [r4, #12]
 8009ea0:	60a3      	str	r3, [r4, #8]
 8009ea2:	7013      	strb	r3, [r2, #0]
 8009ea4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	7831      	ldrb	r1, [r6, #0]
 8009eaa:	4854      	ldr	r0, [pc, #336]	; (8009ffc <_svfiprintf_r+0x1ec>)
 8009eac:	f7ff fae6 	bl	800947c <memchr>
 8009eb0:	1c75      	adds	r5, r6, #1
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d11f      	bne.n	8009ef6 <_svfiprintf_r+0xe6>
 8009eb6:	6822      	ldr	r2, [r4, #0]
 8009eb8:	06d3      	lsls	r3, r2, #27
 8009eba:	d504      	bpl.n	8009ec6 <_svfiprintf_r+0xb6>
 8009ebc:	2353      	movs	r3, #83	; 0x53
 8009ebe:	a904      	add	r1, sp, #16
 8009ec0:	185b      	adds	r3, r3, r1
 8009ec2:	2120      	movs	r1, #32
 8009ec4:	7019      	strb	r1, [r3, #0]
 8009ec6:	0713      	lsls	r3, r2, #28
 8009ec8:	d504      	bpl.n	8009ed4 <_svfiprintf_r+0xc4>
 8009eca:	2353      	movs	r3, #83	; 0x53
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	185b      	adds	r3, r3, r1
 8009ed0:	212b      	movs	r1, #43	; 0x2b
 8009ed2:	7019      	strb	r1, [r3, #0]
 8009ed4:	7833      	ldrb	r3, [r6, #0]
 8009ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed8:	d016      	beq.n	8009f08 <_svfiprintf_r+0xf8>
 8009eda:	0035      	movs	r5, r6
 8009edc:	2100      	movs	r1, #0
 8009ede:	200a      	movs	r0, #10
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	782a      	ldrb	r2, [r5, #0]
 8009ee4:	1c6e      	adds	r6, r5, #1
 8009ee6:	3a30      	subs	r2, #48	; 0x30
 8009ee8:	2a09      	cmp	r2, #9
 8009eea:	d94e      	bls.n	8009f8a <_svfiprintf_r+0x17a>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d111      	bne.n	8009f14 <_svfiprintf_r+0x104>
 8009ef0:	e017      	b.n	8009f22 <_svfiprintf_r+0x112>
 8009ef2:	3501      	adds	r5, #1
 8009ef4:	e7b0      	b.n	8009e58 <_svfiprintf_r+0x48>
 8009ef6:	4b41      	ldr	r3, [pc, #260]	; (8009ffc <_svfiprintf_r+0x1ec>)
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	1ac0      	subs	r0, r0, r3
 8009efc:	2301      	movs	r3, #1
 8009efe:	4083      	lsls	r3, r0
 8009f00:	4313      	orrs	r3, r2
 8009f02:	002e      	movs	r6, r5
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	e7ce      	b.n	8009ea6 <_svfiprintf_r+0x96>
 8009f08:	9b07      	ldr	r3, [sp, #28]
 8009f0a:	1d19      	adds	r1, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	9107      	str	r1, [sp, #28]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	db01      	blt.n	8009f18 <_svfiprintf_r+0x108>
 8009f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f16:	e004      	b.n	8009f22 <_svfiprintf_r+0x112>
 8009f18:	425b      	negs	r3, r3
 8009f1a:	60e3      	str	r3, [r4, #12]
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	782b      	ldrb	r3, [r5, #0]
 8009f24:	2b2e      	cmp	r3, #46	; 0x2e
 8009f26:	d10a      	bne.n	8009f3e <_svfiprintf_r+0x12e>
 8009f28:	786b      	ldrb	r3, [r5, #1]
 8009f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2c:	d135      	bne.n	8009f9a <_svfiprintf_r+0x18a>
 8009f2e:	9b07      	ldr	r3, [sp, #28]
 8009f30:	3502      	adds	r5, #2
 8009f32:	1d1a      	adds	r2, r3, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	9207      	str	r2, [sp, #28]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	db2b      	blt.n	8009f94 <_svfiprintf_r+0x184>
 8009f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3e:	4e30      	ldr	r6, [pc, #192]	; (800a000 <_svfiprintf_r+0x1f0>)
 8009f40:	2203      	movs	r2, #3
 8009f42:	0030      	movs	r0, r6
 8009f44:	7829      	ldrb	r1, [r5, #0]
 8009f46:	f7ff fa99 	bl	800947c <memchr>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d006      	beq.n	8009f5c <_svfiprintf_r+0x14c>
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	1b80      	subs	r0, r0, r6
 8009f52:	4083      	lsls	r3, r0
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	3501      	adds	r5, #1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	7829      	ldrb	r1, [r5, #0]
 8009f5e:	2206      	movs	r2, #6
 8009f60:	4828      	ldr	r0, [pc, #160]	; (800a004 <_svfiprintf_r+0x1f4>)
 8009f62:	1c6e      	adds	r6, r5, #1
 8009f64:	7621      	strb	r1, [r4, #24]
 8009f66:	f7ff fa89 	bl	800947c <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d03c      	beq.n	8009fe8 <_svfiprintf_r+0x1d8>
 8009f6e:	4b26      	ldr	r3, [pc, #152]	; (800a008 <_svfiprintf_r+0x1f8>)
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d125      	bne.n	8009fc0 <_svfiprintf_r+0x1b0>
 8009f74:	2207      	movs	r2, #7
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	3307      	adds	r3, #7
 8009f7a:	4393      	bics	r3, r2
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	6963      	ldr	r3, [r4, #20]
 8009f82:	9a04      	ldr	r2, [sp, #16]
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	e765      	b.n	8009e56 <_svfiprintf_r+0x46>
 8009f8a:	4343      	muls	r3, r0
 8009f8c:	0035      	movs	r5, r6
 8009f8e:	2101      	movs	r1, #1
 8009f90:	189b      	adds	r3, r3, r2
 8009f92:	e7a6      	b.n	8009ee2 <_svfiprintf_r+0xd2>
 8009f94:	2301      	movs	r3, #1
 8009f96:	425b      	negs	r3, r3
 8009f98:	e7d0      	b.n	8009f3c <_svfiprintf_r+0x12c>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	200a      	movs	r0, #10
 8009f9e:	001a      	movs	r2, r3
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	7829      	ldrb	r1, [r5, #0]
 8009fa6:	1c6e      	adds	r6, r5, #1
 8009fa8:	3930      	subs	r1, #48	; 0x30
 8009faa:	2909      	cmp	r1, #9
 8009fac:	d903      	bls.n	8009fb6 <_svfiprintf_r+0x1a6>
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0c5      	beq.n	8009f3e <_svfiprintf_r+0x12e>
 8009fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb4:	e7c3      	b.n	8009f3e <_svfiprintf_r+0x12e>
 8009fb6:	4342      	muls	r2, r0
 8009fb8:	0035      	movs	r5, r6
 8009fba:	2301      	movs	r3, #1
 8009fbc:	1852      	adds	r2, r2, r1
 8009fbe:	e7f1      	b.n	8009fa4 <_svfiprintf_r+0x194>
 8009fc0:	ab07      	add	r3, sp, #28
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	003a      	movs	r2, r7
 8009fc6:	0021      	movs	r1, r4
 8009fc8:	4b10      	ldr	r3, [pc, #64]	; (800a00c <_svfiprintf_r+0x1fc>)
 8009fca:	9803      	ldr	r0, [sp, #12]
 8009fcc:	f7fd ffae 	bl	8007f2c <_printf_float>
 8009fd0:	9004      	str	r0, [sp, #16]
 8009fd2:	9b04      	ldr	r3, [sp, #16]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	d1d3      	bne.n	8009f80 <_svfiprintf_r+0x170>
 8009fd8:	89bb      	ldrh	r3, [r7, #12]
 8009fda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fdc:	065b      	lsls	r3, r3, #25
 8009fde:	d400      	bmi.n	8009fe2 <_svfiprintf_r+0x1d2>
 8009fe0:	e72d      	b.n	8009e3e <_svfiprintf_r+0x2e>
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	4240      	negs	r0, r0
 8009fe6:	e72a      	b.n	8009e3e <_svfiprintf_r+0x2e>
 8009fe8:	ab07      	add	r3, sp, #28
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	003a      	movs	r2, r7
 8009fee:	0021      	movs	r1, r4
 8009ff0:	4b06      	ldr	r3, [pc, #24]	; (800a00c <_svfiprintf_r+0x1fc>)
 8009ff2:	9803      	ldr	r0, [sp, #12]
 8009ff4:	f7fe fa58 	bl	80084a8 <_printf_i>
 8009ff8:	e7ea      	b.n	8009fd0 <_svfiprintf_r+0x1c0>
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	0800b774 	.word	0x0800b774
 800a000:	0800b77a 	.word	0x0800b77a
 800a004:	0800b77e 	.word	0x0800b77e
 800a008:	08007f2d 	.word	0x08007f2d
 800a00c:	08009d4d 	.word	0x08009d4d

0800a010 <_sbrk_r>:
 800a010:	2300      	movs	r3, #0
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	4d06      	ldr	r5, [pc, #24]	; (800a030 <_sbrk_r+0x20>)
 800a016:	0004      	movs	r4, r0
 800a018:	0008      	movs	r0, r1
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	f7fa f880 	bl	8004120 <_sbrk>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d103      	bne.n	800a02c <_sbrk_r+0x1c>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d000      	beq.n	800a02c <_sbrk_r+0x1c>
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
 800a02e:	46c0      	nop			; (mov r8, r8)
 800a030:	20000844 	.word	0x20000844

0800a034 <__assert_func>:
 800a034:	b530      	push	{r4, r5, lr}
 800a036:	0014      	movs	r4, r2
 800a038:	001a      	movs	r2, r3
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <__assert_func+0x2c>)
 800a03c:	0005      	movs	r5, r0
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	b085      	sub	sp, #20
 800a042:	68d8      	ldr	r0, [r3, #12]
 800a044:	4b07      	ldr	r3, [pc, #28]	; (800a064 <__assert_func+0x30>)
 800a046:	2c00      	cmp	r4, #0
 800a048:	d101      	bne.n	800a04e <__assert_func+0x1a>
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <__assert_func+0x34>)
 800a04c:	001c      	movs	r4, r3
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	9100      	str	r1, [sp, #0]
 800a052:	002b      	movs	r3, r5
 800a054:	4905      	ldr	r1, [pc, #20]	; (800a06c <__assert_func+0x38>)
 800a056:	9402      	str	r4, [sp, #8]
 800a058:	f000 f80a 	bl	800a070 <fiprintf>
 800a05c:	f000 fab2 	bl	800a5c4 <abort>
 800a060:	20000014 	.word	0x20000014
 800a064:	0800b785 	.word	0x0800b785
 800a068:	0800b7c0 	.word	0x0800b7c0
 800a06c:	0800b792 	.word	0x0800b792

0800a070 <fiprintf>:
 800a070:	b40e      	push	{r1, r2, r3}
 800a072:	b503      	push	{r0, r1, lr}
 800a074:	0001      	movs	r1, r0
 800a076:	ab03      	add	r3, sp, #12
 800a078:	4804      	ldr	r0, [pc, #16]	; (800a08c <fiprintf+0x1c>)
 800a07a:	cb04      	ldmia	r3!, {r2}
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	f000 f88a 	bl	800a198 <_vfiprintf_r>
 800a084:	b002      	add	sp, #8
 800a086:	bc08      	pop	{r3}
 800a088:	b003      	add	sp, #12
 800a08a:	4718      	bx	r3
 800a08c:	20000014 	.word	0x20000014

0800a090 <__ascii_mbtowc>:
 800a090:	b082      	sub	sp, #8
 800a092:	2900      	cmp	r1, #0
 800a094:	d100      	bne.n	800a098 <__ascii_mbtowc+0x8>
 800a096:	a901      	add	r1, sp, #4
 800a098:	1e10      	subs	r0, r2, #0
 800a09a:	d006      	beq.n	800a0aa <__ascii_mbtowc+0x1a>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d006      	beq.n	800a0ae <__ascii_mbtowc+0x1e>
 800a0a0:	7813      	ldrb	r3, [r2, #0]
 800a0a2:	600b      	str	r3, [r1, #0]
 800a0a4:	7810      	ldrb	r0, [r2, #0]
 800a0a6:	1e43      	subs	r3, r0, #1
 800a0a8:	4198      	sbcs	r0, r3
 800a0aa:	b002      	add	sp, #8
 800a0ac:	4770      	bx	lr
 800a0ae:	2002      	movs	r0, #2
 800a0b0:	4240      	negs	r0, r0
 800a0b2:	e7fa      	b.n	800a0aa <__ascii_mbtowc+0x1a>

0800a0b4 <memmove>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	4288      	cmp	r0, r1
 800a0b8:	d902      	bls.n	800a0c0 <memmove+0xc>
 800a0ba:	188b      	adds	r3, r1, r2
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	d303      	bcc.n	800a0c8 <memmove+0x14>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e007      	b.n	800a0d4 <memmove+0x20>
 800a0c4:	5c8b      	ldrb	r3, [r1, r2]
 800a0c6:	5483      	strb	r3, [r0, r2]
 800a0c8:	3a01      	subs	r2, #1
 800a0ca:	d2fb      	bcs.n	800a0c4 <memmove+0x10>
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	5ccc      	ldrb	r4, [r1, r3]
 800a0d0:	54c4      	strb	r4, [r0, r3]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d1fa      	bne.n	800a0ce <memmove+0x1a>
 800a0d8:	e7f8      	b.n	800a0cc <memmove+0x18>
	...

0800a0dc <__malloc_lock>:
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	4802      	ldr	r0, [pc, #8]	; (800a0e8 <__malloc_lock+0xc>)
 800a0e0:	f000 fc47 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	2000084c 	.word	0x2000084c

0800a0ec <__malloc_unlock>:
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	4802      	ldr	r0, [pc, #8]	; (800a0f8 <__malloc_unlock+0xc>)
 800a0f0:	f000 fc40 	bl	800a974 <__retarget_lock_release_recursive>
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	2000084c 	.word	0x2000084c

0800a0fc <_realloc_r>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	0007      	movs	r7, r0
 800a100:	000d      	movs	r5, r1
 800a102:	0016      	movs	r6, r2
 800a104:	2900      	cmp	r1, #0
 800a106:	d105      	bne.n	800a114 <_realloc_r+0x18>
 800a108:	0011      	movs	r1, r2
 800a10a:	f7ff fdc1 	bl	8009c90 <_malloc_r>
 800a10e:	0004      	movs	r4, r0
 800a110:	0020      	movs	r0, r4
 800a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a114:	2a00      	cmp	r2, #0
 800a116:	d103      	bne.n	800a120 <_realloc_r+0x24>
 800a118:	f7ff fd70 	bl	8009bfc <_free_r>
 800a11c:	0034      	movs	r4, r6
 800a11e:	e7f7      	b.n	800a110 <_realloc_r+0x14>
 800a120:	f000 fc96 	bl	800aa50 <_malloc_usable_size_r>
 800a124:	002c      	movs	r4, r5
 800a126:	42b0      	cmp	r0, r6
 800a128:	d2f2      	bcs.n	800a110 <_realloc_r+0x14>
 800a12a:	0031      	movs	r1, r6
 800a12c:	0038      	movs	r0, r7
 800a12e:	f7ff fdaf 	bl	8009c90 <_malloc_r>
 800a132:	1e04      	subs	r4, r0, #0
 800a134:	d0ec      	beq.n	800a110 <_realloc_r+0x14>
 800a136:	0029      	movs	r1, r5
 800a138:	0032      	movs	r2, r6
 800a13a:	f7ff f9aa 	bl	8009492 <memcpy>
 800a13e:	0029      	movs	r1, r5
 800a140:	0038      	movs	r0, r7
 800a142:	f7ff fd5b 	bl	8009bfc <_free_r>
 800a146:	e7e3      	b.n	800a110 <_realloc_r+0x14>

0800a148 <__sfputc_r>:
 800a148:	6893      	ldr	r3, [r2, #8]
 800a14a:	b510      	push	{r4, lr}
 800a14c:	3b01      	subs	r3, #1
 800a14e:	6093      	str	r3, [r2, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	da04      	bge.n	800a15e <__sfputc_r+0x16>
 800a154:	6994      	ldr	r4, [r2, #24]
 800a156:	42a3      	cmp	r3, r4
 800a158:	db07      	blt.n	800a16a <__sfputc_r+0x22>
 800a15a:	290a      	cmp	r1, #10
 800a15c:	d005      	beq.n	800a16a <__sfputc_r+0x22>
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	1c58      	adds	r0, r3, #1
 800a162:	6010      	str	r0, [r2, #0]
 800a164:	7019      	strb	r1, [r3, #0]
 800a166:	0008      	movs	r0, r1
 800a168:	bd10      	pop	{r4, pc}
 800a16a:	f000 f94f 	bl	800a40c <__swbuf_r>
 800a16e:	0001      	movs	r1, r0
 800a170:	e7f9      	b.n	800a166 <__sfputc_r+0x1e>

0800a172 <__sfputs_r>:
 800a172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a174:	0006      	movs	r6, r0
 800a176:	000f      	movs	r7, r1
 800a178:	0014      	movs	r4, r2
 800a17a:	18d5      	adds	r5, r2, r3
 800a17c:	42ac      	cmp	r4, r5
 800a17e:	d101      	bne.n	800a184 <__sfputs_r+0x12>
 800a180:	2000      	movs	r0, #0
 800a182:	e007      	b.n	800a194 <__sfputs_r+0x22>
 800a184:	7821      	ldrb	r1, [r4, #0]
 800a186:	003a      	movs	r2, r7
 800a188:	0030      	movs	r0, r6
 800a18a:	f7ff ffdd 	bl	800a148 <__sfputc_r>
 800a18e:	3401      	adds	r4, #1
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d1f3      	bne.n	800a17c <__sfputs_r+0xa>
 800a194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a198 <_vfiprintf_r>:
 800a198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19a:	b0a1      	sub	sp, #132	; 0x84
 800a19c:	0006      	movs	r6, r0
 800a19e:	000c      	movs	r4, r1
 800a1a0:	001f      	movs	r7, r3
 800a1a2:	9203      	str	r2, [sp, #12]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d004      	beq.n	800a1b2 <_vfiprintf_r+0x1a>
 800a1a8:	6983      	ldr	r3, [r0, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <_vfiprintf_r+0x1a>
 800a1ae:	f000 fb3f 	bl	800a830 <__sinit>
 800a1b2:	4b8e      	ldr	r3, [pc, #568]	; (800a3ec <_vfiprintf_r+0x254>)
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	d11c      	bne.n	800a1f2 <_vfiprintf_r+0x5a>
 800a1b8:	6874      	ldr	r4, [r6, #4]
 800a1ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1bc:	07db      	lsls	r3, r3, #31
 800a1be:	d405      	bmi.n	800a1cc <_vfiprintf_r+0x34>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	059b      	lsls	r3, r3, #22
 800a1c4:	d402      	bmi.n	800a1cc <_vfiprintf_r+0x34>
 800a1c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c8:	f000 fbd3 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	071b      	lsls	r3, r3, #28
 800a1d0:	d502      	bpl.n	800a1d8 <_vfiprintf_r+0x40>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11d      	bne.n	800a214 <_vfiprintf_r+0x7c>
 800a1d8:	0021      	movs	r1, r4
 800a1da:	0030      	movs	r0, r6
 800a1dc:	f000 f97a 	bl	800a4d4 <__swsetup_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d017      	beq.n	800a214 <_vfiprintf_r+0x7c>
 800a1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1e6:	07db      	lsls	r3, r3, #31
 800a1e8:	d50d      	bpl.n	800a206 <_vfiprintf_r+0x6e>
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	4240      	negs	r0, r0
 800a1ee:	b021      	add	sp, #132	; 0x84
 800a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f2:	4b7f      	ldr	r3, [pc, #508]	; (800a3f0 <_vfiprintf_r+0x258>)
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	d101      	bne.n	800a1fc <_vfiprintf_r+0x64>
 800a1f8:	68b4      	ldr	r4, [r6, #8]
 800a1fa:	e7de      	b.n	800a1ba <_vfiprintf_r+0x22>
 800a1fc:	4b7d      	ldr	r3, [pc, #500]	; (800a3f4 <_vfiprintf_r+0x25c>)
 800a1fe:	429c      	cmp	r4, r3
 800a200:	d1db      	bne.n	800a1ba <_vfiprintf_r+0x22>
 800a202:	68f4      	ldr	r4, [r6, #12]
 800a204:	e7d9      	b.n	800a1ba <_vfiprintf_r+0x22>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	059b      	lsls	r3, r3, #22
 800a20a:	d4ee      	bmi.n	800a1ea <_vfiprintf_r+0x52>
 800a20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20e:	f000 fbb1 	bl	800a974 <__retarget_lock_release_recursive>
 800a212:	e7ea      	b.n	800a1ea <_vfiprintf_r+0x52>
 800a214:	2300      	movs	r3, #0
 800a216:	ad08      	add	r5, sp, #32
 800a218:	616b      	str	r3, [r5, #20]
 800a21a:	3320      	adds	r3, #32
 800a21c:	766b      	strb	r3, [r5, #25]
 800a21e:	3310      	adds	r3, #16
 800a220:	76ab      	strb	r3, [r5, #26]
 800a222:	9707      	str	r7, [sp, #28]
 800a224:	9f03      	ldr	r7, [sp, #12]
 800a226:	783b      	ldrb	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <_vfiprintf_r+0x98>
 800a22c:	2b25      	cmp	r3, #37	; 0x25
 800a22e:	d14e      	bne.n	800a2ce <_vfiprintf_r+0x136>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	1afb      	subs	r3, r7, r3
 800a234:	9305      	str	r3, [sp, #20]
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	429f      	cmp	r7, r3
 800a23a:	d00d      	beq.n	800a258 <_vfiprintf_r+0xc0>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	0021      	movs	r1, r4
 800a240:	0030      	movs	r0, r6
 800a242:	9a03      	ldr	r2, [sp, #12]
 800a244:	f7ff ff95 	bl	800a172 <__sfputs_r>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d100      	bne.n	800a24e <_vfiprintf_r+0xb6>
 800a24c:	e0b5      	b.n	800a3ba <_vfiprintf_r+0x222>
 800a24e:	696a      	ldr	r2, [r5, #20]
 800a250:	9b05      	ldr	r3, [sp, #20]
 800a252:	4694      	mov	ip, r2
 800a254:	4463      	add	r3, ip
 800a256:	616b      	str	r3, [r5, #20]
 800a258:	783b      	ldrb	r3, [r7, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d100      	bne.n	800a260 <_vfiprintf_r+0xc8>
 800a25e:	e0ac      	b.n	800a3ba <_vfiprintf_r+0x222>
 800a260:	2201      	movs	r2, #1
 800a262:	1c7b      	adds	r3, r7, #1
 800a264:	9303      	str	r3, [sp, #12]
 800a266:	2300      	movs	r3, #0
 800a268:	4252      	negs	r2, r2
 800a26a:	606a      	str	r2, [r5, #4]
 800a26c:	a904      	add	r1, sp, #16
 800a26e:	3254      	adds	r2, #84	; 0x54
 800a270:	1852      	adds	r2, r2, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	60eb      	str	r3, [r5, #12]
 800a276:	60ab      	str	r3, [r5, #8]
 800a278:	7013      	strb	r3, [r2, #0]
 800a27a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	2205      	movs	r2, #5
 800a280:	7819      	ldrb	r1, [r3, #0]
 800a282:	485d      	ldr	r0, [pc, #372]	; (800a3f8 <_vfiprintf_r+0x260>)
 800a284:	f7ff f8fa 	bl	800947c <memchr>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	1c5f      	adds	r7, r3, #1
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d120      	bne.n	800a2d2 <_vfiprintf_r+0x13a>
 800a290:	682a      	ldr	r2, [r5, #0]
 800a292:	06d3      	lsls	r3, r2, #27
 800a294:	d504      	bpl.n	800a2a0 <_vfiprintf_r+0x108>
 800a296:	2353      	movs	r3, #83	; 0x53
 800a298:	a904      	add	r1, sp, #16
 800a29a:	185b      	adds	r3, r3, r1
 800a29c:	2120      	movs	r1, #32
 800a29e:	7019      	strb	r1, [r3, #0]
 800a2a0:	0713      	lsls	r3, r2, #28
 800a2a2:	d504      	bpl.n	800a2ae <_vfiprintf_r+0x116>
 800a2a4:	2353      	movs	r3, #83	; 0x53
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	185b      	adds	r3, r3, r1
 800a2aa:	212b      	movs	r1, #43	; 0x2b
 800a2ac:	7019      	strb	r1, [r3, #0]
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b4:	d016      	beq.n	800a2e4 <_vfiprintf_r+0x14c>
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	68eb      	ldr	r3, [r5, #12]
 800a2ba:	9f03      	ldr	r7, [sp, #12]
 800a2bc:	783a      	ldrb	r2, [r7, #0]
 800a2be:	1c78      	adds	r0, r7, #1
 800a2c0:	3a30      	subs	r2, #48	; 0x30
 800a2c2:	4684      	mov	ip, r0
 800a2c4:	2a09      	cmp	r2, #9
 800a2c6:	d94f      	bls.n	800a368 <_vfiprintf_r+0x1d0>
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	d111      	bne.n	800a2f0 <_vfiprintf_r+0x158>
 800a2cc:	e017      	b.n	800a2fe <_vfiprintf_r+0x166>
 800a2ce:	3701      	adds	r7, #1
 800a2d0:	e7a9      	b.n	800a226 <_vfiprintf_r+0x8e>
 800a2d2:	4b49      	ldr	r3, [pc, #292]	; (800a3f8 <_vfiprintf_r+0x260>)
 800a2d4:	682a      	ldr	r2, [r5, #0]
 800a2d6:	1ac0      	subs	r0, r0, r3
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4083      	lsls	r3, r0
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	9703      	str	r7, [sp, #12]
 800a2e2:	e7cb      	b.n	800a27c <_vfiprintf_r+0xe4>
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	1d19      	adds	r1, r3, #4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	9107      	str	r1, [sp, #28]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db01      	blt.n	800a2f4 <_vfiprintf_r+0x15c>
 800a2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2f2:	e004      	b.n	800a2fe <_vfiprintf_r+0x166>
 800a2f4:	425b      	negs	r3, r3
 800a2f6:	60eb      	str	r3, [r5, #12]
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	783b      	ldrb	r3, [r7, #0]
 800a300:	2b2e      	cmp	r3, #46	; 0x2e
 800a302:	d10a      	bne.n	800a31a <_vfiprintf_r+0x182>
 800a304:	787b      	ldrb	r3, [r7, #1]
 800a306:	2b2a      	cmp	r3, #42	; 0x2a
 800a308:	d137      	bne.n	800a37a <_vfiprintf_r+0x1e2>
 800a30a:	9b07      	ldr	r3, [sp, #28]
 800a30c:	3702      	adds	r7, #2
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	9207      	str	r2, [sp, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	db2d      	blt.n	800a374 <_vfiprintf_r+0x1dc>
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	2203      	movs	r2, #3
 800a31c:	7839      	ldrb	r1, [r7, #0]
 800a31e:	4837      	ldr	r0, [pc, #220]	; (800a3fc <_vfiprintf_r+0x264>)
 800a320:	f7ff f8ac 	bl	800947c <memchr>
 800a324:	2800      	cmp	r0, #0
 800a326:	d007      	beq.n	800a338 <_vfiprintf_r+0x1a0>
 800a328:	4b34      	ldr	r3, [pc, #208]	; (800a3fc <_vfiprintf_r+0x264>)
 800a32a:	682a      	ldr	r2, [r5, #0]
 800a32c:	1ac0      	subs	r0, r0, r3
 800a32e:	2340      	movs	r3, #64	; 0x40
 800a330:	4083      	lsls	r3, r0
 800a332:	4313      	orrs	r3, r2
 800a334:	3701      	adds	r7, #1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	7839      	ldrb	r1, [r7, #0]
 800a33a:	1c7b      	adds	r3, r7, #1
 800a33c:	2206      	movs	r2, #6
 800a33e:	4830      	ldr	r0, [pc, #192]	; (800a400 <_vfiprintf_r+0x268>)
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	7629      	strb	r1, [r5, #24]
 800a344:	f7ff f89a 	bl	800947c <memchr>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d045      	beq.n	800a3d8 <_vfiprintf_r+0x240>
 800a34c:	4b2d      	ldr	r3, [pc, #180]	; (800a404 <_vfiprintf_r+0x26c>)
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d127      	bne.n	800a3a2 <_vfiprintf_r+0x20a>
 800a352:	2207      	movs	r2, #7
 800a354:	9b07      	ldr	r3, [sp, #28]
 800a356:	3307      	adds	r3, #7
 800a358:	4393      	bics	r3, r2
 800a35a:	3308      	adds	r3, #8
 800a35c:	9307      	str	r3, [sp, #28]
 800a35e:	696b      	ldr	r3, [r5, #20]
 800a360:	9a04      	ldr	r2, [sp, #16]
 800a362:	189b      	adds	r3, r3, r2
 800a364:	616b      	str	r3, [r5, #20]
 800a366:	e75d      	b.n	800a224 <_vfiprintf_r+0x8c>
 800a368:	210a      	movs	r1, #10
 800a36a:	434b      	muls	r3, r1
 800a36c:	4667      	mov	r7, ip
 800a36e:	189b      	adds	r3, r3, r2
 800a370:	3909      	subs	r1, #9
 800a372:	e7a3      	b.n	800a2bc <_vfiprintf_r+0x124>
 800a374:	2301      	movs	r3, #1
 800a376:	425b      	negs	r3, r3
 800a378:	e7ce      	b.n	800a318 <_vfiprintf_r+0x180>
 800a37a:	2300      	movs	r3, #0
 800a37c:	001a      	movs	r2, r3
 800a37e:	3701      	adds	r7, #1
 800a380:	606b      	str	r3, [r5, #4]
 800a382:	7839      	ldrb	r1, [r7, #0]
 800a384:	1c78      	adds	r0, r7, #1
 800a386:	3930      	subs	r1, #48	; 0x30
 800a388:	4684      	mov	ip, r0
 800a38a:	2909      	cmp	r1, #9
 800a38c:	d903      	bls.n	800a396 <_vfiprintf_r+0x1fe>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0c3      	beq.n	800a31a <_vfiprintf_r+0x182>
 800a392:	9209      	str	r2, [sp, #36]	; 0x24
 800a394:	e7c1      	b.n	800a31a <_vfiprintf_r+0x182>
 800a396:	230a      	movs	r3, #10
 800a398:	435a      	muls	r2, r3
 800a39a:	4667      	mov	r7, ip
 800a39c:	1852      	adds	r2, r2, r1
 800a39e:	3b09      	subs	r3, #9
 800a3a0:	e7ef      	b.n	800a382 <_vfiprintf_r+0x1ea>
 800a3a2:	ab07      	add	r3, sp, #28
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	0022      	movs	r2, r4
 800a3a8:	0029      	movs	r1, r5
 800a3aa:	0030      	movs	r0, r6
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <_vfiprintf_r+0x270>)
 800a3ae:	f7fd fdbd 	bl	8007f2c <_printf_float>
 800a3b2:	9004      	str	r0, [sp, #16]
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	d1d1      	bne.n	800a35e <_vfiprintf_r+0x1c6>
 800a3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3bc:	07db      	lsls	r3, r3, #31
 800a3be:	d405      	bmi.n	800a3cc <_vfiprintf_r+0x234>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	059b      	lsls	r3, r3, #22
 800a3c4:	d402      	bmi.n	800a3cc <_vfiprintf_r+0x234>
 800a3c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c8:	f000 fad4 	bl	800a974 <__retarget_lock_release_recursive>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	065b      	lsls	r3, r3, #25
 800a3d0:	d500      	bpl.n	800a3d4 <_vfiprintf_r+0x23c>
 800a3d2:	e70a      	b.n	800a1ea <_vfiprintf_r+0x52>
 800a3d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3d6:	e70a      	b.n	800a1ee <_vfiprintf_r+0x56>
 800a3d8:	ab07      	add	r3, sp, #28
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	0022      	movs	r2, r4
 800a3de:	0029      	movs	r1, r5
 800a3e0:	0030      	movs	r0, r6
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <_vfiprintf_r+0x270>)
 800a3e4:	f7fe f860 	bl	80084a8 <_printf_i>
 800a3e8:	e7e3      	b.n	800a3b2 <_vfiprintf_r+0x21a>
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	0800b8ec 	.word	0x0800b8ec
 800a3f0:	0800b90c 	.word	0x0800b90c
 800a3f4:	0800b8cc 	.word	0x0800b8cc
 800a3f8:	0800b774 	.word	0x0800b774
 800a3fc:	0800b77a 	.word	0x0800b77a
 800a400:	0800b77e 	.word	0x0800b77e
 800a404:	08007f2d 	.word	0x08007f2d
 800a408:	0800a173 	.word	0x0800a173

0800a40c <__swbuf_r>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	0005      	movs	r5, r0
 800a410:	000e      	movs	r6, r1
 800a412:	0014      	movs	r4, r2
 800a414:	2800      	cmp	r0, #0
 800a416:	d004      	beq.n	800a422 <__swbuf_r+0x16>
 800a418:	6983      	ldr	r3, [r0, #24]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <__swbuf_r+0x16>
 800a41e:	f000 fa07 	bl	800a830 <__sinit>
 800a422:	4b22      	ldr	r3, [pc, #136]	; (800a4ac <__swbuf_r+0xa0>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d12e      	bne.n	800a486 <__swbuf_r+0x7a>
 800a428:	686c      	ldr	r4, [r5, #4]
 800a42a:	69a3      	ldr	r3, [r4, #24]
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	071b      	lsls	r3, r3, #28
 800a432:	d532      	bpl.n	800a49a <__swbuf_r+0x8e>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d02f      	beq.n	800a49a <__swbuf_r+0x8e>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	6922      	ldr	r2, [r4, #16]
 800a43e:	b2f7      	uxtb	r7, r6
 800a440:	1a98      	subs	r0, r3, r2
 800a442:	6963      	ldr	r3, [r4, #20]
 800a444:	b2f6      	uxtb	r6, r6
 800a446:	4283      	cmp	r3, r0
 800a448:	dc05      	bgt.n	800a456 <__swbuf_r+0x4a>
 800a44a:	0021      	movs	r1, r4
 800a44c:	0028      	movs	r0, r5
 800a44e:	f000 f94d 	bl	800a6ec <_fflush_r>
 800a452:	2800      	cmp	r0, #0
 800a454:	d127      	bne.n	800a4a6 <__swbuf_r+0x9a>
 800a456:	68a3      	ldr	r3, [r4, #8]
 800a458:	3001      	adds	r0, #1
 800a45a:	3b01      	subs	r3, #1
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	6022      	str	r2, [r4, #0]
 800a464:	701f      	strb	r7, [r3, #0]
 800a466:	6963      	ldr	r3, [r4, #20]
 800a468:	4283      	cmp	r3, r0
 800a46a:	d004      	beq.n	800a476 <__swbuf_r+0x6a>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	07db      	lsls	r3, r3, #31
 800a470:	d507      	bpl.n	800a482 <__swbuf_r+0x76>
 800a472:	2e0a      	cmp	r6, #10
 800a474:	d105      	bne.n	800a482 <__swbuf_r+0x76>
 800a476:	0021      	movs	r1, r4
 800a478:	0028      	movs	r0, r5
 800a47a:	f000 f937 	bl	800a6ec <_fflush_r>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d111      	bne.n	800a4a6 <__swbuf_r+0x9a>
 800a482:	0030      	movs	r0, r6
 800a484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a486:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <__swbuf_r+0xa4>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	d101      	bne.n	800a490 <__swbuf_r+0x84>
 800a48c:	68ac      	ldr	r4, [r5, #8]
 800a48e:	e7cc      	b.n	800a42a <__swbuf_r+0x1e>
 800a490:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <__swbuf_r+0xa8>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d1c9      	bne.n	800a42a <__swbuf_r+0x1e>
 800a496:	68ec      	ldr	r4, [r5, #12]
 800a498:	e7c7      	b.n	800a42a <__swbuf_r+0x1e>
 800a49a:	0021      	movs	r1, r4
 800a49c:	0028      	movs	r0, r5
 800a49e:	f000 f819 	bl	800a4d4 <__swsetup_r>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0c9      	beq.n	800a43a <__swbuf_r+0x2e>
 800a4a6:	2601      	movs	r6, #1
 800a4a8:	4276      	negs	r6, r6
 800a4aa:	e7ea      	b.n	800a482 <__swbuf_r+0x76>
 800a4ac:	0800b8ec 	.word	0x0800b8ec
 800a4b0:	0800b90c 	.word	0x0800b90c
 800a4b4:	0800b8cc 	.word	0x0800b8cc

0800a4b8 <__ascii_wctomb>:
 800a4b8:	0003      	movs	r3, r0
 800a4ba:	1e08      	subs	r0, r1, #0
 800a4bc:	d005      	beq.n	800a4ca <__ascii_wctomb+0x12>
 800a4be:	2aff      	cmp	r2, #255	; 0xff
 800a4c0:	d904      	bls.n	800a4cc <__ascii_wctomb+0x14>
 800a4c2:	228a      	movs	r2, #138	; 0x8a
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	4240      	negs	r0, r0
 800a4ca:	4770      	bx	lr
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	700a      	strb	r2, [r1, #0]
 800a4d0:	e7fb      	b.n	800a4ca <__ascii_wctomb+0x12>
	...

0800a4d4 <__swsetup_r>:
 800a4d4:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <__swsetup_r+0xe0>)
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	0006      	movs	r6, r0
 800a4dc:	000c      	movs	r4, r1
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	d005      	beq.n	800a4ee <__swsetup_r+0x1a>
 800a4e2:	69ab      	ldr	r3, [r5, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <__swsetup_r+0x1a>
 800a4e8:	0028      	movs	r0, r5
 800a4ea:	f000 f9a1 	bl	800a830 <__sinit>
 800a4ee:	4b32      	ldr	r3, [pc, #200]	; (800a5b8 <__swsetup_r+0xe4>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d10f      	bne.n	800a514 <__swsetup_r+0x40>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	5ee2      	ldrsh	r2, [r4, r3]
 800a4fa:	b293      	uxth	r3, r2
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	d42d      	bmi.n	800a55c <__swsetup_r+0x88>
 800a500:	06d9      	lsls	r1, r3, #27
 800a502:	d411      	bmi.n	800a528 <__swsetup_r+0x54>
 800a504:	2309      	movs	r3, #9
 800a506:	2001      	movs	r0, #1
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	3337      	adds	r3, #55	; 0x37
 800a50c:	4313      	orrs	r3, r2
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	4240      	negs	r0, r0
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <__swsetup_r+0xe8>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <__swsetup_r+0x4a>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7eb      	b.n	800a4f6 <__swsetup_r+0x22>
 800a51e:	4b28      	ldr	r3, [pc, #160]	; (800a5c0 <__swsetup_r+0xec>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d1e8      	bne.n	800a4f6 <__swsetup_r+0x22>
 800a524:	68ec      	ldr	r4, [r5, #12]
 800a526:	e7e6      	b.n	800a4f6 <__swsetup_r+0x22>
 800a528:	075b      	lsls	r3, r3, #29
 800a52a:	d513      	bpl.n	800a554 <__swsetup_r+0x80>
 800a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52e:	2900      	cmp	r1, #0
 800a530:	d008      	beq.n	800a544 <__swsetup_r+0x70>
 800a532:	0023      	movs	r3, r4
 800a534:	3344      	adds	r3, #68	; 0x44
 800a536:	4299      	cmp	r1, r3
 800a538:	d002      	beq.n	800a540 <__swsetup_r+0x6c>
 800a53a:	0030      	movs	r0, r6
 800a53c:	f7ff fb5e 	bl	8009bfc <_free_r>
 800a540:	2300      	movs	r3, #0
 800a542:	6363      	str	r3, [r4, #52]	; 0x34
 800a544:	2224      	movs	r2, #36	; 0x24
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	4393      	bics	r3, r2
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	2300      	movs	r3, #0
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2308      	movs	r3, #8
 800a556:	89a2      	ldrh	r2, [r4, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <__swsetup_r+0xa6>
 800a562:	21a0      	movs	r1, #160	; 0xa0
 800a564:	2280      	movs	r2, #128	; 0x80
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	0089      	lsls	r1, r1, #2
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	400b      	ands	r3, r1
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <__swsetup_r+0xa6>
 800a572:	0021      	movs	r1, r4
 800a574:	0030      	movs	r0, r6
 800a576:	f000 fa27 	bl	800a9c8 <__smakebuf_r>
 800a57a:	220c      	movs	r2, #12
 800a57c:	5ea3      	ldrsh	r3, [r4, r2]
 800a57e:	2001      	movs	r0, #1
 800a580:	001a      	movs	r2, r3
 800a582:	b299      	uxth	r1, r3
 800a584:	4002      	ands	r2, r0
 800a586:	4203      	tst	r3, r0
 800a588:	d00f      	beq.n	800a5aa <__swsetup_r+0xd6>
 800a58a:	2200      	movs	r2, #0
 800a58c:	60a2      	str	r2, [r4, #8]
 800a58e:	6962      	ldr	r2, [r4, #20]
 800a590:	4252      	negs	r2, r2
 800a592:	61a2      	str	r2, [r4, #24]
 800a594:	2000      	movs	r0, #0
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	4282      	cmp	r2, r0
 800a59a:	d1ba      	bne.n	800a512 <__swsetup_r+0x3e>
 800a59c:	060a      	lsls	r2, r1, #24
 800a59e:	d5b8      	bpl.n	800a512 <__swsetup_r+0x3e>
 800a5a0:	2240      	movs	r2, #64	; 0x40
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	3801      	subs	r0, #1
 800a5a8:	e7b3      	b.n	800a512 <__swsetup_r+0x3e>
 800a5aa:	0788      	lsls	r0, r1, #30
 800a5ac:	d400      	bmi.n	800a5b0 <__swsetup_r+0xdc>
 800a5ae:	6962      	ldr	r2, [r4, #20]
 800a5b0:	60a2      	str	r2, [r4, #8]
 800a5b2:	e7ef      	b.n	800a594 <__swsetup_r+0xc0>
 800a5b4:	20000014 	.word	0x20000014
 800a5b8:	0800b8ec 	.word	0x0800b8ec
 800a5bc:	0800b90c 	.word	0x0800b90c
 800a5c0:	0800b8cc 	.word	0x0800b8cc

0800a5c4 <abort>:
 800a5c4:	2006      	movs	r0, #6
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	f000 fa74 	bl	800aab4 <raise>
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7f9 fd35 	bl	800403c <_exit>
	...

0800a5d4 <__sflush_r>:
 800a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	0005      	movs	r5, r0
 800a5da:	000c      	movs	r4, r1
 800a5dc:	071a      	lsls	r2, r3, #28
 800a5de:	d45f      	bmi.n	800a6a0 <__sflush_r+0xcc>
 800a5e0:	684a      	ldr	r2, [r1, #4]
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	dc04      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dc01      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0fa      	beq.n	800a5ec <__sflush_r+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	682e      	ldr	r6, [r5, #0]
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	001a      	movs	r2, r3
 800a600:	0149      	lsls	r1, r1, #5
 800a602:	400a      	ands	r2, r1
 800a604:	420b      	tst	r3, r1
 800a606:	d034      	beq.n	800a672 <__sflush_r+0x9e>
 800a608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	075b      	lsls	r3, r3, #29
 800a60e:	d506      	bpl.n	800a61e <__sflush_r+0x4a>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	1ac0      	subs	r0, r0, r3
 800a614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <__sflush_r+0x4a>
 800a61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a61c:	1ac0      	subs	r0, r0, r3
 800a61e:	0002      	movs	r2, r0
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	2300      	movs	r3, #0
 800a624:	0028      	movs	r0, r5
 800a626:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a628:	47b8      	blx	r7
 800a62a:	89a1      	ldrh	r1, [r4, #12]
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d106      	bne.n	800a63e <__sflush_r+0x6a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	2b1d      	cmp	r3, #29
 800a634:	d831      	bhi.n	800a69a <__sflush_r+0xc6>
 800a636:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <__sflush_r+0x114>)
 800a638:	40da      	lsrs	r2, r3
 800a63a:	07d3      	lsls	r3, r2, #31
 800a63c:	d52d      	bpl.n	800a69a <__sflush_r+0xc6>
 800a63e:	2300      	movs	r3, #0
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	04cb      	lsls	r3, r1, #19
 800a648:	d505      	bpl.n	800a656 <__sflush_r+0x82>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <__sflush_r+0x80>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d100      	bne.n	800a656 <__sflush_r+0x82>
 800a654:	6560      	str	r0, [r4, #84]	; 0x54
 800a656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a658:	602e      	str	r6, [r5, #0]
 800a65a:	2900      	cmp	r1, #0
 800a65c:	d0c6      	beq.n	800a5ec <__sflush_r+0x18>
 800a65e:	0023      	movs	r3, r4
 800a660:	3344      	adds	r3, #68	; 0x44
 800a662:	4299      	cmp	r1, r3
 800a664:	d002      	beq.n	800a66c <__sflush_r+0x98>
 800a666:	0028      	movs	r0, r5
 800a668:	f7ff fac8 	bl	8009bfc <_free_r>
 800a66c:	2000      	movs	r0, #0
 800a66e:	6360      	str	r0, [r4, #52]	; 0x34
 800a670:	e7bd      	b.n	800a5ee <__sflush_r+0x1a>
 800a672:	2301      	movs	r3, #1
 800a674:	0028      	movs	r0, r5
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	47b8      	blx	r7
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d1c5      	bne.n	800a60a <__sflush_r+0x36>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c2      	beq.n	800a60a <__sflush_r+0x36>
 800a684:	2b1d      	cmp	r3, #29
 800a686:	d001      	beq.n	800a68c <__sflush_r+0xb8>
 800a688:	2b16      	cmp	r3, #22
 800a68a:	d101      	bne.n	800a690 <__sflush_r+0xbc>
 800a68c:	602e      	str	r6, [r5, #0]
 800a68e:	e7ad      	b.n	800a5ec <__sflush_r+0x18>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	89a2      	ldrh	r2, [r4, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	e7a9      	b.n	800a5ee <__sflush_r+0x1a>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	430b      	orrs	r3, r1
 800a69e:	e7fa      	b.n	800a696 <__sflush_r+0xc2>
 800a6a0:	690f      	ldr	r7, [r1, #16]
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	d0a2      	beq.n	800a5ec <__sflush_r+0x18>
 800a6a6:	680a      	ldr	r2, [r1, #0]
 800a6a8:	600f      	str	r7, [r1, #0]
 800a6aa:	1bd2      	subs	r2, r2, r7
 800a6ac:	9201      	str	r2, [sp, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	079b      	lsls	r3, r3, #30
 800a6b2:	d100      	bne.n	800a6b6 <__sflush_r+0xe2>
 800a6b4:	694a      	ldr	r2, [r1, #20]
 800a6b6:	60a2      	str	r2, [r4, #8]
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dc00      	bgt.n	800a6c0 <__sflush_r+0xec>
 800a6be:	e795      	b.n	800a5ec <__sflush_r+0x18>
 800a6c0:	003a      	movs	r2, r7
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ca:	47b0      	blx	r6
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	dc06      	bgt.n	800a6de <__sflush_r+0x10a>
 800a6d0:	2340      	movs	r3, #64	; 0x40
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	89a2      	ldrh	r2, [r4, #12]
 800a6d6:	4240      	negs	r0, r0
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	e787      	b.n	800a5ee <__sflush_r+0x1a>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	183f      	adds	r7, r7, r0
 800a6e2:	1a1b      	subs	r3, r3, r0
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	e7e7      	b.n	800a6b8 <__sflush_r+0xe4>
 800a6e8:	20400001 	.word	0x20400001

0800a6ec <_fflush_r>:
 800a6ec:	690b      	ldr	r3, [r1, #16]
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	0005      	movs	r5, r0
 800a6f2:	000c      	movs	r4, r1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <_fflush_r+0x12>
 800a6f8:	2500      	movs	r5, #0
 800a6fa:	0028      	movs	r0, r5
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d004      	beq.n	800a70c <_fflush_r+0x20>
 800a702:	6983      	ldr	r3, [r0, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <_fflush_r+0x20>
 800a708:	f000 f892 	bl	800a830 <__sinit>
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <_fflush_r+0x74>)
 800a70e:	429c      	cmp	r4, r3
 800a710:	d11b      	bne.n	800a74a <_fflush_r+0x5e>
 800a712:	686c      	ldr	r4, [r5, #4]
 800a714:	220c      	movs	r2, #12
 800a716:	5ea3      	ldrsh	r3, [r4, r2]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0ed      	beq.n	800a6f8 <_fflush_r+0xc>
 800a71c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a71e:	07d2      	lsls	r2, r2, #31
 800a720:	d404      	bmi.n	800a72c <_fflush_r+0x40>
 800a722:	059b      	lsls	r3, r3, #22
 800a724:	d402      	bmi.n	800a72c <_fflush_r+0x40>
 800a726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a728:	f000 f923 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a72c:	0028      	movs	r0, r5
 800a72e:	0021      	movs	r1, r4
 800a730:	f7ff ff50 	bl	800a5d4 <__sflush_r>
 800a734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a736:	0005      	movs	r5, r0
 800a738:	07db      	lsls	r3, r3, #31
 800a73a:	d4de      	bmi.n	800a6fa <_fflush_r+0xe>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	059b      	lsls	r3, r3, #22
 800a740:	d4db      	bmi.n	800a6fa <_fflush_r+0xe>
 800a742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a744:	f000 f916 	bl	800a974 <__retarget_lock_release_recursive>
 800a748:	e7d7      	b.n	800a6fa <_fflush_r+0xe>
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <_fflush_r+0x78>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d101      	bne.n	800a754 <_fflush_r+0x68>
 800a750:	68ac      	ldr	r4, [r5, #8]
 800a752:	e7df      	b.n	800a714 <_fflush_r+0x28>
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <_fflush_r+0x7c>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d1dc      	bne.n	800a714 <_fflush_r+0x28>
 800a75a:	68ec      	ldr	r4, [r5, #12]
 800a75c:	e7da      	b.n	800a714 <_fflush_r+0x28>
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	0800b8ec 	.word	0x0800b8ec
 800a764:	0800b90c 	.word	0x0800b90c
 800a768:	0800b8cc 	.word	0x0800b8cc

0800a76c <std>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b510      	push	{r4, lr}
 800a770:	0004      	movs	r4, r0
 800a772:	6003      	str	r3, [r0, #0]
 800a774:	6043      	str	r3, [r0, #4]
 800a776:	6083      	str	r3, [r0, #8]
 800a778:	8181      	strh	r1, [r0, #12]
 800a77a:	6643      	str	r3, [r0, #100]	; 0x64
 800a77c:	0019      	movs	r1, r3
 800a77e:	81c2      	strh	r2, [r0, #14]
 800a780:	6103      	str	r3, [r0, #16]
 800a782:	6143      	str	r3, [r0, #20]
 800a784:	6183      	str	r3, [r0, #24]
 800a786:	2208      	movs	r2, #8
 800a788:	305c      	adds	r0, #92	; 0x5c
 800a78a:	f7fd fb1d 	bl	8007dc8 <memset>
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <std+0x38>)
 800a790:	6263      	str	r3, [r4, #36]	; 0x24
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <std+0x3c>)
 800a794:	6224      	str	r4, [r4, #32]
 800a796:	62a3      	str	r3, [r4, #40]	; 0x28
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <std+0x40>)
 800a79a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79c:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <std+0x44>)
 800a79e:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	0800aaf5 	.word	0x0800aaf5
 800a7a8:	0800ab1d 	.word	0x0800ab1d
 800a7ac:	0800ab55 	.word	0x0800ab55
 800a7b0:	0800ab81 	.word	0x0800ab81

0800a7b4 <_cleanup_r>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4902      	ldr	r1, [pc, #8]	; (800a7c0 <_cleanup_r+0xc>)
 800a7b8:	f000 f8ba 	bl	800a930 <_fwalk_reent>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	0800a6ed 	.word	0x0800a6ed

0800a7c4 <__sfmoreglue>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	2568      	movs	r5, #104	; 0x68
 800a7c8:	1e4a      	subs	r2, r1, #1
 800a7ca:	4355      	muls	r5, r2
 800a7cc:	000e      	movs	r6, r1
 800a7ce:	0029      	movs	r1, r5
 800a7d0:	3174      	adds	r1, #116	; 0x74
 800a7d2:	f7ff fa5d 	bl	8009c90 <_malloc_r>
 800a7d6:	1e04      	subs	r4, r0, #0
 800a7d8:	d008      	beq.n	800a7ec <__sfmoreglue+0x28>
 800a7da:	2100      	movs	r1, #0
 800a7dc:	002a      	movs	r2, r5
 800a7de:	6001      	str	r1, [r0, #0]
 800a7e0:	6046      	str	r6, [r0, #4]
 800a7e2:	300c      	adds	r0, #12
 800a7e4:	60a0      	str	r0, [r4, #8]
 800a7e6:	3268      	adds	r2, #104	; 0x68
 800a7e8:	f7fd faee 	bl	8007dc8 <memset>
 800a7ec:	0020      	movs	r0, r4
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__sfp_lock_acquire>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4802      	ldr	r0, [pc, #8]	; (800a7fc <__sfp_lock_acquire+0xc>)
 800a7f4:	f000 f8bd 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	20000850 	.word	0x20000850

0800a800 <__sfp_lock_release>:
 800a800:	b510      	push	{r4, lr}
 800a802:	4802      	ldr	r0, [pc, #8]	; (800a80c <__sfp_lock_release+0xc>)
 800a804:	f000 f8b6 	bl	800a974 <__retarget_lock_release_recursive>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	20000850 	.word	0x20000850

0800a810 <__sinit_lock_acquire>:
 800a810:	b510      	push	{r4, lr}
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <__sinit_lock_acquire+0xc>)
 800a814:	f000 f8ad 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	2000084b 	.word	0x2000084b

0800a820 <__sinit_lock_release>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4802      	ldr	r0, [pc, #8]	; (800a82c <__sinit_lock_release+0xc>)
 800a824:	f000 f8a6 	bl	800a974 <__retarget_lock_release_recursive>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	2000084b 	.word	0x2000084b

0800a830 <__sinit>:
 800a830:	b513      	push	{r0, r1, r4, lr}
 800a832:	0004      	movs	r4, r0
 800a834:	f7ff ffec 	bl	800a810 <__sinit_lock_acquire>
 800a838:	69a3      	ldr	r3, [r4, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <__sinit+0x14>
 800a83e:	f7ff ffef 	bl	800a820 <__sinit_lock_release>
 800a842:	bd13      	pop	{r0, r1, r4, pc}
 800a844:	64a3      	str	r3, [r4, #72]	; 0x48
 800a846:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a848:	6523      	str	r3, [r4, #80]	; 0x50
 800a84a:	4b13      	ldr	r3, [pc, #76]	; (800a898 <__sinit+0x68>)
 800a84c:	4a13      	ldr	r2, [pc, #76]	; (800a89c <__sinit+0x6c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	62a2      	str	r2, [r4, #40]	; 0x28
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	42a3      	cmp	r3, r4
 800a856:	d101      	bne.n	800a85c <__sinit+0x2c>
 800a858:	2301      	movs	r3, #1
 800a85a:	61a3      	str	r3, [r4, #24]
 800a85c:	0020      	movs	r0, r4
 800a85e:	f000 f81f 	bl	800a8a0 <__sfp>
 800a862:	6060      	str	r0, [r4, #4]
 800a864:	0020      	movs	r0, r4
 800a866:	f000 f81b 	bl	800a8a0 <__sfp>
 800a86a:	60a0      	str	r0, [r4, #8]
 800a86c:	0020      	movs	r0, r4
 800a86e:	f000 f817 	bl	800a8a0 <__sfp>
 800a872:	2200      	movs	r2, #0
 800a874:	2104      	movs	r1, #4
 800a876:	60e0      	str	r0, [r4, #12]
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f7ff ff77 	bl	800a76c <std>
 800a87e:	2201      	movs	r2, #1
 800a880:	2109      	movs	r1, #9
 800a882:	68a0      	ldr	r0, [r4, #8]
 800a884:	f7ff ff72 	bl	800a76c <std>
 800a888:	2202      	movs	r2, #2
 800a88a:	2112      	movs	r1, #18
 800a88c:	68e0      	ldr	r0, [r4, #12]
 800a88e:	f7ff ff6d 	bl	800a76c <std>
 800a892:	2301      	movs	r3, #1
 800a894:	61a3      	str	r3, [r4, #24]
 800a896:	e7d2      	b.n	800a83e <__sinit+0xe>
 800a898:	0800b54c 	.word	0x0800b54c
 800a89c:	0800a7b5 	.word	0x0800a7b5

0800a8a0 <__sfp>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	0007      	movs	r7, r0
 800a8a4:	f7ff ffa4 	bl	800a7f0 <__sfp_lock_acquire>
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <__sfp+0x88>)
 800a8aa:	681e      	ldr	r6, [r3, #0]
 800a8ac:	69b3      	ldr	r3, [r6, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <__sfp+0x18>
 800a8b2:	0030      	movs	r0, r6
 800a8b4:	f7ff ffbc 	bl	800a830 <__sinit>
 800a8b8:	3648      	adds	r6, #72	; 0x48
 800a8ba:	68b4      	ldr	r4, [r6, #8]
 800a8bc:	6873      	ldr	r3, [r6, #4]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	d504      	bpl.n	800a8cc <__sfp+0x2c>
 800a8c2:	6833      	ldr	r3, [r6, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d022      	beq.n	800a90e <__sfp+0x6e>
 800a8c8:	6836      	ldr	r6, [r6, #0]
 800a8ca:	e7f6      	b.n	800a8ba <__sfp+0x1a>
 800a8cc:	220c      	movs	r2, #12
 800a8ce:	5ea5      	ldrsh	r5, [r4, r2]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d11a      	bne.n	800a90a <__sfp+0x6a>
 800a8d4:	0020      	movs	r0, r4
 800a8d6:	4b15      	ldr	r3, [pc, #84]	; (800a92c <__sfp+0x8c>)
 800a8d8:	3058      	adds	r0, #88	; 0x58
 800a8da:	60e3      	str	r3, [r4, #12]
 800a8dc:	6665      	str	r5, [r4, #100]	; 0x64
 800a8de:	f000 f847 	bl	800a970 <__retarget_lock_init_recursive>
 800a8e2:	f7ff ff8d 	bl	800a800 <__sfp_lock_release>
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	2208      	movs	r2, #8
 800a8ea:	0029      	movs	r1, r5
 800a8ec:	6025      	str	r5, [r4, #0]
 800a8ee:	60a5      	str	r5, [r4, #8]
 800a8f0:	6065      	str	r5, [r4, #4]
 800a8f2:	6125      	str	r5, [r4, #16]
 800a8f4:	6165      	str	r5, [r4, #20]
 800a8f6:	61a5      	str	r5, [r4, #24]
 800a8f8:	305c      	adds	r0, #92	; 0x5c
 800a8fa:	f7fd fa65 	bl	8007dc8 <memset>
 800a8fe:	6365      	str	r5, [r4, #52]	; 0x34
 800a900:	63a5      	str	r5, [r4, #56]	; 0x38
 800a902:	64a5      	str	r5, [r4, #72]	; 0x48
 800a904:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a906:	0020      	movs	r0, r4
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90a:	3468      	adds	r4, #104	; 0x68
 800a90c:	e7d7      	b.n	800a8be <__sfp+0x1e>
 800a90e:	2104      	movs	r1, #4
 800a910:	0038      	movs	r0, r7
 800a912:	f7ff ff57 	bl	800a7c4 <__sfmoreglue>
 800a916:	1e04      	subs	r4, r0, #0
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	d1d5      	bne.n	800a8c8 <__sfp+0x28>
 800a91c:	f7ff ff70 	bl	800a800 <__sfp_lock_release>
 800a920:	230c      	movs	r3, #12
 800a922:	603b      	str	r3, [r7, #0]
 800a924:	e7ef      	b.n	800a906 <__sfp+0x66>
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	0800b54c 	.word	0x0800b54c
 800a92c:	ffff0001 	.word	0xffff0001

0800a930 <_fwalk_reent>:
 800a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a932:	0004      	movs	r4, r0
 800a934:	0006      	movs	r6, r0
 800a936:	2700      	movs	r7, #0
 800a938:	9101      	str	r1, [sp, #4]
 800a93a:	3448      	adds	r4, #72	; 0x48
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	68a5      	ldr	r5, [r4, #8]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	d504      	bpl.n	800a954 <_fwalk_reent+0x24>
 800a94a:	6824      	ldr	r4, [r4, #0]
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	d1f5      	bne.n	800a93c <_fwalk_reent+0xc>
 800a950:	0038      	movs	r0, r7
 800a952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d908      	bls.n	800a96c <_fwalk_reent+0x3c>
 800a95a:	220e      	movs	r2, #14
 800a95c:	5eab      	ldrsh	r3, [r5, r2]
 800a95e:	3301      	adds	r3, #1
 800a960:	d004      	beq.n	800a96c <_fwalk_reent+0x3c>
 800a962:	0029      	movs	r1, r5
 800a964:	0030      	movs	r0, r6
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	4798      	blx	r3
 800a96a:	4307      	orrs	r7, r0
 800a96c:	3568      	adds	r5, #104	; 0x68
 800a96e:	e7e8      	b.n	800a942 <_fwalk_reent+0x12>

0800a970 <__retarget_lock_init_recursive>:
 800a970:	4770      	bx	lr

0800a972 <__retarget_lock_acquire_recursive>:
 800a972:	4770      	bx	lr

0800a974 <__retarget_lock_release_recursive>:
 800a974:	4770      	bx	lr
	...

0800a978 <__swhatbuf_r>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	000e      	movs	r6, r1
 800a97c:	001d      	movs	r5, r3
 800a97e:	230e      	movs	r3, #14
 800a980:	5ec9      	ldrsh	r1, [r1, r3]
 800a982:	0014      	movs	r4, r2
 800a984:	b096      	sub	sp, #88	; 0x58
 800a986:	2900      	cmp	r1, #0
 800a988:	da07      	bge.n	800a99a <__swhatbuf_r+0x22>
 800a98a:	2300      	movs	r3, #0
 800a98c:	602b      	str	r3, [r5, #0]
 800a98e:	89b3      	ldrh	r3, [r6, #12]
 800a990:	061b      	lsls	r3, r3, #24
 800a992:	d411      	bmi.n	800a9b8 <__swhatbuf_r+0x40>
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	e00f      	b.n	800a9ba <__swhatbuf_r+0x42>
 800a99a:	466a      	mov	r2, sp
 800a99c:	f000 f91c 	bl	800abd8 <_fstat_r>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	dbf2      	blt.n	800a98a <__swhatbuf_r+0x12>
 800a9a4:	23f0      	movs	r3, #240	; 0xf0
 800a9a6:	9901      	ldr	r1, [sp, #4]
 800a9a8:	021b      	lsls	r3, r3, #8
 800a9aa:	4019      	ands	r1, r3
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <__swhatbuf_r+0x4c>)
 800a9ae:	18c9      	adds	r1, r1, r3
 800a9b0:	424b      	negs	r3, r1
 800a9b2:	4159      	adcs	r1, r3
 800a9b4:	6029      	str	r1, [r5, #0]
 800a9b6:	e7ed      	b.n	800a994 <__swhatbuf_r+0x1c>
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	b016      	add	sp, #88	; 0x58
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	ffffe000 	.word	0xffffe000

0800a9c8 <__smakebuf_r>:
 800a9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ca:	2602      	movs	r6, #2
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	0005      	movs	r5, r0
 800a9d0:	000c      	movs	r4, r1
 800a9d2:	4233      	tst	r3, r6
 800a9d4:	d006      	beq.n	800a9e4 <__smakebuf_r+0x1c>
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	3347      	adds	r3, #71	; 0x47
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9e4:	466a      	mov	r2, sp
 800a9e6:	ab01      	add	r3, sp, #4
 800a9e8:	f7ff ffc6 	bl	800a978 <__swhatbuf_r>
 800a9ec:	9900      	ldr	r1, [sp, #0]
 800a9ee:	0007      	movs	r7, r0
 800a9f0:	0028      	movs	r0, r5
 800a9f2:	f7ff f94d 	bl	8009c90 <_malloc_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d108      	bne.n	800aa0c <__smakebuf_r+0x44>
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d4ef      	bmi.n	800a9e2 <__smakebuf_r+0x1a>
 800aa02:	2203      	movs	r2, #3
 800aa04:	4393      	bics	r3, r2
 800aa06:	431e      	orrs	r6, r3
 800aa08:	81a6      	strh	r6, [r4, #12]
 800aa0a:	e7e4      	b.n	800a9d6 <__smakebuf_r+0xe>
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <__smakebuf_r+0x84>)
 800aa0e:	62ab      	str	r3, [r5, #40]	; 0x28
 800aa10:	2380      	movs	r3, #128	; 0x80
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	6020      	str	r0, [r4, #0]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	9b00      	ldr	r3, [sp, #0]
 800aa1c:	6120      	str	r0, [r4, #16]
 800aa1e:	6163      	str	r3, [r4, #20]
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00d      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa26:	0028      	movs	r0, r5
 800aa28:	230e      	movs	r3, #14
 800aa2a:	5ee1      	ldrsh	r1, [r4, r3]
 800aa2c:	f000 f8e6 	bl	800abfc <_isatty_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d006      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa34:	2203      	movs	r2, #3
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	4393      	bics	r3, r2
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	89a0      	ldrh	r0, [r4, #12]
 800aa44:	4307      	orrs	r7, r0
 800aa46:	81a7      	strh	r7, [r4, #12]
 800aa48:	e7cb      	b.n	800a9e2 <__smakebuf_r+0x1a>
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	0800a7b5 	.word	0x0800a7b5

0800aa50 <_malloc_usable_size_r>:
 800aa50:	1f0b      	subs	r3, r1, #4
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	1f18      	subs	r0, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da01      	bge.n	800aa5e <_malloc_usable_size_r+0xe>
 800aa5a:	580b      	ldr	r3, [r1, r0]
 800aa5c:	18c0      	adds	r0, r0, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_raise_r>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	0004      	movs	r4, r0
 800aa64:	000d      	movs	r5, r1
 800aa66:	291f      	cmp	r1, #31
 800aa68:	d904      	bls.n	800aa74 <_raise_r+0x14>
 800aa6a:	2316      	movs	r3, #22
 800aa6c:	6003      	str	r3, [r0, #0]
 800aa6e:	2001      	movs	r0, #1
 800aa70:	4240      	negs	r0, r0
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <_raise_r+0x24>
 800aa7a:	008a      	lsls	r2, r1, #2
 800aa7c:	189b      	adds	r3, r3, r2
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d108      	bne.n	800aa96 <_raise_r+0x36>
 800aa84:	0020      	movs	r0, r4
 800aa86:	f000 f831 	bl	800aaec <_getpid_r>
 800aa8a:	002a      	movs	r2, r5
 800aa8c:	0001      	movs	r1, r0
 800aa8e:	0020      	movs	r0, r4
 800aa90:	f000 f81a 	bl	800aac8 <_kill_r>
 800aa94:	e7ed      	b.n	800aa72 <_raise_r+0x12>
 800aa96:	2000      	movs	r0, #0
 800aa98:	2a01      	cmp	r2, #1
 800aa9a:	d0ea      	beq.n	800aa72 <_raise_r+0x12>
 800aa9c:	1c51      	adds	r1, r2, #1
 800aa9e:	d103      	bne.n	800aaa8 <_raise_r+0x48>
 800aaa0:	2316      	movs	r3, #22
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	e7e4      	b.n	800aa72 <_raise_r+0x12>
 800aaa8:	2400      	movs	r4, #0
 800aaaa:	0028      	movs	r0, r5
 800aaac:	601c      	str	r4, [r3, #0]
 800aaae:	4790      	blx	r2
 800aab0:	0020      	movs	r0, r4
 800aab2:	e7de      	b.n	800aa72 <_raise_r+0x12>

0800aab4 <raise>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <raise+0x10>)
 800aab8:	0001      	movs	r1, r0
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	f7ff ffd0 	bl	800aa60 <_raise_r>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	20000014 	.word	0x20000014

0800aac8 <_kill_r>:
 800aac8:	2300      	movs	r3, #0
 800aaca:	b570      	push	{r4, r5, r6, lr}
 800aacc:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_kill_r+0x20>)
 800aace:	0004      	movs	r4, r0
 800aad0:	0008      	movs	r0, r1
 800aad2:	0011      	movs	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f9 faa1 	bl	800401c <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d103      	bne.n	800aae6 <_kill_r+0x1e>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d000      	beq.n	800aae6 <_kill_r+0x1e>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	20000844 	.word	0x20000844

0800aaec <_getpid_r>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f7f9 fa8f 	bl	8004010 <_getpid>
 800aaf2:	bd10      	pop	{r4, pc}

0800aaf4 <__sread>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	000c      	movs	r4, r1
 800aaf8:	250e      	movs	r5, #14
 800aafa:	5f49      	ldrsh	r1, [r1, r5]
 800aafc:	f000 f8a4 	bl	800ac48 <_read_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	db03      	blt.n	800ab0c <__sread+0x18>
 800ab04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab06:	181b      	adds	r3, r3, r0
 800ab08:	6563      	str	r3, [r4, #84]	; 0x54
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	4a02      	ldr	r2, [pc, #8]	; (800ab18 <__sread+0x24>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	e7f9      	b.n	800ab0a <__sread+0x16>
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	ffffefff 	.word	0xffffefff

0800ab1c <__swrite>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	001f      	movs	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	0005      	movs	r5, r0
 800ab24:	000c      	movs	r4, r1
 800ab26:	0016      	movs	r6, r2
 800ab28:	05db      	lsls	r3, r3, #23
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1c>
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2302      	movs	r3, #2
 800ab34:	f000 f874 	bl	800ac20 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	4a05      	ldr	r2, [pc, #20]	; (800ab50 <__swrite+0x34>)
 800ab3c:	0028      	movs	r0, r5
 800ab3e:	4013      	ands	r3, r2
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	0032      	movs	r2, r6
 800ab44:	230e      	movs	r3, #14
 800ab46:	5ee1      	ldrsh	r1, [r4, r3]
 800ab48:	003b      	movs	r3, r7
 800ab4a:	f000 f81f 	bl	800ab8c <_write_r>
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	ffffefff 	.word	0xffffefff

0800ab54 <__sseek>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	000c      	movs	r4, r1
 800ab58:	250e      	movs	r5, #14
 800ab5a:	5f49      	ldrsh	r1, [r1, r5]
 800ab5c:	f000 f860 	bl	800ac20 <_lseek_r>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	1c42      	adds	r2, r0, #1
 800ab64:	d103      	bne.n	800ab6e <__sseek+0x1a>
 800ab66:	4a05      	ldr	r2, [pc, #20]	; (800ab7c <__sseek+0x28>)
 800ab68:	4013      	ands	r3, r2
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	2280      	movs	r2, #128	; 0x80
 800ab70:	0152      	lsls	r2, r2, #5
 800ab72:	4313      	orrs	r3, r2
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	6560      	str	r0, [r4, #84]	; 0x54
 800ab78:	e7f8      	b.n	800ab6c <__sseek+0x18>
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	ffffefff 	.word	0xffffefff

0800ab80 <__sclose>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	230e      	movs	r3, #14
 800ab84:	5ec9      	ldrsh	r1, [r1, r3]
 800ab86:	f000 f815 	bl	800abb4 <_close_r>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <_write_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	0004      	movs	r4, r0
 800ab90:	0008      	movs	r0, r1
 800ab92:	0011      	movs	r1, r2
 800ab94:	001a      	movs	r2, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d05      	ldr	r5, [pc, #20]	; (800abb0 <_write_r+0x24>)
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	f7f9 fa77 	bl	800408e <_write>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d103      	bne.n	800abac <_write_r+0x20>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d000      	beq.n	800abac <_write_r+0x20>
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	20000844 	.word	0x20000844

0800abb4 <_close_r>:
 800abb4:	2300      	movs	r3, #0
 800abb6:	b570      	push	{r4, r5, r6, lr}
 800abb8:	4d06      	ldr	r5, [pc, #24]	; (800abd4 <_close_r+0x20>)
 800abba:	0004      	movs	r4, r0
 800abbc:	0008      	movs	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7f9 fa81 	bl	80040c6 <_close>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d103      	bne.n	800abd0 <_close_r+0x1c>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d000      	beq.n	800abd0 <_close_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	20000844 	.word	0x20000844

0800abd8 <_fstat_r>:
 800abd8:	2300      	movs	r3, #0
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	4d06      	ldr	r5, [pc, #24]	; (800abf8 <_fstat_r+0x20>)
 800abde:	0004      	movs	r4, r0
 800abe0:	0008      	movs	r0, r1
 800abe2:	0011      	movs	r1, r2
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	f7f9 fa78 	bl	80040da <_fstat>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d103      	bne.n	800abf6 <_fstat_r+0x1e>
 800abee:	682b      	ldr	r3, [r5, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d000      	beq.n	800abf6 <_fstat_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	20000844 	.word	0x20000844

0800abfc <_isatty_r>:
 800abfc:	2300      	movs	r3, #0
 800abfe:	b570      	push	{r4, r5, r6, lr}
 800ac00:	4d06      	ldr	r5, [pc, #24]	; (800ac1c <_isatty_r+0x20>)
 800ac02:	0004      	movs	r4, r0
 800ac04:	0008      	movs	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f9 fa75 	bl	80040f6 <_isatty>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d103      	bne.n	800ac18 <_isatty_r+0x1c>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d000      	beq.n	800ac18 <_isatty_r+0x1c>
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	20000844 	.word	0x20000844

0800ac20 <_lseek_r>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	0004      	movs	r4, r0
 800ac24:	0008      	movs	r0, r1
 800ac26:	0011      	movs	r1, r2
 800ac28:	001a      	movs	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4d05      	ldr	r5, [pc, #20]	; (800ac44 <_lseek_r+0x24>)
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f9 fa6a 	bl	8004108 <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d103      	bne.n	800ac40 <_lseek_r+0x20>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d000      	beq.n	800ac40 <_lseek_r+0x20>
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	20000844 	.word	0x20000844

0800ac48 <_read_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	001a      	movs	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	4d05      	ldr	r5, [pc, #20]	; (800ac6c <_read_r+0x24>)
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f9 f9fc 	bl	8004054 <_read>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d103      	bne.n	800ac68 <_read_r+0x20>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d000      	beq.n	800ac68 <_read_r+0x20>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	20000844 	.word	0x20000844

0800ac70 <_init>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr

0800ac7c <_fini>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr
